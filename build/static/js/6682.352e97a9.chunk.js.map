{"version":3,"file":"static/js/6682.352e97a9.chunk.js","mappings":"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D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE9D,EAAG,CACC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EA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","sources":["Apps/Arcade/Components/MainMenu.js","Apps/Arcade/Handlers/handleCanvasBorders.js","Apps/Arcade/Games/Breakout/Breakout.js","Apps/Arcade/Games/Snake/Snake.js","Apps/Arcade/Games/Space Invaders/SpaceInvaders.js","Apps/Arcade/Handlers/handleAction.js","Apps/Arcade/Handlers/handleTopMenu.js","Apps/Arcade/Components/KeybindDialog.jsx","Apps/Arcade/index.jsx","Apps/Arcade/Controls/Keyboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport SnakeSplash from \"../Games/Snake/SnakeSplash.png\";\r\nimport BreakoutSplash from \"../Games/Breakout/BreakoutSplash.png\";\r\nimport SpaceInvadersSplash from \"../Games/Space Invaders/SpaceInvadersSplash.png\";\r\n\r\nexport default function MainMenu({ controls, setGameState, setGameChoice }) {\r\n    const [currentSelection, setCurrentSelection] = useState(0);\r\n    const gamelist = {\r\n        \"Snake\": SnakeSplash,\r\n        \"Breakout\": BreakoutSplash,\r\n        \"Space Invaders\": SpaceInvadersSplash\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(controls.down && currentSelection < Object.keys(gamelist).length - 1) {\r\n            setCurrentSelection(currentSelection + 1);\r\n        }else if(controls.up && currentSelection > 0) {\r\n            setCurrentSelection(currentSelection - 1);\r\n        }else if(controls.one || controls.pause) {\r\n            setGameState(\"Start\");\r\n            setGameChoice(Object.keys(gamelist)[currentSelection]);\r\n        }\r\n    }, [controls]);\r\n\r\n    return (\r\n        <div>\r\n        <object id=\"arcadeMainMenu\" width={600} height={400}>\r\n            <div id=\"arcadeSplashScreen\">\r\n                {Object.keys(gamelist).map((name, index) => (\r\n                    index === currentSelection &&\r\n                    <img key={index} src={gamelist[name]}></img>\r\n                ))}\r\n            </div>\r\n            <div id=\"arcadeGameList\">\r\n                {Object.keys(gamelist).map((name, index) => (\r\n                    <div \r\n                    key={index}\r\n                    style={index === currentSelection ? {background: \"deepskyblue\", color: \"black\"} : {background: \"black\", color: \"white\"}}\r\n                    onClick={() => setCurrentSelection(index)}>\r\n                        {name}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </object>\r\n        </div>\r\n        );\r\n}","export const handleCanvasBorders = (ctx, width, height) => {\r\n    ctx.fillStyle = \"silver\";\r\n    ctx.fillRect(0, 0, width, 1);\r\n    ctx.fillRect(0, 0, 1, height);\r\n    ctx.fillRect(width - 1, 0, 1, height);\r\n    ctx.fillRect(0, height - 1, width, 1);\r\n} ","import { useState, useRef, useEffect } from \"react\";\r\nimport LevelsJSON from \"./Breakout_Maps.json\";\r\nimport { handleCanvasBorders } from \"../../Handlers/handleCanvasBorders.js\";\r\n\r\nconst frequency = 60; //Hertz\r\nconst frameRate = 1000 / frequency; // frames / milisecond\r\nconst rows = 30;\r\nconst cols = 30;\r\nconst defaultPlayerBar = {\r\n  x: 12,\r\n  y: 27,\r\n  w: 6,\r\n  speed: 0.25,\r\n};\r\nconst defaultBall = {\r\n  x: 15,\r\n  y: 50,\r\n  r: 0.5,\r\n  dirX: 0.25,\r\n  dirY: -0.25,\r\n};\r\nconst defaultFirework = {\r\n  x: 15,\r\n  y: 52,\r\n  r: 0.25,\r\n  dirX: 0,\r\n  dirY: -0.25,\r\n  t: -5,\r\n  color: \"\",\r\n};\r\nexport default function Breakout({ controls, isSelected, gameState, setGameState }) {\r\n  const canvasRef = useRef(null);\r\n  const [Maps, setMaps] = useState(JSON.parse(JSON.stringify(LevelsJSON))); //Only way to deep copy nested objects without external dependency\r\n  const [gameLevel, setGameLevel] = useState(0);\r\n  const [currLevel, setCurrLevel] = useState(Maps[gameLevel]);\r\n  const [levelHealth, setLevelHealth] = useState(currLevel.Bars);\r\n  const [frameCount, setFrameCount] = useState(0);\r\n  const [winFrameCount, setWinFrameCount] = useState(0);\r\n  let [playerBar, setPlayerBar] = useState(Object.create(defaultPlayerBar));\r\n  let [ball, setBall] = useState(Object.create(defaultBall));\r\n  let [firework1] = useState(Object.create(defaultFirework));\r\n  firework1.color = \"blue\";\r\n  let [firework2] = useState(Object.create(defaultFirework));\r\n  firework2.color = \"green\";\r\n  let [firework3] = useState(Object.create(defaultFirework));\r\n  firework3.color = \"red\";\r\n  let [firework4] = useState(Object.create(defaultFirework));\r\n  firework4.color = \"yellow\";\r\n  let [firework5] = useState(Object.create(defaultFirework));\r\n  firework5.color = \"cyan\";\r\n  let [firework6] = useState(Object.create(defaultFirework));\r\n  firework6.color = \"magenta\";\r\n  let [firework7] = useState(Object.create(defaultFirework));\r\n  firework7.color = \"white\";\r\n  let [score, setScore] = useState(0);\r\n  let [time, setTime] = useState(0);\r\n  const [startTime, setStartTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (controls.pause) {\r\n      if (gameState === \"Play\") {\r\n        setGameState(\"Pause\");\r\n      } else if (gameState === \"Pause\") {\r\n        setGameState(\"Play\");\r\n      } else if (\r\n        gameState === \"Win\" ||\r\n        gameState === \"End\" ||\r\n        gameState === \"Start\"\r\n      ) {\r\n        setGameState(\"Restart\");\r\n      }\r\n    }\r\n  }, [controls]);\r\n\r\n  useEffect(() => {\r\n    if (gameState === \"Play\" || \"Win\") {\r\n      if (\r\n        controls.left &&\r\n        !controls.right &&\r\n        playerBar.x + playerBar.w > playerBar.w\r\n      ) {\r\n        playerBar.x = playerBar.x - playerBar.speed;\r\n      }\r\n      if (\r\n        controls.right &&\r\n        !controls.left &&\r\n        playerBar.x + playerBar.w < cols\r\n      ) {\r\n        playerBar.x = playerBar.x + playerBar.speed;\r\n      }\r\n    }\r\n  }, [controls, frameCount]);\r\n\r\n  useEffect(() => {\r\n    if (gameState === \"Restart\") {\r\n      setTime(0);\r\n    } else if (gameState === \"Play\") {\r\n      setStartTime(performance.now());\r\n    } else if (gameState === \"Pause\" ||\r\n      gameState === \"End\" ||\r\n      gameState === \"Win\" ||\r\n      gameState === \"LevelUp\") {\r\n      setTime(time + performance.now() - startTime);\r\n      time += performance.now() - startTime;\r\n    }\r\n  }, [gameState]);\r\n\r\n  const clearDraws = (ctx) => {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  };\r\n  const drawStartGame = (ctx, blockWidth, blockHeight) => {\r\n    clearDraws(ctx);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"24px monospace\";\r\n    ctx.fillText(\"Press Play to Start\", 2.5 * blockWidth, 15 * blockHeight, 500);\r\n  };\r\n\r\n  const drawGameOver = (ctx, blockWidth, blockHeight) => {\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    ctx.fillText(\"Game Over\", 5 * blockWidth, 9 * blockHeight, 500);\r\n    ctx.font = \"16px monospace\";\r\n    ctx.fillText(\"Score: \" + score, 11 * blockWidth, 13 * blockHeight, 500);\r\n    ctx.fillText(\"Time: \" + Math.floor(time / 1000), 11 * blockWidth, 17 * blockHeight, 500);\r\n    ctx.fillText(\"Level: \" + (gameLevel+1), 11 * blockWidth, 21 * blockHeight, 500);\r\n    ctx.font = \"12px monospace\";\r\n    ctx.fillText(\"Press Play to Restart\", 8 * blockWidth, 26 * blockHeight, 500);\r\n  };\r\n  const drawPauseGame = (ctx, blockWidth, blockHeight) => {\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    ctx.fillText(\"Paused\", 8 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n  const handleFireworks = (ctx, blockWidth, blockHeight) => {\r\n    let currFirework;\r\n    for (let i = 0; i <= 6; i++) {\r\n      switch (i) {\r\n        case 0:\r\n          currFirework = firework1;\r\n          break;\r\n        case 1:\r\n          currFirework = firework2;\r\n          break;\r\n        case 2:\r\n          currFirework = firework3;\r\n          break;\r\n        case 3:\r\n          currFirework = firework4;\r\n          break;\r\n        case 4:\r\n          currFirework = firework5;\r\n          break;\r\n        case 5:\r\n          currFirework = firework6;\r\n          break;\r\n        case 6:\r\n          currFirework = firework7;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      if (currFirework.t <= -5) {\r\n        currFirework.t = Math.floor(Math.random() * 4) + 1;\r\n        currFirework.x = playerBar.x + playerBar.w / 2;\r\n        currFirework.y = 52;\r\n        currFirework.dirX = (Math.random() - 0.5) / 8;\r\n        currFirework.dirY = -0.25;\r\n      } else if (currFirework.t > 3) {\r\n        currFirework.t = currFirework.t - 1 / frequency;\r\n      } else if (currFirework.t > 0) {\r\n        currFirework.x = currFirework.x + currFirework.dirX;\r\n        currFirework.y = currFirework.y + currFirework.dirY;\r\n        checkColision(currFirework);\r\n        drawBall(ctx, blockWidth, blockHeight, currFirework);\r\n        currFirework.t = currFirework.t - 1 / frequency;\r\n      } else if (currFirework.t > -5) {\r\n        drawFirework(ctx, blockWidth, blockHeight, currFirework);\r\n        currFirework.t = currFirework.t - 1 / frequency;\r\n      }\r\n    }\r\n  };\r\n  const drawFirework = (ctx, blockWidth, blockHeight, currBall) => {\r\n    for (let i = 0; i < 12; i++) {\r\n      ctx.fillStyle = currBall.color;\r\n      ctx.scale(1, 0.5);\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        currBall.x * blockWidth +\r\n        Math.cos(((2 * Math.PI) / 12) * i) * currBall.t * 2 * blockWidth,\r\n        currBall.y * blockHeight +\r\n        Math.sin(((2 * Math.PI) / 12) * i) * 2 * currBall.t * 2 * blockHeight,\r\n        (currBall.r / 1) * blockWidth,\r\n        0,\r\n        Math.PI * 2,\r\n      );\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      ctx.scale(1, 2);\r\n    }\r\n  };\r\n  const drawWinGame = (ctx, blockWidth, blockHeight) => {\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    ctx.fillText(\"You Win\", 7 * blockWidth, 9 * blockHeight, 500);\r\n    ctx.font = \"16px monospace\";\r\n    ctx.fillText(\"Score: \" + score, 11 * blockWidth, 15 * blockHeight, 500);\r\n    ctx.fillText(\"Time: \" + Math.floor(time/1000), 11 * blockWidth, 19 * blockHeight, 500);\r\n    ctx.font = \"12px monospace\";\r\n    ctx.fillText(\"Press Play to Restart\", 8 * blockWidth, 26 * blockHeight, 500);\r\n  };\r\n\r\n  const drawLevelUp = (ctx, blockWidth, blockHeight, t) => {\r\n    clearDraws(ctx);\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    switch (t) {\r\n      case 4:\r\n        ctx.fillText(\"Next Level\", 5 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      case 3:\r\n        ctx.fillText(\"3 sec\", 9 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      case 2:\r\n        ctx.fillText(\"2 sec\", 9 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      case 1:\r\n        ctx.fillText(\"1 sec\", 9 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      default:\r\n        ctx.fillText(\"Next Level\", 5 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const drawPlayerBar = (ctx, blockWidth, blockHeight) => {\r\n    let newX, newY;\r\n    newX = playerBar.x;\r\n    newY = playerBar.y;\r\n    ctx.fillStyle = \"cyan\";\r\n    ctx.fillRect(\r\n      newX * blockWidth,\r\n      newY * blockHeight,\r\n      playerBar.w * blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n  const drawHitbar = (ctx, blockWidth, blockHeight, obj) => {\r\n    let color;\r\n    switch (obj.h) {\r\n      case 3:\r\n        color = \"green\";\r\n        break;\r\n      case 2:\r\n        color = \"yellow\";\r\n        break;\r\n      case 1:\r\n        color = \"orange\";\r\n        break;\r\n      default:\r\n        color = \"blue\";\r\n        break;\r\n    }\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(\r\n      obj.x * blockWidth,\r\n      obj.y * blockHeight,\r\n      obj.w * blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n  const drawLevel = (ctx, blockWidth, blockHeight) => {\r\n    for (let i = 0; i < currLevel.Bars; i++) {\r\n      if (currLevel.Matrix[i].h > 0)\r\n        drawHitbar(ctx, blockWidth, blockHeight, currLevel.Matrix[i]);\r\n    }\r\n  };\r\n  const barHit = (bar) => {\r\n    if (bar.h - 1 >= 0) {\r\n      bar.h = bar.h - 1;\r\n      score = score + bar.s;\r\n      setScore(score);\r\n    }\r\n    if (bar.h === 0) {\r\n      setLevelHealth(levelHealth - 1);\r\n      if (levelHealth - 1 === 0) {\r\n        setGameState(\"LevelUp\");\r\n      }\r\n    }\r\n  };\r\n  //colisions against corners count as double damage\r\n  const checkColision = (currBall) => {\r\n    if (currBall.x === 0 || currBall.x === cols) {\r\n      currBall.dirX = -currBall.dirX;\r\n    }\r\n    if (currBall.y === 0) {\r\n      currBall.dirY = -currBall.dirY;\r\n    } else if (currBall.y === rows * 2) {\r\n      setGameState(\"End\");\r\n    }\r\n    if (currBall.y + currBall.r === playerBar.y * 2) {\r\n      if (\r\n        currBall.x >= playerBar.x &&\r\n        currBall.x <= playerBar.x + playerBar.w\r\n      ) {\r\n        currBall.dirY = -currBall.dirY;\r\n      }\r\n    }\r\n    let bar;\r\n    for (let i = 0; i < currLevel.Bars; i++) {\r\n      bar = currLevel.Matrix[i];\r\n      if (bar.h > 0) {\r\n        //compare boundaries\r\n        if (\r\n          currBall.x + currBall.r >= bar.x &&\r\n          currBall.x - currBall.r <= bar.x + bar.w &&\r\n          currBall.y + currBall.r >= bar.y * 2 &&\r\n          currBall.y - currBall.r <= (bar.y + 1) * 2\r\n        ) {\r\n          //horizontal colision\r\n          if (\r\n            currBall.x + currBall.r > bar.x &&\r\n            currBall.x - currBall.r < bar.x + bar.w\r\n          ) {\r\n            currBall.dirY = -currBall.dirY;\r\n            barHit(bar);\r\n          }\r\n          //vertical colision\r\n          if (\r\n            currBall.y + currBall.r > bar.y * 2 &&\r\n            currBall.y - currBall.r < (bar.y + 1) * 2\r\n          ) {\r\n            currBall.dirX = -currBall.dirX;\r\n            barHit(bar);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  // for some reason, arc is coming out as ellipse instead of simple sphere\r\n  // rescaling on the Y axis used as fix, all values for ball on this axis must be doubled\r\n  const drawBall = (ctx, blockWidth, blockHeight, currBall) => {\r\n    ctx.fillStyle = \"#FFFFFF\";\r\n    ctx.scale(1, 0.5);\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      currBall.x * blockWidth,\r\n      currBall.y * blockHeight,\r\n      currBall.r * blockWidth,\r\n      0,\r\n      Math.PI * 2,\r\n    );\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    ctx.scale(1, 2);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    let blockWidth = context.canvas.width / cols;\r\n    let blockHeight = context.canvas.height / rows;\r\n    let animationFrameId;\r\n    switch (gameState) {\r\n      case \"Start\":\r\n        setMaps(JSON.parse(JSON.stringify(LevelsJSON)));\r\n        setGameLevel(0);\r\n        setCurrLevel(Maps[gameLevel]);\r\n        setLevelHealth(currLevel.Bars);\r\n        setBall(Object.create(defaultBall));\r\n        setPlayerBar(Object.create(defaultPlayerBar));\r\n        setScore(0);\r\n        setFrameCount(1);\r\n        clearDraws(context);\r\n        drawStartGame(context, blockWidth, blockHeight);\r\n        handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n        break;\r\n      case \"Play\":\r\n        clearDraws(context);\r\n        handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n        drawPlayerBar(context, blockWidth, blockHeight);\r\n        drawLevel(context, blockWidth, blockHeight);\r\n        ball.x = ball.x + ball.dirX;\r\n        ball.y = ball.y + ball.dirY;\r\n        checkColision(ball);\r\n        drawBall(context, blockWidth, blockHeight, ball);\r\n        setTimeout(() => {\r\n          setFrameCount(frameCount + 1);\r\n        }, [frameRate]);\r\n        break;\r\n      case \"Pause\":\r\n        drawPauseGame(context, blockWidth, blockHeight);\r\n        break;\r\n      case \"End\":\r\n        clearDraws(context);\r\n        drawGameOver(context, blockWidth, blockHeight);\r\n        handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n        break;\r\n      case \"Restart\":\r\n        setMaps(JSON.parse(JSON.stringify(LevelsJSON)));\r\n        setGameLevel(0);\r\n        setCurrLevel(Maps[gameLevel]);\r\n        setLevelHealth(currLevel.Bars);\r\n        setBall(Object.create(defaultBall));\r\n        setPlayerBar(Object.create(defaultPlayerBar));\r\n        setScore(0);\r\n        setFrameCount(1);\r\n        setGameState(\"Play\");\r\n        break;\r\n      case \"LevelUp\":\r\n        if (gameLevel + 1 === 3) {\r\n          setGameState(\"Win\");\r\n        } else {\r\n          drawLevelUp(context, blockWidth, blockHeight, 4);\r\n          setTimeout(() => {\r\n            clearDraws(context, blockWidth, blockHeight);\r\n            drawLevelUp(context, blockWidth, blockHeight, 3);\r\n          }, [1000]);\r\n          setTimeout(() => {\r\n            drawLevelUp(context, blockWidth, blockHeight, 2);\r\n          }, [2000]);\r\n          setTimeout(() => {\r\n            drawLevelUp(context, blockWidth, blockHeight, 1);\r\n          }, [3000]);\r\n          setTimeout(() => {\r\n            setGameLevel(gameLevel + 1);\r\n            setCurrLevel(Maps[gameLevel + 1]);\r\n            setLevelHealth(currLevel.Bars);\r\n            setBall(Object.create(defaultBall));\r\n            clearDraws(context);\r\n            drawLevel(context, blockWidth, blockHeight);\r\n            setGameState(\"Play\");\r\n          }, [4000]);\r\n        }\r\n        break;\r\n      case \"Win\":\r\n        setCurrLevel(Maps[3]);\r\n        clearDraws(context);\r\n        drawPlayerBar(context, blockWidth, blockHeight);\r\n        handleFireworks(context, blockWidth, blockHeight);\r\n        drawWinGame(context, blockWidth, blockHeight);\r\n        handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n        setTimeout(() => {\r\n          setWinFrameCount(winFrameCount + 1);\r\n        }, [frameRate]);\r\n        break;\r\n      default:\r\n        clearDraws(context);\r\n        break;\r\n    }\r\n    const render = () => {\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    };\r\n    render();\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [frameCount, winFrameCount, gameState]);\r\n\r\n  return <canvas ref={canvasRef}\r\n    onTouchStart={(e) => e.preventDefault()}\r\n    onTouchMove={(e) => e.preventDefault()}\r\n    onTouchEnd={(e) => e.preventDefault()}\r\n    onTouchCancel={(e) => e.preventDefault()}></canvas>;\r\n}\r\n","import { useState, useRef, useEffect } from \"react\";\r\nimport { handleCanvasBorders } from \"../../Handlers/handleCanvasBorders.js\";\r\n\r\nconst frequency = 4; //Hertz\r\nconst frameRate = 1000 / frequency; // frames / milisecond\r\n\r\nconst Snake = ({ controls, isSelected, gameState, setGameState }) => {\r\n  const rows = 30;\r\n  const cols = 30;\r\n  let canvasRef = useRef(null);\r\n  let [fruit, setFruit] = useState(false);\r\n  let [fruitPos] = useState({ x: 0, y: 0 });\r\n  let [score, setScore] = useState(0);\r\n  let [snakeHeadPos] = useState({\r\n    direction: \"right\",\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  let [previousDir, setPreviousDir] = useState(\"right\");\r\n  let [snakeBody, setSnakeBody] = useState({ x: [], y: [] });\r\n  let [initialPos, setInitialPos] = useState(false);\r\n  let [frameCount, setFrameCount] = useState(0);\r\n  let [time, setTime] = useState(0);\r\n  const [startTime, setStartTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (controls.pause) {\r\n      if (controls.pause) {\r\n        if (gameState === \"Play\") {\r\n          setGameState(\"Pause\");\r\n        } else if (gameState === \"Pause\") {\r\n\r\n          setGameState(\"Play\");\r\n        } else if (\r\n          gameState === \"Win\" ||\r\n          gameState === \"End\" ||\r\n          gameState === \"Start\"\r\n        ) {\r\n          setGameState(\"Restart\");\r\n        }\r\n      }\r\n    }\r\n  }, [controls]);\r\n\r\n  useEffect(() => {\r\n    if (gameState === \"Restart\") {\r\n      setTime(0);\r\n    } else if (gameState === \"Play\") {\r\n      setStartTime(performance.now());\r\n    } else if (gameState === \"Pause\" ||\r\n      gameState === \"End\") {\r\n      setTime(time + performance.now() - startTime);\r\n      time += performance.now() - startTime;\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    if (snakeBody.x[0] === undefined) {\r\n      if (controls.up) {\r\n        snakeHeadPos.direction = \"up\";\r\n      } else if (controls.down) {\r\n        snakeHeadPos.direction = \"down\";\r\n      } else if (controls.left) {\r\n        snakeHeadPos.direction = \"left\";\r\n      } else if (controls.right) {\r\n        snakeHeadPos.direction = \"right\";\r\n      }\r\n    } else {\r\n      if (controls.up && previousDir !== \"down\") {\r\n        snakeHeadPos.direction = \"up\";\r\n      } else if (controls.down && previousDir !== \"up\") {\r\n        snakeHeadPos.direction = \"down\";\r\n      } else if (controls.left && previousDir !== \"right\") {\r\n        snakeHeadPos.direction = \"left\";\r\n      } else if (controls.right && previousDir !== \"left\") {\r\n        snakeHeadPos.direction = \"right\";\r\n      }\r\n    }\r\n  }, [controls, frameCount]);\r\n\r\n  const drawBoard = (ctx, canvasWidth, canvasHeight) => {\r\n    ctx.fillStyle = \"#000000\";\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n  };\r\n\r\n  const drawFruit = (ctx, blockWidth, blockHeight) => {\r\n    let newX, newY;\r\n    let overlapX,\r\n      overlapY = false;\r\n    if (!fruit) {\r\n      fruitPos.x = Math.floor(Math.random() * cols);\r\n      fruitPos.y = Math.floor(Math.random() * rows);\r\n      if (snakeBody.x[0] === undefined) {\r\n        while (fruitPos.x === snakeHeadPos.x && fruitPos.y === snakeHeadPos.y) {\r\n          fruitPos.x = Math.floor(Math.random() * cols);\r\n          fruitPos.y = Math.floor(Math.random() * rows);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < snakeBody.x.length; i++) {\r\n          if (fruitPos.x === snakeBody.x[i]) {\r\n            overlapX = true;\r\n          }\r\n          if (fruitPos.y === snakeBody.y[i]) {\r\n            overlapY = true;\r\n          }\r\n        }\r\n        while (overlapX === true && overlapY === true) {\r\n          fruitPos.x = Math.floor(Math.random() * cols);\r\n          fruitPos.y = Math.floor(Math.random() * rows);\r\n          let flagX = false;\r\n          let flagY = false;\r\n          for (let i = 0; i < snakeBody.x.length; i++) {\r\n            if (fruitPos.x === snakeBody.x[i]) {\r\n              flagX = true;\r\n            }\r\n            if (fruitPos.y === snakeBody.y[i]) {\r\n              flagY = true;\r\n            }\r\n          }\r\n          overlapX = flagX;\r\n          overlapY = flagY;\r\n        }\r\n      }\r\n      newX = fruitPos.x;\r\n      newY = fruitPos.y;\r\n      setFruit(true);\r\n    } else {\r\n      newX = fruitPos.x;\r\n      newY = fruitPos.y;\r\n    }\r\n    ctx.fillStyle = \"#00FF00\";\r\n    ctx.fillRect(\r\n      newX * blockWidth,\r\n      newY * blockHeight,\r\n      blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n\r\n  const drawSnakeHead = (ctx, blockWidth, blockHeight) => {\r\n    let step = 1;\r\n    let newX, newY;\r\n    if (!initialPos) {\r\n      newX = 10 * blockWidth;\r\n      newY = 10 * blockHeight;\r\n      setInitialPos(true);\r\n      snakeHeadPos.x = 10;\r\n      snakeHeadPos.y = 10;\r\n    } else {\r\n      switch (snakeHeadPos.direction) {\r\n        case \"right\":\r\n          newX = snakeHeadPos.x + step;\r\n          newY = snakeHeadPos.y;\r\n          snakeHeadPos.x = snakeHeadPos.x + step;\r\n          break;\r\n        case \"left\":\r\n          newX = snakeHeadPos.x - step;\r\n          newY = snakeHeadPos.y;\r\n          snakeHeadPos.x = snakeHeadPos.x - step;\r\n          break;\r\n        case \"up\":\r\n          newX = snakeHeadPos.x;\r\n          newY = snakeHeadPos.y - step;\r\n          snakeHeadPos.y = snakeHeadPos.y - step;\r\n          break;\r\n        case \"down\":\r\n          newX = snakeHeadPos.x;\r\n          newY = snakeHeadPos.y + step;\r\n          snakeHeadPos.y = snakeHeadPos.y + step;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    setPreviousDir(snakeHeadPos.direction);\r\n    if (snakeBody.x[2] !== undefined) {\r\n      for (let i = 2; i < snakeBody.x.length; i++) {\r\n        if (\r\n          snakeBody.x[i] === snakeHeadPos.x &&\r\n          snakeBody.y[i] === snakeHeadPos.y\r\n        ) {\r\n          setGameState(\"End\");\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      snakeHeadPos.x >= rows ||\r\n      snakeHeadPos.x < 0 ||\r\n      snakeHeadPos.y < 0 ||\r\n      snakeHeadPos.y >= cols\r\n    ) {\r\n      setGameState(\"End\");\r\n    } else if (fruitPos.x === snakeHeadPos.x && fruitPos.y === snakeHeadPos.y) {\r\n      setFruit(false);\r\n      setScore(score + 1);\r\n      snakeBody.x.unshift(snakeHeadPos.x);\r\n      snakeBody.y.unshift(snakeHeadPos.y);\r\n    }\r\n    ctx.fillStyle = \"#00FFFF\";\r\n    ctx.fillRect(\r\n      newX * blockWidth,\r\n      newY * blockHeight,\r\n      blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n\r\n  const drawSnakeBody = (ctx, blockWidth, blockHeight) => {\r\n    for (let i = 0; i < snakeBody.x.length; i++) {\r\n      ctx.fillStyle = \"#00FFFF\";\r\n      ctx.fillRect(\r\n        snakeBody.x[i] * blockWidth,\r\n        snakeBody.y[i] * blockHeight,\r\n        blockWidth,\r\n        blockHeight,\r\n      );\r\n    }\r\n    snakeBody.x.unshift(snakeHeadPos.x);\r\n    snakeBody.y.unshift(snakeHeadPos.y);\r\n    snakeBody.x.pop();\r\n    snakeBody.y.pop();\r\n  };\r\n\r\n  const drawEndGame = (ctx, blockWidth, blockHeight) => {\r\n    drawBoard(ctx, blockWidth, blockHeight);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"50px monospace\";\r\n    ctx.fillText(\"Game Over\", 3 * blockWidth, 8 * blockHeight, 500);\r\n    ctx.font = \"28px monospace\";\r\n    ctx.fillText(\"Score: \" + score, 7 * blockWidth, 15 * blockHeight, 500);\r\n    ctx.fillText(\"Time: \" + Math.floor(time/1000), 7 * blockWidth, 20 * blockHeight, 500);\r\n    ctx.font = \"16px monospace\";\r\n    ctx.fillText(\"Press Play to Restart\", 5.5 * blockWidth, 25 * blockHeight, 500);\r\n  };\r\n\r\n  const drawPauseGame = (ctx, blockWidth, blockHeight) => {\r\n    drawBoard(ctx, blockWidth, blockHeight);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"50px monospace\";\r\n    ctx.fillText(\"Paused\", 7 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n\r\n  const drawStartGame = (ctx, blockWidth, blockHeight) => {\r\n    drawBoard(ctx, blockWidth, blockHeight);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"26px monospace\";\r\n    ctx.fillText(\"Press Play to Start\", 1.5 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    let blockWidth = context.canvas.width / cols;\r\n    let blockHeight = context.canvas.height / rows;\r\n    let animationFrameId;\r\n    if (gameState === \"Play\") {\r\n      drawBoard(context, context.canvas.width, context.canvas.height);\r\n      drawFruit(context, blockWidth, blockHeight);\r\n      drawSnakeHead(context, blockWidth, blockHeight);\r\n      drawSnakeBody(context, blockWidth, blockHeight);\r\n      handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n      setTimeout(() => {\r\n        setFrameCount(frameCount + 1);\r\n      }, [frameRate]);\r\n    } else if (gameState === \"Pause\") {\r\n      drawPauseGame(context, blockWidth, blockHeight);\r\n      handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n    } else if (gameState === \"End\") {\r\n      drawBoard(context, context.canvas.width, context.canvas.height);\r\n      drawEndGame(context, blockWidth, blockHeight);\r\n      handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n    } else if (gameState === \"Restart\") {\r\n      setGameState(\"Play\");\r\n      setFrameCount(1);\r\n      setFruit(false);\r\n      setInitialPos(false);\r\n      setScore(0);\r\n      setSnakeBody({ x: [], y: [] });\r\n    } else if (gameState === \"Start\") {\r\n      drawStartGame(context, blockWidth, blockHeight);\r\n      handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n      setFrameCount(1);\r\n      setFruit(false);\r\n      setInitialPos(false);\r\n      setScore(0);\r\n      setSnakeBody({ x: [], y: [] });\r\n    }\r\n    const render = () => {\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    };\r\n    render();\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [frameCount, gameState]);\r\n\r\n  return <canvas height=\"300\" width=\"300\" ref={canvasRef}\r\n    onTouchStart={(e) => e.preventDefault()}\r\n    onTouchMove={(e) => e.preventDefault()}\r\n    onTouchEnd={(e) => e.preventDefault()}\r\n    onTouchCancel={(e) => e.preventDefault()}></canvas>;\r\n};\r\nexport default Snake;\r\n","import { useState, useRef, useEffect } from \"react\";\r\nimport { handleCanvasBorders } from \"../../Handlers/handleCanvasBorders.js\";\r\nimport Maps from \"./Maps.json\";\r\n\r\nconst frequency = 60; //Hertz\r\nconst frameRate = 1000 / frequency; // frames / milisecond\r\nconst rows = 150;\r\nconst cols = 300;\r\nconst blockSize = 10;\r\nconst defaultInvaderOne = {\r\n    id: 1,\r\n    x: 10,\r\n    y: 10,\r\n    row: 0,\r\n    life: 1,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 10,\r\n    h: 10,\r\n    hit: false,\r\n    color: \"green\",\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n        ],\r\n        2: [\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 0, 1, 0, 1, 1, 0, 1, 0, 0],\r\n            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],\r\n            [0, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n        ]\r\n    }\r\n}\r\nconst defaultInvaderTwo = {\r\n    id: 2,\r\n    x: 10,\r\n    y: 10,\r\n    row: 0,\r\n    life: 2,\r\n    hit: false,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"red\",\r\n    sprites: {\r\n        1: [\r\n            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0],\r\n        ],\r\n        2: [\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],\r\n        ]\r\n    }\r\n}\r\nconst defaultInvaderThree = {\r\n    id: 3,\r\n    x: 10,\r\n    y: 10,\r\n    row: 0,\r\n    life: 3,\r\n    hit: false,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"cyan\",\r\n    sprites: {\r\n        1: [\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 0, 1, 1, 1, 1, 1, 1, 0, 1],\r\n            [1, 0, 1, 0, 1, 1, 0, 1, 0, 1],\r\n            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n        ],\r\n        2: [\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 0, 1, 1, 1, 1, 1, 1, 0, 1],\r\n            [1, 0, 1, 0, 1, 1, 0, 1, 0, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n        ]\r\n    }\r\n}\r\nconst defaultBonusInvader = {\r\n    id: 8,\r\n    x: 10,\r\n    y: 10,\r\n    life: 1,\r\n    hit: false,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 20,\r\n    h: 10,\r\n    color: \"magenta\",\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],\r\n        ],\r\n        2: [\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],\r\n\r\n        ]\r\n    }\r\n}\r\nconst defaultPlayer = {\r\n    id: 10,\r\n    x: 10,\r\n    y: 130,\r\n    speed: 2,\r\n    move: \"none\",\r\n    shooting: false,\r\n    cooling: 0,\r\n    currSprite: 1,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"white\",\r\n    cooldown: 250, //milliseconds\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\r\n        ]\r\n    },\r\n}\r\nconst defaultBlock = {\r\n    id: 9,\r\n    x: 10,\r\n    y: 10,\r\n    currSprite: 1,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"gray\",\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n        ]\r\n    },\r\n}\r\nconst defaultPlayerBullet = {\r\n    id: \"player\",\r\n    x: 10,\r\n    y: 10,\r\n    h: 9,\r\n    w: 2,\r\n    speed: 5,\r\n    color: \"white\",\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    sprites: {\r\n        1: [\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n        ],\r\n        2: [\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n        ]\r\n    }\r\n}\r\nconst defaultInvaderBullet = {\r\n    id: \"invader\",\r\n    x: 10,\r\n    y: 10,\r\n    currSprite: 1,\r\n    totalSprites: 1,\r\n    w: 2,\r\n    h: 9,\r\n    speed: 2,\r\n    color: \"yellow\",\r\n    sprites: {\r\n        1: [\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n        ]\r\n    },\r\n}\r\n\r\nexport default function SpaceInvaders({ controls, isSelected, gameState, setGameState }) {\r\n\r\n    const canvasRef = useRef(null);\r\n    const [score, setScore] = useState(0);\r\n    const [lives, setLives] = useState(3);\r\n    const [level, setLevel] = useState(1);\r\n    const [frameCount, setFrameCount] = useState(0);\r\n    const [enemies, setEnemies] = useState(0);\r\n    const [enemyMoveParam, setEnemyMoveParam] = useState({\r\n        index: 0,\r\n        rows: [],\r\n    });\r\n    const [entities, setEntities] = useState([]);\r\n    const [bullets, setBullets] = useState([]);\r\n    const [explosions, setExplosions] = useState([]);\r\n    const explosionLifetime = 500;\r\n    //let entities = [];\r\n    //let bullets = [];\r\n    let [player, setPlayer] = useState(Object.create(defaultPlayer));\r\n    let [time, setTime] = useState(0);\r\n    const [startTime, setStartTime] = useState(0);\r\n    const invaderSpeed = 1;\r\n\r\n    //Game state\r\n    useEffect(() => {\r\n        if (controls.pause) {\r\n            switch (gameState) {\r\n                case \"Play\":\r\n                    setGameState(\"Pause\");\r\n                    break;\r\n                case \"Pause\":\r\n                    setGameState(\"Play\");\r\n                    break;\r\n                case \"Win\":\r\n                case \"End\":\r\n                case \"Start\":\r\n                    setGameState(\"Restart\");\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }, [controls]);\r\n    //Player controls\r\n    useEffect(() => {\r\n        if (gameState === \"Play\") {\r\n            if (\r\n                controls.left &&\r\n                !controls.right &&\r\n                player.x + player.w > player.w\r\n            ) {\r\n                player.x = player.x - player.speed;\r\n            } else if (\r\n                controls.right &&\r\n                !controls.left &&\r\n                player.x + player.w < cols\r\n            ) {\r\n                player.x = player.x + player.speed;\r\n            } else if (controls.left && controls.right\r\n            ) {\r\n                player.move = \"none\";\r\n            } else if (!controls.left && !controls.right) {\r\n                player.move = \"none\";\r\n            }\r\n            if (controls.up || controls.one\r\n            ) {\r\n                if (player.cooling === 0) {\r\n                    player.shooting = true;\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [controls, frameCount]);\r\n    //Game time\r\n    useEffect(() => {\r\n        if (gameState === \"Restart\") {\r\n            setTime(0);\r\n        } else if (gameState === \"Play\") {\r\n            setStartTime(performance.now());\r\n        } else if (gameState === \"Pause\" ||\r\n            gameState === \"End\" ||\r\n            gameState === \"Win\") {\r\n            setTime(time + performance.now() - startTime);\r\n            time += performance.now() - startTime;\r\n        }\r\n    }, [gameState]);\r\n\r\n    //Drawing functions\r\n    const drawBoard = (ctx) => {\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    };\r\n    const drawSprite = (ctx, object) => {\r\n        if (object.hit === true) {\r\n            ctx.fillStyle = \"white\";\r\n        } else {\r\n            ctx.fillStyle = object.color;\r\n        }\r\n        for (let i = 0; i < object.sprites[object.currSprite].length; i++) {\r\n            for (let j = 0; j < object.sprites[object.currSprite][i].length; j++) {\r\n                if (object.sprites[object.currSprite][i][j] === 1) {\r\n                    ctx.fillRect(object.x + j, object.y + i, 1, 1);\r\n                }\r\n            }\r\n        }\r\n        if (object.sprites.length > 1) {\r\n            if (object.currSprite < object.sprites.length - 1) {\r\n                object.currSprite++;\r\n            } else {\r\n                object.currSprite = 1;\r\n            }\r\n        }\r\n    }\r\n    const drawExplosions = (ctx) => {\r\n        let redshift = 0;\r\n        let greenshift = 0;\r\n        let blueshift = 0;\r\n        if (explosions.length > 0) {\r\n            for (let i = 0; i < explosions.length; i++) {\r\n                if (explosions[i].decay <= explosionLifetime / 3) {\r\n                    redshift = Math.floor((explosions[i].decay) * 255 / (explosionLifetime / 3));\r\n                } else if (explosions[i].decay <= explosionLifetime * 2 / 3) {\r\n                    redshift = 255;\r\n                    greenshift = Math.floor((explosions[i].decay - explosionLifetime / 3) * 255 / (explosionLifetime / 3));\r\n                } else {\r\n                    redshift = 255;\r\n                    greenshift = 255;\r\n                    blueshift = Math.floor((explosions[i].decay - explosionLifetime * 2 / 3) * 255 / (explosionLifetime / 3));\r\n                }\r\n                ctx.fillStyle = \"rgb(\" + redshift + \",\" + greenshift + \",\" + blueshift + \")\";\r\n                let spread = 2 * explosions[i].decay / (explosionLifetime + explosions[i].decay);\r\n                let radius = explosions[i].w / 2 * spread - 10;\r\n                ctx.fillRect(explosions[i].x + radius * 2 / 3, explosions[i].y + radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x - radius * 2 / 3, explosions[i].y + radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x + radius * 2 / 3, explosions[i].y - radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x - radius * 2 / 3, explosions[i].y - radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x + radius, explosions[i].y, 2, 2);\r\n                ctx.fillRect(explosions[i].x - radius, explosions[i].y, 2, 2);\r\n                ctx.fillRect(explosions[i].x, explosions[i].y + radius, 2, 2);\r\n                ctx.fillRect(explosions[i].x, explosions[i].y - radius, 2, 2);\r\n            }\r\n\r\n        }\r\n    }\r\n    const drawStartGame = (ctx, blockWidth, blockHeight) => {\r\n        drawBoard(ctx, blockWidth, blockHeight);\r\n        ctx.fillStyle = \"#FF0000\";\r\n        ctx.font = \"24px monospace\";\r\n        ctx.fillText(\"Press Play to Start\", 2.5 * blockWidth, 8 * blockHeight, 500);\r\n    };\r\n    const drawGameOver = (ctx, blockWidth, blockHeight) => {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"40px monospace\";\r\n        ctx.fillText(\"Game Over\", 5 * blockWidth, 5 * blockHeight, 500);\r\n        ctx.font = \"16px monospace\";\r\n        ctx.fillText(\"Score: \" + score, 11 * blockWidth, 8 * blockHeight, 500);\r\n        ctx.fillText(\"Time: \" + Math.floor(time / 1000), 11 * blockWidth, 10 * blockHeight, 500);\r\n        ctx.font = \"12px monospace\";\r\n        ctx.fillText(\"Press Play to Restart\", 8 * blockWidth, 13 * blockHeight, 500);\r\n    };\r\n    const drawPauseGame = (ctx, blockWidth, blockHeight) => {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"40px monospace\";\r\n        ctx.fillText(\"Paused\", 8 * blockWidth, 8 * blockHeight, 500);\r\n    };\r\n    const drawWinGame = (ctx, blockWidth, blockHeight) => {\r\n        drawBoard(ctx);\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"40px monospace\";\r\n        ctx.fillText(\"You Win\", 7 * blockWidth, 4 * blockHeight, 500);\r\n        ctx.font = \"16px monospace\";\r\n        ctx.fillText(\"Score: \" + score, 10 * blockWidth, 7 * blockHeight, 500);\r\n        ctx.fillText(\"Time: \" + Math.floor( time / 1000), 10 * blockWidth, 9 * blockHeight, 500);\r\n        ctx.fillText(\"Lives: \" + lives, 10 * blockWidth, 11 * blockHeight, 500);\r\n        ctx.font = \"12px monospace\";\r\n        ctx.fillText(\"Press Play to Restart\", 8 * blockWidth, 14 * blockHeight, 500);\r\n    };\r\n    const drawBottomText = (ctx, blockWidth, blockHeight) => {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"10px monospace\";\r\n        ctx.fillText(\"LIFE:\" + lives, blockWidth / 2, rows - blockHeight / 4, 500);\r\n    }\r\n    const drawObjects = (context) => {\r\n        for (let i = 0; i < entities.length; i++) {\r\n            drawSprite(context, entities[i]);\r\n        }\r\n        for (let i = 0; i < bullets.length; i++) {\r\n            drawSprite(context, bullets[i]);\r\n        }\r\n        drawSprite(context, player);\r\n        drawExplosions(context);\r\n    }\r\n    //Game functions\r\n    const setUpLevel = () => {\r\n        let currEntity = {};\r\n        let newEntities = [];\r\n        let newEnemyMoveParam = { index: 0, rows: [] };\r\n        for (let i = 0; i < Maps[level].Matrix.length; i++) {\r\n            for (let j = 0; j < Maps[level].Matrix[i].length; j++) {\r\n                switch (Maps[level].Matrix[i][j]) {\r\n                    case 1:\r\n                        currEntity = Object.create(defaultInvaderOne);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 15 + i * blockSize * 1.2;\r\n                        currEntity.row = i;\r\n                        newEntities.push(currEntity);\r\n                        if (newEnemyMoveParam.rows[i] === undefined) {\r\n                            newEnemyMoveParam.rows.push(\"right\");\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        currEntity = Object.create(defaultInvaderTwo);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 15 + i * blockSize * 1.2;\r\n                        currEntity.row = i;\r\n                        newEntities.push(currEntity);\r\n                        if (newEnemyMoveParam.rows[i] === undefined) {\r\n                            newEnemyMoveParam.rows.push(\"right\");\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        currEntity = Object.create(defaultInvaderThree);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 15 + i * blockSize * 1.2;\r\n                        currEntity.row = i;\r\n                        newEntities.push(currEntity);\r\n                        if (newEnemyMoveParam.rows[i] === undefined) {\r\n                            newEnemyMoveParam.rows.push(\"right\");\r\n                        }\r\n                        break;\r\n                    case 9:\r\n                        currEntity = Object.create(defaultBlock);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 5 + i * blockSize * 1.2;\r\n                        newEntities.push(currEntity);\r\n                        break;\r\n                    case 0:\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        setEnemies(Maps[level].Enemies);\r\n        setEntities(newEntities);\r\n        setEnemyMoveParam(newEnemyMoveParam);\r\n    }\r\n    const invaderMove = () => {\r\n        if (enemyMoveParam.index >= enemies) {\r\n            enemyMoveParam.index = 0;\r\n        }\r\n        switch (enemyMoveParam.rows[entities[enemyMoveParam.index].row]) {\r\n            case \"left\":\r\n                if (entities[enemyMoveParam.index].x > 2) {\r\n                    entities[enemyMoveParam.index].x = entities[enemyMoveParam.index].x - invaderSpeed;\r\n                }\r\n                else {\r\n                    enemyMoveParam.rows[entities[enemyMoveParam.index].row] = \"right\";\r\n                    entities[enemyMoveParam.index].x = entities[enemyMoveParam.index].x + invaderSpeed;\r\n                }\r\n                break;\r\n            case \"right\":\r\n                if (entities[enemyMoveParam.index].x + entities[enemyMoveParam.index].w < cols - 1) {\r\n                    entities[enemyMoveParam.index].x = entities[enemyMoveParam.index].x + invaderSpeed;\r\n                }\r\n                else {\r\n                    enemyMoveParam.rows[entities[enemyMoveParam.index].row] = \"left\";\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (entities[enemyMoveParam.index].currSprite < entities[enemyMoveParam.index].totalSprites) {\r\n            entities[enemyMoveParam.index].currSprite = entities[enemyMoveParam.index].currSprite + 1;\r\n        } else {\r\n            entities[enemyMoveParam.index].currSprite = 1;\r\n        }\r\n        enemyMoveParam.index++;\r\n        //console.log(entities[enemyMoveParam.index].sprites.length);\r\n        for (let i = 0; i < entities.length; i++) {\r\n            if (entities[i].id === 8) {\r\n                if (entities[i].x + entities[i].w > 0 && entities[i].x < cols) {\r\n                    entities[i].x = entities[i].x + entities[i].speed;\r\n                    if (entities[i].currSprite < entities[i].totalSprites) {\r\n                        entities[i].currSprite = entities[i].currSprite + 1;\r\n                    } else {\r\n                        entities[i].currSprite = 1;\r\n                    }\r\n                } else {\r\n                    entities.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        setEntities(entities);\r\n        setEnemyMoveParam(enemyMoveParam);\r\n    }\r\n    const spawnBonusInvader = () => {\r\n        let newEntity = Object.create(defaultBonusInvader);\r\n        let side = Math.random();\r\n        if (side > 0.5) {\r\n            newEntity.x = 0;\r\n            newEntity.speed = invaderSpeed;\r\n        } else {\r\n            newEntity.x = cols - newEntity.w;\r\n            newEntity.speed = -invaderSpeed;\r\n        }\r\n        newEntity.y = 2;\r\n        entities.push(newEntity);\r\n        setEntities(entities);\r\n    }\r\n    const createExplosion = (target) => {\r\n        let newExplosion = {\r\n            x: target.x + target.w / 2 - 1,\r\n            y: target.y + target.h / 2 - 1,\r\n            w: target.w,\r\n            h: target.h,\r\n            decay: explosionLifetime\r\n        }\r\n        explosions.push(newExplosion);\r\n        setExplosions(explosions);\r\n    }\r\n    const playerShooting = () => {\r\n        let newBullet = {};\r\n        if (player.shooting === true &&\r\n            player.cooling === 0) {\r\n            newBullet = Object.create(defaultPlayerBullet);\r\n            newBullet.x = player.x - 1 + player.w / 2;\r\n            newBullet.y = player.y;\r\n            bullets.push(newBullet);\r\n            player.cooling = player.cooldown;\r\n            setTimeout(() => {\r\n                player.cooling = 0;\r\n            }, [player.cooldown]);\r\n            setBullets(bullets);\r\n            player.shooting = false;\r\n        }\r\n    }\r\n    const invaderShooting = () => {\r\n        let newBullet = {};\r\n        let chance = Math.random();\r\n        let invaderShooter = Math.floor(Math.random() * enemies);\r\n        if (chance > 0.95) {\r\n            newBullet = Object.create(defaultInvaderBullet);\r\n            newBullet.x = entities[invaderShooter].x + player.w / 2;\r\n            newBullet.y = entities[invaderShooter].y;\r\n            bullets.push(newBullet);\r\n            setBullets(bullets);\r\n        }\r\n    }\r\n    const playerHit = () => {\r\n        if (lives - 1 >= 0) {\r\n            setLives(lives - 1);\r\n            createExplosion(player);\r\n        } else {\r\n            setGameState(\"End\");\r\n        }\r\n    }\r\n    const invaderHit = (invaderIndex) => {\r\n        if (entities[invaderIndex].life - 1 > 0) {\r\n            entities[invaderIndex].life = entities[invaderIndex].life - 1;\r\n            entities[invaderIndex].hit = true;\r\n            setScore(score + 5);\r\n            setTimeout(() => {\r\n                entities[invaderIndex].hit = false;\r\n            }, [player.cooldown / 2]);\r\n        } else {\r\n            createExplosion(entities[invaderIndex]);\r\n            if (entities[invaderIndex].id !== 8) {\r\n                setEnemies(enemies - 1);\r\n                setScore(score + 10);\r\n            } else {\r\n                setScore(score + 150);\r\n            }\r\n            entities.splice(invaderIndex, 1);\r\n        }\r\n        setEntities(entities);\r\n    }\r\n    const blockHit = (blockIndex) => {\r\n        createExplosion(entities[blockIndex]);\r\n        //entities.splice(blockIndex, 1);\r\n        //setEntities(entities);\r\n    }\r\n    const checkColisions = (bulletIndex) => {\r\n        let colision = false;\r\n        for (let i = 0; i < entities.length; i++) {\r\n            if (bullets[bulletIndex].id === \"player\") {\r\n                if (bullets[bulletIndex].x > entities[i].x &&\r\n                    bullets[bulletIndex].x < entities[i].x + entities[i].w &&\r\n                    bullets[bulletIndex].y > entities[i].y &&\r\n                    bullets[bulletIndex].y < entities[i].y + entities[i].h) {\r\n                    colision = true;\r\n                    if (entities[i].id === 9) {\r\n                        blockHit(i);\r\n                    } else {\r\n                        invaderHit(i);\r\n                    }\r\n                }\r\n            } else {\r\n                if (bullets[bulletIndex].x > player.x &&\r\n                    bullets[bulletIndex].x < player.x + player.w &&\r\n                    bullets[bulletIndex].y > player.y - player.h &&\r\n                    bullets[bulletIndex].y < player.y) {\r\n                    colision = true;\r\n                    playerHit();\r\n                } else if (bullets[bulletIndex].x > entities[i].x &&\r\n                    bullets[bulletIndex].x < entities[i].x + entities[i].w &&\r\n                    bullets[bulletIndex].y > entities[i].y - entities[i].h &&\r\n                    bullets[bulletIndex].y < entities[i].y &&\r\n                    entities[i].id === 9) {\r\n                    colision = true;\r\n                    blockHit(i);\r\n                }\r\n            }\r\n        }\r\n        return colision;\r\n    }\r\n    const handleBullets = () => {\r\n        let newArray = [];\r\n        if (bullets.length > 0) {\r\n            //console.log(bullets);\r\n            for (let i = 0; i < bullets.length; i++) {\r\n                if (!checkColisions(i)) {\r\n                    if (bullets[i].id === \"player\") {\r\n                        if (bullets[i].y > 0) {\r\n                            bullets[i].y -= bullets[i].speed;\r\n                            if (bullets[i].currSprite < bullets[i].totalSprites) {\r\n                                bullets[i].currSprite = bullets[i].currSprite + 1;\r\n                            } else {\r\n                                bullets[i].currSprite = 1;\r\n                            }\r\n                            newArray.push(bullets[i]);\r\n                        }\r\n                    } else {\r\n                        if (bullets[i].y < rows) {\r\n                            bullets[i].y += bullets[i].speed;\r\n                            newArray.push(bullets[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            setBullets(newArray);\r\n        }\r\n    }\r\n    const handleExplosions = () => {\r\n        if (explosions.length > 0) {\r\n            for (let i = 0; i < explosions.length; i++) {\r\n                if (explosions[i].decay - frameRate > 0) {\r\n                    explosions[i].decay = explosions[i].decay - frameRate;\r\n                } else {\r\n                    explosions.splice(i, 1);\r\n                }\r\n            }\r\n            setExplosions(explosions);\r\n        }\r\n    }\r\n    const handleEvents = () => {\r\n        if ((frameCount * frameRate) % (1200 * frameRate) === 0) {\r\n            spawnBonusInvader();\r\n        }\r\n        playerShooting();\r\n        invaderShooting();\r\n        handleBullets();\r\n        handleExplosions();\r\n        invaderMove();\r\n    }\r\n\r\n    //Game Loop\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        let animationFrameId;\r\n        switch (gameState) {\r\n            case \"Play\":\r\n                if (lives >= 0 && enemies > 0) {\r\n                    drawBoard(context);\r\n                    handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                    handleEvents();\r\n                    drawObjects(context);\r\n                    drawBottomText(context, blockSize, blockSize);\r\n                    setTimeout(() => {\r\n                        setFrameCount(frameCount + 1);\r\n                    }, [frameRate]);\r\n                }\r\n                else if (lives < 0) {\r\n                    setGameState(\"End\");\r\n                }\r\n                else if (enemies === 0) {\r\n                    setGameState(\"Win\");\r\n                }\r\n                break;\r\n            case \"Pause\":\r\n                drawPauseGame(context, blockSize, blockSize);\r\n                handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                break;\r\n            case \"Win\":\r\n                drawBoard(context);\r\n                drawWinGame(context, blockSize, blockSize);\r\n                handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                break;\r\n            case \"End\":\r\n                drawBoard(context);\r\n                drawGameOver(context, blockSize, blockSize);\r\n                handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                break;\r\n            case \"Start\":\r\n                setLevel(1);\r\n                setScore(0);\r\n                setLives(3);\r\n                setExplosions([]);\r\n                setBullets([]);\r\n                setUpLevel();\r\n                setPlayer(Object.create(defaultPlayer));\r\n                setFrameCount(1);\r\n                drawBoard(context);\r\n                drawStartGame(context, blockSize, blockSize);\r\n                handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                break;\r\n            case \"Restart\":\r\n                setLevel(1);\r\n                setScore(0);\r\n                setLives(3);\r\n                setExplosions([]);\r\n                setBullets([]);\r\n                setUpLevel();\r\n                setPlayer(Object.create(defaultPlayer));\r\n                setFrameCount(1);\r\n                setGameState(\"Play\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const render = () => {\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n        };\r\n        render();\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [gameState, frameCount]);\r\n\r\n    return <canvas ref={canvasRef} width={300} height={150}\r\n        onTouchStart={(e) => e.preventDefault()}\r\n        onTouchMove={(e) => e.preventDefault()}\r\n        onTouchEnd={(e) => e.preventDefault()}\r\n        onTouchCancel={(e) => e.preventDefault()}\r\n    ></canvas>;\r\n}","export const handleAction = (action, setAction, appDialog, setAppDialog, args) =>{\r\n    switch (action) {\r\n        case \"Keybinds\":\r\n            args.setShowKeybindDialog(!args.showKeybindDialog);\r\n            setAction(false);\r\n            break;\r\n        case \"Play / Pause\":\r\n            if(args.gameState === \"Play\"){\r\n                args.setGameState(\"Pause\");\r\n            }else if(args.gameState === \"Pause\"){\r\n                args.setGameState(\"Play\");\r\n            }\r\n            setAction(false);\r\n            break;\r\n        case \"New\":\r\n            args.setGameState(\"Restart\");\r\n            setAction(false);\r\n            break;\r\n        case \"touchscreenControls\":{\r\n            args.setShowControls(!args.showControls);\r\n            setAction(false);\r\n            break;\r\n        }\r\n        case false:\r\n            break;\r\n        default:\r\n            setAction(false);\r\n            break;\r\n    }\r\n}","export const handleTopMenu = (appMenu, setAppMenu, args) => {\r\n    //Default App Menu  \r\n    const defaultAppMenu = {\r\n        \"Game\": {\r\n            \"New Game\": {\r\n                \"action\": \"New\",\r\n                \"keybind\": \"Alt+N\",\r\n                \"disabled\": true\r\n            },\r\n            \"Play / Pause\": {\r\n                \"action\": \"Play / Pause\",\r\n                \"keybind\": \"P\",\r\n                \"disabled\": true\r\n            },\r\n            \"LineBreak1\":{},\r\n            \"Keybinds\": {\r\n                \"action\": \"Keybinds\",\r\n                \"disabled\": false\r\n            },\r\n            \"LineBreak2\":{},\r\n            \"Close\": {\r\n                \"action\": \"Close\",\r\n                \"keybind\": \"Alt+Shift+F4\",\r\n                \"disabled\": false\r\n            }\r\n        },\r\n        \"View\": {\r\n            \"Touchscreen Controls\": {\r\n                \"action\": \"touchscreenControls\",\r\n                \"checkbox\": true,\r\n                \"disabled\": false\r\n            }\r\n        }/*,\r\n        \"Help\": {\r\n            \"Help\": {\r\n                \"action\": \"help\",\r\n                \"keybind\": \"F1\",\r\n                \"disabled\": true,\r\n                \"title\": \"Not Implemented\"\r\n            },\r\n            \"About\": {\r\n                \"action\": \"about\",\r\n                \"disabled\": true,\r\n                \"title\": \"Not Implemented\"\r\n            }\r\n        }*/\r\n    }\r\n    if (appMenu === null) {\r\n        setAppMenu(defaultAppMenu);\r\n    }\r\n    else {\r\n        let updatedAppMenu = { \r\n            ...appMenu,\r\n                    \"Game\": {\r\n                        ...appMenu[\"Game\"],\r\n                        \"New Game\": {\r\n                            ...appMenu[\"Game\"][\"New Game\"],\r\n                            \"disabled\": !args.gameChoice\r\n                        },\r\n                        \"Play / Pause\": {\r\n                            ...appMenu[\"Game\"][\"Play / Pause\"],\r\n                            \"disabled\": !args.gameChoice\r\n                        }\r\n                    },\r\n                    \"View\": {\r\n                        ...appMenu[\"View\"],\r\n                        \"Touchscreen Controls\": {\r\n                            ...appMenu[\"View\"][\"Touchscreen Controls\"],\r\n                            \"checkbox\": args.showControls\r\n                        }\r\n                    }\r\n         };\r\n        setAppMenu(updatedAppMenu);\r\n    }\r\n}","import { useState, useEffect } from \"react\";\r\nexport const KeybindDialog = ({ showKeybindDialog, setShowKeybindDialog, setAppDialog, keyboard, setKeyboard }) => {\r\n    const [newKeybinds, setNewKeybinds] = useState(structuredClone(keyboard));\r\n    const [keybindState, setKeybindState] = useState(\"\");\r\n    const [update, setUpdate] = useState(0);\r\n    const title = \"Keybinds\";\r\n    \r\n    const addNewKeybind = (key) => {\r\n        setKeybindState(\"Press new key...\");\r\n        const keyPromise = new Promise((resolve, reject) => {\r\n            document.addEventListener(\"keydown\", (e) => resolve(e.key));\r\n            setTimeout(() => {\r\n                document.removeEventListener(\"keydown\", (e) => resolve(e.key));\r\n                reject(\"timeout\");\r\n            }, 10000);\r\n        });\r\n        keyPromise.then((value) => {\r\n            newKeybinds[key].keys[newKeybinds[key].keys.length] = value;\r\n            setNewKeybinds(newKeybinds);\r\n            setKeybindState(\"\");\r\n        }).catch((error) => {\r\n            setKeybindState(error);\r\n        });\r\n    };\r\n    const changeKeybind = (key, index) => {\r\n        setKeybindState(\"Press new key...\");\r\n        const keyPromise = new Promise((resolve, reject) => {\r\n            document.addEventListener(\"keydown\", (e) => resolve(e.key));\r\n            setTimeout(() => {\r\n                document.removeEventListener(\"keydown\", (e) => resolve(e.key));\r\n                reject(\"timeout\");\r\n            }, 10000);\r\n        });\r\n        keyPromise.then((value) => {\r\n            newKeybinds[key].keys[index] = value;\r\n            setNewKeybinds(newKeybinds);\r\n            setKeybindState(\"\");\r\n        }).catch((error) => {\r\n            setKeybindState(error);\r\n        });\r\n    };\r\n    const removeKeybind = (key, index) => {\r\n        newKeybinds[key].keys.splice(index, 1);\r\n        setNewKeybinds(newKeybinds);\r\n        setUpdate(update + 1);\r\n    };\r\n    const info =\r\n        <div>\r\n            {Object.keys(newKeybinds).map((key) => (\r\n                <div key={key} style={{ display: \"flex\", flexDirection: \"row\", width: \"100%\", marginLeft: \"5px\" }}>\r\n                    <div style={{ width: \"55px\", height:\"30px\", display: \"flex\", justifyContent: \"start\", alignItems: \"center\", textAlign: \"center\" }}><b>{key}:</b></div>\r\n                    {newKeybinds[key].keys.map((keybind, index) =>\r\n                        <button\r\n                            key={index}\r\n                            style={{ width: \"75px\", height:\"30px\", border: \"1px solid dimgray\"}}\r\n                            onContextMenu={(e) => removeKeybind(key, index)}\r\n                            onClick={() => changeKeybind(key, index)}\r\n                        >{keybind}</button>\r\n                    )}\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                        {newKeybinds[key].keys.length < 3 &&\r\n                            <button onClick={() => addNewKeybind(key)}>+</button>}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            {keybindState}\r\n        </div>;\r\n\r\n    const actions = {\r\n        Confirm: () => {\r\n            setKeyboard(newKeybinds);\r\n            setShowKeybindDialog(false);\r\n            setAppDialog(null);\r\n        },\r\n        Reset: () => {\r\n            setNewKeybinds(keyboard);\r\n            setUpdate(update + 1);\r\n        },\r\n        Cancel: () => {\r\n            setNewKeybinds(keyboard);\r\n            setShowKeybindDialog(false);\r\n            setAppDialog(null);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (showKeybindDialog) {\r\n            setAppDialog({ title: title, info: info, actions: actions });\r\n        }\r\n    }, [showKeybindDialog, newKeybinds, keybindState, update]);\r\n    return <></>;\r\n}","import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  FaArrowLeft,\r\n  FaArrowRight,\r\n  FaArrowUp,\r\n  FaArrowDown,\r\n} from \"react-icons/fa\";\r\nimport { BsFillPlayFill, BsPauseFill, BsEjectFill, BsZoomIn, BsZoomOut } from \"react-icons/bs\";\r\nimport Controls from \"./Controls/Keyboard.js\";\r\nimport MainMenu from \"./Components/MainMenu.js\";\r\nimport Breakout from \"./Games/Breakout/Breakout.js\";\r\nimport Snake from \"./Games/Snake/Snake.js\";\r\nimport SpaceInvaders from \"./Games/Space Invaders/SpaceInvaders.js\";\r\nimport { handleAction } from \"./Handlers/handleAction.js\";\r\nimport { handleTopMenu } from \"./Handlers/handleTopMenu.js\";\r\nimport { KeybindDialog } from \"./Components/KeybindDialog.jsx\";\r\nimport \"./style.css\";\r\n\r\nexport default function Arcade(props) {\r\n  const isSelected = props.isSelected;\r\n  const action = props.action;\r\n  const setAction = props.setAction;\r\n  const appDialog = props.appDialog;\r\n  const setAppDialog = props.setAppDialog;\r\n  const appMenu = props.appMenu;\r\n  const setAppMenu = props.setAppMenu;\r\n  const contextMenu = props.contextMenu;\r\n\r\n  const canvasContainer = useRef();\r\n  //Acivation/deactivation of keys according to game not implemented yet\r\n  const [keyboard, setKeyboard] = useState({\r\n    up: { keys: [\"w\", \"W\", \"ArrowUp\"], active: true },\r\n    down: { keys: [\"s\", \"S\", \"ArrowDown\"], active: true },\r\n    left: { keys: [\"a\", \"A\", \"ArrowLeft\"], active: true },\r\n    right: { keys: [\"d\", \"D\", \"ArrowRight\"], active: true },\r\n    one: { keys: [\"1\"], active: true },\r\n    two: { keys: [\"2\"], active: true },\r\n    pause: { keys: [\"p\", \"P\", \"Pause\"], active: true },\r\n    eject: { keys: [\"Escape\"], active: true },\r\n  });\r\n  const controls = Controls(keyboard);\r\n  const [gameState, setGameState] = useState(\"Start\");\r\n  const [gameChoice, setGameChoice] = useState(\"None\");\r\n  const [canvasZoom, setCanvasZoom] = useState(1);\r\n  const [showControls, setShowControls] = useState(true);\r\n  const [showKeybindDialog, setShowKeybindDialog] = useState(false);\r\n  const handleScreenButton = (key, state, repeat) => {\r\n    document.dispatchEvent(new KeyboardEvent(state, { key: keyboard[key].keys[0], repeat: repeat }),)\r\n  };\r\n\r\n  const handleTouchEvent = (event, target) => {\r\n    if (event.type === \"touchstart\") {\r\n      controls[target] = true;\r\n    }\r\n    else if (event.type === \"touchend\") {\r\n      controls[target] = false;\r\n    }\r\n    else if (event.type === \"touchcancel\") {\r\n      controls[target] = false;\r\n    }\r\n    else if (event.type === \"touchmove\") {\r\n      let keys = [];\r\n      Object.values(event.touches).forEach((t) => {\r\n        let pos = { x: t.clientX, y: t.clientY };\r\n        let boundingRects = {\r\n          up: document.getElementById(\"arcadeButtonUp\").getBoundingClientRect(),\r\n          down: document.getElementById(\"arcadeButtonDown\").getBoundingClientRect(),\r\n          left: document.getElementById(\"arcadeButtonLeft\").getBoundingClientRect(),\r\n          right: document.getElementById(\"arcadeButtonRight\").getBoundingClientRect(),\r\n          one: document.getElementById(\"arcadeButtonA\").getBoundingClientRect(),\r\n          two: document.getElementById(\"arcadeButtonB\").getBoundingClientRect(),\r\n        };\r\n        Object.keys(boundingRects).forEach((key) => {\r\n          if (pos.x >= boundingRects[key].x && pos.x <= boundingRects[key].x + boundingRects[key].width && pos.y >= boundingRects[key].y && pos.y <= boundingRects[key].y + boundingRects[key].height) {\r\n            keys.push(key);\r\n          }\r\n        })\r\n      })\r\n      Object.keys(keyboard).forEach((key) => {\r\n        if (keys.includes(key)) {\r\n          controls[key] = true;\r\n        } else {\r\n          controls[key] = false;\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  const handleContextMenu = (event, target) => {\r\n    let content = {};\r\n    event.preventDefault();\r\n    if (target === \"keypad\") {\r\n      content = {\r\n        \"Hide\": { action: () => { setShowControls(false); } },\r\n      }\r\n    } else if (target === \"canvas\") {\r\n      if (gameChoice !== \"None\") {\r\n        let playpause = gameState === \"Play\" ? \"Pause\" : \"Play\";\r\n        content = {\r\n          \"Play/Pause\": { action: () => { setGameState(playpause); } },\r\n          \"New Game\": { action: () => { setGameState(\"Restart\"); } },\r\n        }\r\n      }\r\n    }\r\n    contextMenu.setOpen();\r\n    contextMenu.setPosition(event.clientX, event.clientY);\r\n    contextMenu.setContent(content);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isSelected && gameState === \"Play\") {\r\n      setGameState(\"Pause\");\r\n    }\r\n  }, [isSelected])\r\n\r\n  useEffect(() => {\r\n    if (controls.eject) {\r\n      setGameChoice(\"None\");\r\n      setGameState(\"Start\");\r\n    }\r\n  }, [controls.eject])\r\n\r\n  useEffect(() => {\r\n    const args = {\r\n      gameState: gameState,\r\n      setGameState: setGameState,\r\n      showControls: showControls,\r\n      setShowControls: setShowControls,\r\n      showKeybindDialog: showKeybindDialog,\r\n      setShowKeybindDialog: setShowKeybindDialog\r\n    }\r\n    handleAction(action, setAction, appDialog, setAppDialog, args);\r\n  }, [action]);\r\n\r\n  useEffect(() => {\r\n    const args = {\r\n      gameState: gameState,\r\n      showControls: showControls,\r\n      gameChoice: gameChoice\r\n    };\r\n    handleTopMenu(appMenu, setAppMenu, args);\r\n  }, [gameState, gameChoice, showControls]);\r\n\r\n  return (\r\n    <div id=\"arcadeContainer\">\r\n      <div\r\n        id=\"arcadeCanvasContainer\"\r\n        style={{ transform: `scale(${canvasZoom})` }}\r\n        ref={canvasContainer}\r\n        onContextMenu={(e) => handleContextMenu(e, \"canvas\")}\r\n      >\r\n        {gameChoice === \"None\" ?\r\n          <MainMenu controls={controls} setGameChoice={setGameChoice} setGameState={setGameState} canvasZoom={canvasZoom} /> :\r\n          gameChoice === \"Snake\" ? (\r\n            <Snake controls={controls} isSelected={isSelected} gameState={gameState} setGameState={setGameState} canvasZoom={canvasZoom} />\r\n          ) :\r\n            gameChoice === \"Breakout\" ? (\r\n              <Breakout controls={controls} isSelected={isSelected} gameState={gameState} setGameState={setGameState} canvasZoom={canvasZoom} />\r\n            ) :\r\n              gameChoice === \"Space Invaders\" ? (\r\n                <SpaceInvaders controls={controls} isSelected={isSelected} gameState={gameState} setGameState={setGameState} canvasZoom={canvasZoom} />\r\n              ) : (\r\n                <></>\r\n              )}\r\n      </div>\r\n      {showControls &&\r\n        <>\r\n          <div id=\"arcadeZoomControls\">\r\n            <div\r\n              id=\"arcadeZoomInButton\"\r\n              className=\"arcadeButton arcadeButtonOff\"\r\n              onClick={() => { if (canvasZoom < 2) { setCanvasZoom(canvasZoom + 0.1) } }}\r\n            >\r\n              <BsZoomIn />\r\n            </div>\r\n            <div\r\n              id=\"arcadeZoomOutButton\"\r\n              className=\"arcadeButton arcadeButtonOff\"\r\n              onClick={() => { if (canvasZoom > 0.1) { setCanvasZoom(canvasZoom - 0.1) } }}\r\n            >\r\n              <BsZoomOut />\r\n            </div>\r\n          </div>\r\n          <div id=\"arcadeStateControls\">\r\n            <div\r\n              id=\"arcadeEjectButton\"\r\n              className=\"arcadeButton arcadeButtonOff\"\r\n              onClick={() => { setGameChoice(\"None\"); setGameState(\"Start\"); }}\r\n            >\r\n              <BsEjectFill />\r\n            </div>\r\n            <div\r\n              id=\"arcadePlayButton\"\r\n              className=\"arcadeButton arcadeButtonOff\"\r\n              onClick={() => {\r\n                handleScreenButton(\"pause\", \"keydown\", false);\r\n                setTimeout(() => handleScreenButton(\"pause\", \"keyup\", false), 50);\r\n              }}\r\n            >\r\n              {gameState !== \"Play\" ? <BsFillPlayFill /> : <BsPauseFill />}\r\n            </div>\r\n          </div>\r\n          <div id=\"arcadeArrowControls\">\r\n            <div\r\n              id=\"arcadeButtonLeft\"\r\n              className={controls.left ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n              onMouseDown={() => handleScreenButton(\"left\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"left\", \"keyup\", true)}\r\n              onTouchStart={(e) => { handleTouchEvent(e, \"left\") }}\r\n              onTouchMove={(e) => { handleTouchEvent(e, \"left\") }}\r\n              onTouchEnd={(e) => { handleTouchEvent(e, \"left\") }}\r\n              onTouchCancel={(e) => { handleTouchEvent(e, \"left\") }}\r\n            >\r\n              <FaArrowLeft />\r\n            </div>\r\n            <div>\r\n              <div\r\n                id=\"arcadeButtonUp\"\r\n                className={controls.up ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n                onMouseDown={() => handleScreenButton(\"up\", \"keydown\", true)}\r\n                onMouseUp={() => handleScreenButton(\"up\", \"keyup\", true)}\r\n                onTouchStart={(e) => { handleTouchEvent(e, \"up\") }}\r\n                onTouchMove={(e) => { handleTouchEvent(e, \"up\") }}\r\n                onTouchEnd={(e) => { handleTouchEvent(e, \"up\") }}\r\n                onTouchCancel={(e) => { handleTouchEvent(e, \"up\") }}\r\n              >\r\n                <FaArrowUp />\r\n              </div>\r\n              <div\r\n                id=\"arcadeButtonDown\"\r\n                className={controls.down ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n                onMouseDown={() => handleScreenButton(\"down\", \"keydown\", true)}\r\n                onMouseUp={() => handleScreenButton(\"down\", \"keyup\", true)}\r\n                onTouchStart={(e) => { handleTouchEvent(e, \"down\") }}\r\n                onTouchMove={(e) => { handleTouchEvent(e, \"down\") }}\r\n                onTouchEnd={(e) => { handleTouchEvent(e, \"down\") }}\r\n                onTouchCancel={(e) => { handleTouchEvent(e, \"down\") }}\r\n              >\r\n                <FaArrowDown />\r\n              </div>\r\n            </div>\r\n            <div\r\n              id=\"arcadeButtonRight\"\r\n              className={controls.right ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n              onMouseDown={() => handleScreenButton(\"right\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"right\", \"keyup\", true)}\r\n              onTouchStart={(e) => { handleTouchEvent(e, \"right\") }}\r\n              onTouchMove={(e) => { handleTouchEvent(e, \"right\") }}\r\n              onTouchEnd={(e) => { handleTouchEvent(e, \"right\") }}\r\n              onTouchCancel={(e) => { handleTouchEvent(e, \"right\") }}\r\n            >\r\n              <FaArrowRight />\r\n            </div>\r\n          </div>\r\n          <div id=\"arcadeFireControls\">\r\n            <div id=\"arcadeButtonA\"\r\n              className={controls.one ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n              onMouseDown={() => handleScreenButton(\"one\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"one\", \"keyup\", true)}\r\n              onTouchStart={(e) => { handleTouchEvent(e, \"one\") }}\r\n              onTouchMove={(e) => { handleTouchEvent(e, \"one\") }}\r\n              onTouchEnd={(e) => { handleTouchEvent(e, \"one\") }}\r\n              onTouchCancel={(e) => { handleTouchEvent(e, \"one\") }}\r\n            >A</div>\r\n            <div id=\"arcadeButtonB\"\r\n              className={controls.two ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n              onMouseDown={() => handleScreenButton(\"two\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"two\", \"keyup\", true)}\r\n              onTouchStart={(e) => { handleTouchEvent(e, \"two\") }}\r\n              onTouchMove={(e) => { handleTouchEvent(e, \"two\") }}\r\n              onTouchEnd={(e) => { handleTouchEvent(e, \"two\") }}\r\n              onTouchCancel={(e) => { handleTouchEvent(e, \"two\") }}\r\n            >B</div>\r\n          </div>\r\n        </>\r\n      }\r\n      <KeybindDialog\r\n        showKeybindDialog={showKeybindDialog}\r\n        setShowKeybindDialog={setShowKeybindDialog}\r\n        setAppDialog={setAppDialog}\r\n        keyboard={keyboard}\r\n        setKeyboard={setKeyboard}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport default function Controls(keyboard) {\r\n\r\n  var [command, setCommand] = useState({\r\n    up: false,\r\n    down: false,\r\n    left: false,\r\n    right: false,\r\n    one: false,\r\n    two: false,\r\n    pause: false,\r\n    eject: false,\r\n  });\r\n  const validateKey = useCallback(\r\n    (key, state) => {\r\n      const keyArray = Object.keys(keyboard);\r\n      for (let i = 0; i < keyArray.length; i++) {\r\n        let currKeyArray = keyboard[keyArray[i]].keys;\r\n        for (let j = 0; j < currKeyArray.length; j++) {\r\n          if (currKeyArray[j] === key) {\r\n            setCommand((c) => ({ ...c, [keyArray[i]]: state }));\r\n          }\r\n        }\r\n      }\r\n    },\r\n    [keyboard],\r\n  );\r\n\r\n  const handleKeyPress = useCallback(\r\n    (event) => {\r\n      validateKey(event.key, true);\r\n    },\r\n    [validateKey],\r\n  );\r\n  const handleKeyRelease = useCallback(\r\n    (event) => {\r\n      validateKey(event.key, false);\r\n    },\r\n    [validateKey],\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [handleKeyPress]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keyup\", handleKeyRelease);\r\n    return () => {\r\n      document.removeEventListener(\"keyup\", handleKeyRelease);\r\n    };\r\n  }, [handleKeyRelease]);\r\n\r\n  return command;\r\n}\r\n"],"names":["MainMenu","_ref","controls","setGameState","setGameChoice","currentSelection","setCurrentSelection","useState","gamelist","SnakeSplash","BreakoutSplash","SpaceInvadersSplash","useEffect","down","Object","keys","length","up","one","pause","_jsx","children","_jsxs","id","width","height","map","name","index","src","style","background","color","onClick","handleCanvasBorders","ctx","fillStyle","fillRect","frequency","frameRate","rows","cols","defaultPlayerBar","x","y","w","speed","defaultBall","r","dirX","dirY","defaultFirework","t","Breakout","isSelected","gameState","canvasRef","useRef","Maps","setMaps","JSON","parse","stringify","LevelsJSON","gameLevel","setGameLevel","currLevel","setCurrLevel","levelHealth","setLevelHealth","Bars","frameCount","setFrameCount","winFrameCount","setWinFrameCount","playerBar","setPlayerBar","create","ball","setBall","firework1","firework2","firework3","firework4","firework5","firework6","firework7","score","setScore","time","setTime","startTime","setStartTime","left","right","performance","now","clearDraws","canvas","drawFirework","blockWidth","blockHeight","currBall","i","scale","beginPath","arc","Math","cos","PI","sin","fill","closePath","drawLevelUp","font","fillText","drawPlayerBar","newX","newY","drawHitbar","obj","h","drawLevel","Matrix","barHit","bar","s","checkColision","drawBall","context","current","getContext","animationFrameId","drawStartGame","setTimeout","drawPauseGame","drawGameOver","floor","handleFireworks","currFirework","random","drawWinGame","render","window","requestAnimationFrame","cancelAnimationFrame","ref","onTouchStart","e","preventDefault","onTouchMove","onTouchEnd","onTouchCancel","fruit","setFruit","fruitPos","snakeHeadPos","direction","previousDir","setPreviousDir","snakeBody","setSnakeBody","initialPos","setInitialPos","undefined","drawBoard","canvasWidth","canvasHeight","drawFruit","overlapX","overlapY","flagX","flagY","drawSnakeHead","unshift","drawSnakeBody","pop","drawEndGame","blockSize","defaultInvaderOne","row","life","currSprite","totalSprites","hit","sprites","defaultInvaderTwo","defaultInvaderThree","defaultBonusInvader","defaultPlayer","move","shooting","cooling","cooldown","defaultBlock","defaultPlayerBullet","defaultInvaderBullet","SpaceInvaders","lives","setLives","level","setLevel","enemies","setEnemies","enemyMoveParam","setEnemyMoveParam","entities","setEntities","bullets","setBullets","explosions","setExplosions","explosionLifetime","player","setPlayer","drawSprite","object","j","drawObjects","redshift","greenshift","blueshift","decay","spread","radius","drawExplosions","setUpLevel","currEntity","newEntities","newEnemyMoveParam","push","Enemies","createExplosion","target","newExplosion","invaderHit","invaderIndex","splice","blockHit","blockIndex","checkColisions","bulletIndex","colision","handleEvents","spawnBonusInvader","newEntity","playerShooting","newBullet","invaderShooting","chance","invaderShooter","handleBullets","newArray","handleExplosions","invaderMove","drawBottomText","handleAction","action","setAction","appDialog","setAppDialog","args","setShowKeybindDialog","showKeybindDialog","setShowControls","showControls","handleTopMenu","appMenu","setAppMenu","gameChoice","KeybindDialog","keyboard","setKeyboard","newKeybinds","setNewKeybinds","structuredClone","keybindState","setKeybindState","update","setUpdate","info","key","display","flexDirection","marginLeft","justifyContent","alignItems","textAlign","keybind","border","onContextMenu","removeKeybind","changeKeybind","Promise","resolve","reject","document","addEventListener","removeEventListener","then","value","catch","error","addNewKeybind","actions","Confirm","Reset","Cancel","title","_Fragment","Arcade","props","contextMenu","canvasContainer","active","two","eject","command","setCommand","validateKey","useCallback","state","keyArray","currKeyArray","c","handleKeyPress","event","handleKeyRelease","Controls","canvasZoom","setCanvasZoom","handleScreenButton","repeat","dispatchEvent","KeyboardEvent","handleTouchEvent","type","values","touches","forEach","pos","clientX","clientY","boundingRects","getElementById","getBoundingClientRect","includes","transform","handleContextMenu","content","playpause","setOpen","setPosition","setContent","Snake","className","BsZoomIn","BsZoomOut","BsEjectFill","BsFillPlayFill","BsPauseFill","onMouseDown","onMouseUp","FaArrowLeft","FaArrowUp","FaArrowDown","FaArrowRight"],"sourceRoot":""}