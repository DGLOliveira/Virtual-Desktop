{"version":3,"file":"static/js/350.0fdb8961.chunk.js","mappings":"0JAGO,MAAMA,EAASA,KAClB,MAAMC,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,IAiDzB,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRF,EAAAA,EAAAA,KAAA,UACII,MAAOP,EAAMA,MACbQ,SAAWC,GAAMT,EAAMU,SAASD,EAAEE,OAAOJ,OAAOF,SAE/CL,EAAMY,UAAUC,KAAKb,IAClBG,EAAAA,EAAAA,KAAA,UAAAE,SAAqBL,GAARA,WAI1B,E,kCC5DJ,MAAMc,EAAiBA,KAE1BX,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKS,UAAU,kBAAkBC,MAAO,CAAEC,OAAQ,GAAIZ,SAAA,EACpDF,EAAAA,EAAAA,KAACe,EAAAA,IAAO,CAACH,UAAU,gBAAgB,gBAO9BI,EAAUA,KACrB,MAAMC,GAAanB,EAAAA,EAAAA,YAAWoB,EAAAA,KACvBC,EAAgBC,IAAqBC,EAAAA,EAAAA,UAASJ,EAAWK,MAAMC,QACtE,IAAIC,EAAOC,SAASC,cAAc,SAElC,MAAOC,EAAkBC,IAAuBP,EAAAA,EAAAA,UAC9CQ,iBAAiBL,GAAMM,iBAAiB,wBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,qBAAsBL,EAAiB,GAC9D,CAACA,IAEH,MAAOM,EAAkBC,IAAuBb,EAAAA,EAAAA,UAC9CQ,iBAAiBL,GAAMM,iBAAiB,wBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,qBAAsBC,EAAiB,GAC9D,CAACA,IAEH,MAAOE,EAAiBC,IAAsBf,EAAAA,EAAAA,UAC5CQ,iBAAiBL,GAAMM,iBAAiB,uBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,oBAAqBG,EAAgB,GAC5D,CAACA,IAEH,MAAOE,EAAqBC,IAA0BjB,EAAAA,EAAAA,UACpDQ,iBAAiBL,GAAMM,iBAAiB,2BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,wBAAyBK,EAAoB,GACpE,CAACA,IAEH,MAAOE,EAAmBC,IAAwBnB,EAAAA,EAAAA,UAChDQ,iBAAiBL,GAAMM,iBAAiB,yBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,sBAAuBO,EAAkB,GAChE,CAACA,IAEH,MAAOE,EAAiBC,IAAsBrB,EAAAA,EAAAA,UAC5CQ,iBAAiBL,GAAMM,iBAAiB,qBAAqBa,MAAM,GAAI,KAEzEZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,oBAAqBS,EAAkB,KAAK,GACnE,CAACA,IAEH,MAAOG,EAAiBC,IAAsBxB,EAAAA,EAAAA,UAC5CQ,iBAAiBL,GAAMM,iBAAiB,qBAAqBa,MAAM,GAAI,KAEzEZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,oBAAqBY,EAAkB,KAAK,GACnE,CAACA,IA0CH,OAzBAb,EAAAA,EAAAA,YAAU,KACwB,UAA5Bd,EAAWK,MAAMC,OACiB,UAAhCN,EAAWK,MAAMwB,MAAMC,MACzBnB,EAAoBX,EAAWK,MAAMwB,MAAMA,OAC3CZ,EAAoB,SACqB,aAAhCjB,EAAWK,MAAMwB,MAAMC,OACa,WAAzC9B,EAAWK,MAAMwB,MAAME,SAASD,MAClCnB,EAAoB,mBAAmBX,EAAWK,MAAMwB,MAAME,SAASC,cAAchC,EAAWK,MAAMwB,MAAME,SAASE,WAAWjC,EAAWK,MAAMwB,MAAME,SAASG,WAChKjB,EAAoB,SAC8B,WAAzCjB,EAAWK,MAAMwB,MAAME,SAASD,OACzCnB,EAAoB,mBAAmBX,EAAWK,MAAMwB,MAAME,SAASE,WAAWjC,EAAWK,MAAMwB,MAAME,SAASG,WAClHjB,EAAoB,UAGa,UAA5BjB,EAAWK,MAAMC,QACtBN,EAAWK,MAAM8B,MAAMC,MACzBzB,EAAoBX,EAAWK,MAAMwB,MAAMA,OAC3CZ,EAAoB,OAAOjB,EAAWK,MAAM8B,MAAMC,QAClDf,EAAuBrB,EAAWK,MAAM8B,MAAME,UAC9ClB,EAAmBnB,EAAWK,MAAM8B,MAAMG,MAC1Cf,EAAqBvB,EAAWK,MAAM8B,MAAMI,QAEhD,GACC,CAACvC,EAAWK,SAGbnB,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,CAAQ,eACNF,EAAAA,EAAAA,KAAA,OAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAQC,MAAOe,EAAgBd,SAAWC,GAAMc,EAAkBd,EAAEE,OAAOJ,OAAOF,SAAA,EAChFF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,WAAUF,SAAC,wBAGX,UAAnBiB,GACChB,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACEY,UAC8B,UAA5BK,EAAWK,MAAMC,OACb,gCACA,gBAENkC,QAASA,IAAMxC,EAAWyC,UAAU,SAASxD,SAC9C,sBAGDF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,4BACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOnB,EACPiC,SAAUhC,EACViC,UAAU,QAId7D,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAEkB,UAAnBkB,GACChB,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACEY,UAC8B,UAA5BK,EAAWK,MAAMC,OACb,gCACA,gBAENkC,QAASA,IAAMxC,EAAWyC,UAAU,SAASxD,SAC9C,eAGDF,EAAAA,EAAAA,KAAA,SAAO8D,QAAQ,cAAa5D,SAAC,oBAC7BF,EAAAA,EAAAA,KAAA,SACE+D,GAAG,cACHhB,KAAK,OACLiB,OAAO,UACP3D,SAAWC,IAxFF2D,KACnB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAUC,IACfrD,EAAWsD,SACTD,EAAY9D,OAAOgE,OACnBvD,EAAWK,MAAM8B,MAAME,SACvBrC,EAAWK,MAAM8B,MAAMG,KACvBtC,EAAWK,MAAM8B,MAAMI,OAAO,CACjC,EA+E4BiB,CAAYnE,EAAEE,OAAOkE,MAAM,GAAG,KACnD1E,EAAAA,EAAAA,KAAA,SAAO8D,QAAQ,gBAAe5D,SAAC,gBAC/BC,EAAAA,EAAAA,MAAA,UAAQ4D,GAAG,gBACT3D,MAAOa,EAAWK,MAAM8B,MAAME,SAC9BjD,SAAWC,IACTW,EAAWsD,SACTtD,EAAWK,MAAM8B,MAAMa,KACvB3D,EAAEE,OAAOJ,MACTa,EAAWK,MAAM8B,MAAMG,KACvBtC,EAAWK,MAAM8B,MAAMI,QAEzBlB,EAAuBhC,EAAEE,OAAOJ,MAAM,EACtCF,SAAA,EACFF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,MAAKF,SAAC,SACpBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,WAAUF,SAAC,cACzBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,YAAWF,SAAC,eAC1BF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,cAAaF,SAAC,iBAC5BF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,eAAcF,SAAC,kBAC7BF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,OAAMF,SAAC,UACrBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,cAExBF,EAAAA,EAAAA,KAAA,SAAO8D,QAAQ,YAAW5D,SAAC,YAC3BC,EAAAA,EAAAA,MAAA,UAAQ4D,GAAG,YACT3D,MAAOa,EAAWK,MAAM8B,MAAMG,KAC9BlD,SAAWC,IACTW,EAAWsD,SACTtD,EAAWK,MAAM8B,MAAMa,KACvBhD,EAAWK,MAAM8B,MAAME,SACvBhD,EAAEE,OAAOJ,MACTa,EAAWK,MAAM8B,MAAMI,QAEzBpB,EAAmB9B,EAAEE,OAAOJ,MAAM,EAClCF,SAAA,EACFF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,OAAMF,SAAC,UACrBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,UAASF,SAAC,aACxBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,cAAaF,SAAC,gBAE9BF,EAAAA,EAAAA,KAAA,SAAO8D,QAAQ,cAAa5D,SAAC,cAC7BC,EAAAA,EAAAA,MAAA,UAAQ4D,GAAG,cACT3D,MAAOa,EAAWK,MAAM8B,MAAMI,OAC9BnD,SAAWC,IACTW,EAAWsD,SACTtD,EAAWK,MAAM8B,MAAMa,KACvBhD,EAAWK,MAAM8B,MAAME,SACvBrC,EAAWK,MAAM8B,MAAMG,KACvBjD,EAAEE,OAAOJ,OAEXoC,EAAqBlC,EAAEE,OAAOJ,MAAM,EACpCF,SAAA,EAEFF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,YAAWF,SAAC,eAC1BF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,WAAUF,SAAC,cACzBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,WAAUF,SAAC,oBAI7BF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,KAE6BD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACX,aAAnBkB,GACChB,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACEY,UAC8B,aAA5BK,EAAWK,MAAMC,OACb,gCACA,gBAENkC,QAASA,IAAMxC,EAAWyC,UAAU,YAAYxD,SACjD,kBAGDC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UACAU,MAAO,CAAC8D,OAAO,WACflB,QAASA,IAAMxC,EAAW2D,YAAY,MAAO,YAAa3D,EAAWK,MAAgB,SAAO,IAAEuD,UAAU3E,SAAA,EAEtGF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,WACL+B,QAAS7D,EAAWK,MAAgB,SAAO,IAAEuD,SAC7CxE,SAAUA,IAAMY,EAAW2D,YAAY,MAAO,YAAa3D,EAAWK,MAAgB,SAAO,IAAEuD,YAC/F,eAGH5D,EAAWK,MAAgB,SAAO,IAAEuD,WACnC1E,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EAAEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACAF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAI,OACJC,IAAI,IACJC,KAAK,QACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAE4D,YAC3C7E,SAAWC,GACTW,EAAW2D,YAAY,MAAO,cAAetE,EAAEE,OAAOJ,UAG1DJ,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAI,OACJC,IAAI,IACJC,KAAK,QACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAE4D,YAC3C7E,SAAWC,GACTW,EAAW2D,YAAY,MAAO,cAAetE,EAAEE,OAAOJ,aAI1DD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAI,IACJC,IAAI,IACJC,KAAK,OACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAE6D,QAC3C9E,SAAWC,GACTW,EAAW2D,YAAY,MAAO,UAAWtE,EAAEE,OAAOJ,UAGtDJ,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAI,IACJC,IAAI,IACJC,KAAK,OACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAE6D,QAC3C9E,SAAWC,GACTW,EAAW2D,YAAY,MAAO,UAAWtE,EAAEE,OAAOJ,aAIxDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,OACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAE8D,UAC3C/E,SAAWC,GACTW,EAAW2D,YAAY,MAAO,YAAatE,EAAEE,OAAOJ,UAGxDJ,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,OACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAE8D,UAC3C/E,SAAWC,GACTW,EAAW2D,YAAY,MAAO,YAAatE,EAAEE,OAAOJ,aAI1DD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,OACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAE+D,UAC3ChF,SAAWC,GACTW,EAAW2D,YAAY,MAAO,YAAatE,EAAEE,OAAOJ,UAGxDJ,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,OACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAE+D,UAC3ChF,SAAWC,GACTW,EAAW2D,YAAY,MAAO,YAAatE,EAAEE,OAAOJ,mBAMhED,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,mBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO7B,EAAWK,MAAgB,SAAgB,aAAEwB,MACpDc,SAAWd,GACT7B,EAAW2D,YAAY,eAAgB,QAAS9B,GAClDe,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,MACL7E,MAAOa,EAAWK,MAAgB,SAAgB,aAAEgE,UACpDjF,SAAWC,GACTW,EAAW2D,YAAY,eAAgB,YAAatE,EAAEE,OAAOJ,UAGjEJ,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,MACL7E,MAAOa,EAAWK,MAAgB,SAAgB,aAAEgE,UACpDjF,SAAWC,GACTW,EAAW2D,YAAY,eAAgB,YAAatE,EAAEE,OAAOJ,gBAKrED,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,uBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACHF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO7B,EAAWK,MAAgB,SAAoB,iBAAEwB,MACxDc,SAAWd,GACT7B,EAAW2D,YAAY,mBAAoB,QAAS9B,GACtDe,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAI,IACJC,IAAI,YACJC,KAAK,MACL7E,MAAOa,EAAWK,MAAgB,SAAoB,iBAAEgE,UACxDjF,SAAWC,GAAMW,EAAW2D,YAAY,mBAAoB,YAAatE,EAAEE,OAAOJ,UAEpFJ,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAI,IACJC,IAAI,YACJC,KAAK,MACL7E,MAAOa,EAAWK,MAAgB,SAAoB,iBAAEgE,UACxDjF,SAAWC,GAAMW,EAAW2D,YAAY,mBAAoB,YAAatE,EAAEE,OAAOJ,gBAIxFD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UACAU,MAAO,CAAC8D,OAAO,WACflB,QAASA,IAAMxC,EAAW2D,YAAY,QAAS,YAAa3D,EAAWK,MAAgB,SAAS,MAAEuD,UAAU3E,SAAA,EAE1GF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,WACL+B,QAAS7D,EAAWK,MAAgB,SAAS,MAAEuD,SAC/CxE,SAAWC,GAAMW,EAAW2D,YAAY,QAAS,YAAa3D,EAAWK,MAAgB,SAAS,MAAEuD,YACpG,WAGH5D,EAAWK,MAAgB,SAAS,MAAEuD,WACrC7E,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAI,IACJC,IAAI,SACJ5E,MAAOa,EAAWK,MAAgB,SAAS,MAAEiE,MAC7ClF,SAAWC,GACTW,EAAW2D,YAAY,QAAS,QAAStE,EAAEE,OAAOJ,kBAM9DD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UACAU,MAAO,CAAC8D,OAAO,WACflB,QAASA,IAAMxC,EAAW2D,YAAY,MAAO,YAAa3D,EAAWK,MAAgB,SAAO,IAAEuD,UAAU3E,SAAA,EACtGF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,WACL+B,QAAS7D,EAAWK,MAAgB,SAAO,IAAEuD,SAC7CxE,SAAWC,GAAMW,EAAW2D,YAAY,MAAO,YAAa3D,EAAWK,MAAgB,SAAO,IAAEuD,YAChG,SAGH5D,EAAWK,MAAgB,SAAO,IAAEuD,WACnC1E,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO7B,EAAWK,MAAgB,SAAO,IAAEwB,MAC3Cc,SAAWd,GAAU7B,EAAW2D,YAAY,MAAO,QAAS9B,GAC5De,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,WACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAI,IACJC,IAAI,OACJC,KAAK,IACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAEkE,KAC3CnF,SAAWC,GACTW,EAAW2D,YAAY,MAAO,OAAQtE,EAAEE,OAAOJ,UAGnDJ,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAI,IACJC,IAAI,OACJC,KAAK,IACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAEkE,KAC3CnF,SAAWC,GACTW,EAAW2D,YAAY,MAAO,OAAQtE,EAAEE,OAAOJ,aAIrDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,UACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAI,IACJC,IAAI,OACJC,KAAK,IACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAEmE,IAC3CpF,SAAWC,GACTW,EAAW2D,YAAY,MAAO,MAAOtE,EAAEE,OAAOJ,UAGlDJ,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAI,IACJC,IAAI,OACJC,KAAK,IACL7E,MAAOa,EAAWK,MAAgB,SAAO,IAAEmE,IAC3CpF,SAAWC,GACTW,EAAW2D,YAAY,MAAO,MAAOtE,EAAEE,OAAOJ,mBAM1DD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,UACPF,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,WACZ+B,QAAS7D,EAAWK,MAAgB,SAAS,MAAEuD,SAC/CxE,SAAUA,IAAMY,EAAW2D,YAAY,QAAS,YAAa3D,EAAWK,MAAgB,SAAS,MAAEuD,gBAGrG1E,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,WACZ+B,QAAS7D,EAAWK,MAAgB,SAAU,OAAEuD,SAChDxE,SAAUA,IAAMY,EAAW2D,YAAY,SAAU,YAAa3D,EAAWK,MAAgB,SAAU,OAAEuD,sBAM3G7E,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,QAGJE,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,GACLC,IAAK,IACLC,KAAK,IACL7E,MAAOsF,OAAO9C,GACdvC,SAAWC,GAAMuC,EAAmBvC,EAAEE,OAAOJ,aAGjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOsF,OAAOjD,GACdpC,SAAWC,GAAMoC,EAAmBpC,EAAEE,OAAOJ,iBAGlD,E,iCC5hBA,MAAMuF,EAAgBA,KAC3B,MAAMC,GAAe9F,EAAAA,EAAAA,YAAWC,EAAAA,IAChC,OACEI,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,cACEU,MAAO,CACLyC,SAAU,WACVuC,IAAK,OACLC,KAAM,OACNC,MAAO,MACPC,OAAQ,QACRC,gBAAiB,iCACjBC,YAAa,oCAEftF,UAAU,kBAAiBV,SAAA,EAE3BC,EAAAA,EAAAA,MAAA,eACEU,MAAO,CACLiC,MAAO,uCACPmD,gBAAiB,wCACjB/F,SAAA,EACFF,EAAAA,EAAAA,KAACe,EAAAA,IAAO,KACRf,EAAAA,EAAAA,KAAA,MAAAE,SAAI,aAC8B,YAAjC0F,EAAaO,kBACZhG,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,uDAAsDV,UACtEF,EAAAA,EAAAA,KAACoG,EAAAA,IAAmB,OAEtBpG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,uDAAsDV,UACtEF,EAAAA,EAAAA,KAACqG,EAAAA,IAAgB,OAEnBrG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,uDAAsDV,UACtEF,EAAAA,EAAAA,KAACsG,EAAAA,IAAc,SAGa,SAAjCV,EAAaO,kBACZhG,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,kDAAiDV,UACjEF,EAAAA,EAAAA,KAACoG,EAAAA,IAAmB,OAEtBpG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,kDAAiDV,UACjEF,EAAAA,EAAAA,KAACqG,EAAAA,IAAgB,OAEnBrG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,gDAA+CV,UAC/DF,EAAAA,EAAAA,KAACsG,EAAAA,IAAc,SAGa,SAAjCV,EAAaO,kBACZhG,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,+CAA8CV,SAAC,OACjEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,gDAA+CV,SAAC,OAClEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,6CAA4CV,SAAC,SAGjC,YAAjC0F,EAAaO,kBACZhG,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,yBAAwBV,UACxCF,EAAAA,EAAAA,KAACqG,EAAAA,IAAgB,OAEnBrG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,yBAAwBV,UACxCF,EAAAA,EAAAA,KAACoG,EAAAA,IAAmB,OAEtBpG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,0BAAyBV,UACzCF,EAAAA,EAAAA,KAACuG,EAAAA,IAAgB,aAKzBvG,EAAAA,EAAAA,KAAA,iBACEa,MAAO,CACLiC,MAAO,8BACPmD,gBAAiB,8BACjBC,YAAa,uCAGnB/F,EAAAA,EAAAA,MAAA,cACEU,MAAO,CACLyC,SAAU,WACVuC,IAAK,OACLC,KAAM,OACNC,MAAO,MACPC,OAAQ,QACRC,gBAAiB,0BAEnBrF,UAAU,MAAKV,SAAA,EAEfC,EAAAA,EAAAA,MAAA,eACEU,MAAO,CACLiC,MAAO,+BACPmD,gBAAiB,gCACjB/F,SAAA,EACFF,EAAAA,EAAAA,KAACe,EAAAA,IAAO,KACRf,EAAAA,EAAAA,KAAA,MAAAE,SAAI,WAC8B,YAAjC0F,EAAaO,kBACZhG,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,uDAAsDV,UACtEF,EAAAA,EAAAA,KAACoG,EAAAA,IAAmB,OAEtBpG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,uDAAsDV,UACtEF,EAAAA,EAAAA,KAACqG,EAAAA,IAAgB,OAEnBrG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,sDAAqDV,UACrEF,EAAAA,EAAAA,KAACsG,EAAAA,IAAc,SAGa,SAAjCV,EAAaO,kBACZhG,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,kDAAiDV,UACjEF,EAAAA,EAAAA,KAACoG,EAAAA,IAAmB,OAEtBpG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,kDAAiDV,UACjEF,EAAAA,EAAAA,KAACqG,EAAAA,IAAgB,OAEnBrG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,gDAA+CV,UAC/DF,EAAAA,EAAAA,KAACsG,EAAAA,IAAc,SAGa,SAAjCV,EAAaO,kBACZhG,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,+CAA8CV,SAAC,OACjEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,gDAA+CV,SAAC,OAClEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,6CAA4CV,SAAC,SAGjC,YAAjC0F,EAAaO,kBACZhG,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAQY,UAAU,yBAAwBV,UACxCF,EAAAA,EAAAA,KAACqG,EAAAA,IAAgB,OAEnBrG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,yBAAwBV,UACxCF,EAAAA,EAAAA,KAACoG,EAAAA,IAAmB,OAEtBpG,EAAAA,EAAAA,KAAA,UAAQY,UAAU,0BAAyBV,UACzCF,EAAAA,EAAAA,KAACuG,EAAAA,IAAgB,aAKzBvG,EAAAA,EAAAA,KAAA,iBACEa,MAAO,CACLiC,MAAO,sBACPmD,gBAAiB,sBACjBC,YAAa,gCAGlB,EAIMM,EAASA,KACpB,MAAMZ,GAAe9F,EAAAA,EAAAA,YAAWC,EAAAA,IAChC,IAAIyB,EAAOC,SAASC,cAAc,SAElC,MAAO+E,EAAiBC,IAAsBrF,EAAAA,EAAAA,UAC5CQ,iBAAiBL,GAAMM,iBAAiB,uBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,oBAAqByE,EAAgB,GAC3D,CAACA,IAEJ,MAAOE,EAAyBC,IAA8BvF,EAAAA,EAAAA,UAC5DQ,iBAAiBL,GAAMM,iBAAiB,+BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,4BAA6B2E,EAAwB,GAC3E,CAACA,IAEJ,MAAOE,EAAUC,IAAezF,EAAAA,EAAAA,UAC9BQ,iBAAiBL,GAAMM,iBAAiB,0BAA0Ba,MAAM,GAAI,KAE9EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,yBAA0B6E,EAAW,KAAK,GAChE,CAACA,IAEJ,MAAOE,EAAkBC,IAAuB3F,EAAAA,EAAAA,UAC9CQ,iBAAiBL,GAAMM,iBAAiB,6BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,0BAA2B+E,EAAiB,GAClE,CAACA,IAEJ,MAAOE,EAAiBC,IAAsB7F,EAAAA,EAAAA,UAC5CQ,iBAAiBL,GAAMM,iBAAiB,6BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,0BAA2BiF,EAAgB,GACjE,CAACA,IAEJ,MAAOE,EAAUC,IAAe/F,EAAAA,EAAAA,UAC9BQ,iBAAiBL,GAAMM,iBAAiB,uBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,oBAAqBmF,EAAS,GACpD,CAACA,IAEJ,MAAOE,EAAeC,IAAoBjG,EAAAA,EAAAA,UACxCQ,iBAAiBL,GAAMM,iBAAiB,mBAAmBa,MAAM,GAAI,KAEvEZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,kBAAmBqF,EAAgB,KAAK,GAC9D,CAACA,IAEJ,MAAOE,EAAqBC,IAA0BnG,EAAAA,EAAAA,UACpDQ,iBAAiBL,GAAMM,iBAAiB,iCAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,8BAA+BuF,EAAoB,GACzE,CAACA,IAEJ,MAAOE,EAAgBC,IAAqBrG,EAAAA,EAAAA,UAC1CQ,iBAAiBL,GAAMM,iBAAiB,6BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,0BAA2ByF,EAAe,GAChE,CAACA,IAEJ,MAAOE,EAAcC,IAAmBvG,EAAAA,EAAAA,UACtCQ,iBAAiBL,GAAMM,iBAAiB,wBAAwBa,MAAM,GAAI,KAE5EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,uBAAwB2F,EAAe,KAAK,GAClE,CAACA,IAEJ,MAAOE,EAAgBC,IAAqBzG,EAAAA,EAAAA,UAC1CQ,iBAAiBL,GAAMM,iBAAiB,0BAA0Ba,MAAM,GAAI,KAE9EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,yBAA0B6F,EAAiB,KAAK,GACtE,CAACA,IAEJ,MAAOE,EAAaC,IAAkB3G,EAAAA,EAAAA,UACpCQ,iBAAiBL,GAAMM,iBAAiB,uBAAuBa,MAAM,GAAI,KAE3EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,sBAAuB+F,EAAc,KAAK,GAChE,CAACA,IAEJ,MAAOE,EAAcC,IAAmB7G,EAAAA,EAAAA,UACtCQ,iBAAiBL,GAAMM,iBAAiB,wBAAwBa,MAAM,GAAI,KAE5EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,uBAAwBiG,EAAe,KAAK,GAClE,CAACA,IAEJ,MAAOE,EAAYC,IAAiB/G,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,wBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,qBAAsBmG,EAAW,GACvD,CAACA,IAEJ,MAAOjC,EAAamC,IAAkBhH,EAAAA,EAAAA,UACpCQ,iBAAiBL,GAAMM,iBAAiB,yBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,sBAAuBkE,EAAY,GACzD,CAACA,IAEJ,MAAOoC,EAAeC,IAAoBlH,EAAAA,EAAAA,UACxCQ,iBAAiBL,GAAMM,iBAAiB,yBAAyBa,MAAM,GAAI,KAE7EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,wBAAyBsG,EAAgB,KAAK,GACpE,CAACA,IAEJ,MAAOE,EAAeC,IAAoBpH,EAAAA,EAAAA,UACxCQ,iBAAiBL,GAAMM,iBAAiB,yBAAyBa,MAAM,GAAI,KAE7EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,wBAAyBwG,EAAgB,KAAK,GACpE,CAACA,IAEJ,MAAOE,EAAYC,IAAiBtH,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,sBAAsBa,MAAM,GAAI,KAE1EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,qBAAsB0G,EAAa,KAAK,GAC9D,CAACA,IAEJ,MAAOE,EAAcC,IAAmBxH,EAAAA,EAAAA,UACtCQ,iBAAiBL,GAAMM,iBAAiB,wBAAwBa,MAAM,GAAI,KAE5EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,uBAAwB4G,EAAe,KAAK,GAClE,CAACA,IAEJ,MAAOE,EAAaC,IAAkB1H,EAAAA,EAAAA,UACpCQ,iBAAiBL,GAAMM,iBAAiB,yBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,sBAAuB8G,EAAY,GACzD,CAACA,IAEJ,MAAOE,EAAqBC,IAA0B5H,EAAAA,EAAAA,UACpDQ,iBAAiBL,GAAMM,iBAAiB,iCAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,8BAA+BgH,EAAoB,GACzE,CAACA,IAEJ,MAAOE,EAAwBC,IAA6B9H,EAAAA,EAAAA,UAC1DQ,iBAAiBL,GAAMM,iBAAiB,qCAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,kCAAmCkH,EAAuB,GAChF,CAACA,IAEJ,MAAOE,EAAyBC,IAA8BhI,EAAAA,EAAAA,UAC5DQ,iBAAiBL,GAAMM,iBAAiB,qCAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,kCAAmCoH,EAAwB,GACjF,CAACA,IAEJ,MAAOE,EAAkBC,IAAuBlI,EAAAA,EAAAA,UAC9CQ,iBAAiBL,GAAMM,iBAAiB,8BAM1C,OAJAC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,4BAA6BsH,EAAiB,GACpE,CAACA,KAGFtJ,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAA,UACEI,MAAOwF,EAAa4D,mBACpBnJ,SAAWC,GAAMsF,EAAa6D,sBAAsBnJ,EAAEE,OAAOJ,OAAOF,SAEnE0F,EAAa8D,iBAAiBhJ,KAAKiJ,IAClC3J,EAAAA,EAAAA,KAAA,UAA2BI,MAAOuJ,EAAazJ,SAC5CyJ,GADUA,WAMnBxJ,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,aACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,UACEI,MAAOwF,EAAaO,gBACpB9F,SAAWC,GAAMsF,EAAagE,mBAAmBtJ,EAAEE,OAAOJ,OAAOF,SAEhE0F,EAAaiE,oBAAoBnJ,KAAKoJ,IACrC9J,EAAAA,EAAAA,KAAA,UAAwBI,MAAO0J,EAAU5J,SACtC4J,GADUA,WAMnB3J,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPC,EAAAA,EAAAA,MAAA,UACEC,MAAOmH,EACPlH,SAAWC,GAAMkH,EAAuBlH,EAAEE,OAAOJ,OAAOF,SAAA,EAExDF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,MAAKF,SAAC,wBACpBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,cAAaF,SAAC,6BAGhCC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPC,EAAAA,EAAAA,MAAA,UACEC,MAAO2G,EACP1G,SAAWC,GAAM0G,EAAoB1G,EAAEE,OAAOJ,OAAOF,SAAA,EAErDF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,OAAMF,SAAC,UACrBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,iBAG1BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,aACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOuH,EACPtH,SAAWC,GAAMsH,EAAgBtH,EAAEE,OAAOJ,aAG9CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOyH,EACPxH,SAAWC,GAAMwH,EAAkBxH,EAAEE,OAAOJ,aAGhDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOyG,EACPxG,SAAWC,GAAMwG,EAAYxG,EAAEE,OAAOJ,gBAI5CD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAO2H,EACP1H,SAAWC,GAAM0H,EAAe1H,EAAEE,OAAOJ,aAG7CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAO6H,EACP5H,SAAWC,GAAM4H,EAAgB5H,EAAEE,OAAOJ,aAG9CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPC,EAAAA,EAAAA,MAAA,UACEC,MAAO+H,EACP9H,SAAWC,GAAM8H,EAAc9H,EAAEE,OAAOJ,OAAOF,SAAA,EAE/CF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,kBAG3BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAOiH,EACPhH,SAAWC,GAAMgH,EAAiBhH,EAAEE,OAAOJ,gBAIjDD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,KAAM,GACNC,IAAK,GACLC,KAAK,IACL7E,MAAOoI,EACPnI,SAAWC,GAAMmI,EAAiBnI,EAAEE,OAAOJ,aAG/CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,KAAM,GACNC,IAAK,GACLC,KAAK,IACL7E,MAAOkI,EACPjI,SAAWC,GAAMiI,EAAiBjI,EAAEE,OAAOJ,aAG/CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAOwI,EACPvI,SAAWC,GAAMuI,EAAgBvI,EAAEE,OAAOJ,aAG9CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,UACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,SACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAOsI,EACPrI,SAAWC,GAAMqI,EAAcrI,EAAEE,OAAOJ,aAG5CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,WACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOgG,EACPlF,SAAUmF,EACVlF,UAAU,WAIhB1D,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,mBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gCACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO2E,EACP7D,SAAU8D,EACV7D,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,0BACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOmE,EACPrD,SAAUsD,EACVrD,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOqE,EACPvD,SAAUwD,EACVvD,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO2D,EACP7C,SAAU8C,EACV7C,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOoD,EACPtC,SAAUyE,EACVxE,UAAU,WAIhB1D,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,qBAERC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gCACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOoG,EACPtF,SAAUuF,EACVtF,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,0BACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOsG,EACPxF,SAAUyF,EACVxF,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOwG,EACP1F,SAAU2F,EACV1F,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO6D,EACP/C,SAAUgD,EACV/C,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOkG,EACPpF,SAAUqF,EACVpF,UAAU,cAKjB,EClmBMkG,EAAcA,KACvB,MAAMlK,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,IACnBiK,EAAUA,KAAM7J,EAAAA,EAAAA,MAAA,OAClBS,UAAU,aACVC,MAAO,CACHoF,gBAAiB,4BACnB/F,SAAA,EAEFC,EAAAA,EAAAA,MAAC8J,EAAAA,SAAQ,CAAA/J,SAAA,EACLF,EAAAA,EAAAA,KAAA,aAAAE,UACIC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAAE,UACIC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,YACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,OAAAE,SAAK,kBAGbF,EAAAA,EAAAA,KAAA,MAAAE,UACIC,EAAAA,EAAAA,MAAA,UAAQ+J,UAAQ,EAAAhK,SAAA,EACZF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,qBACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,OAAAE,SAAK,kBAGbF,EAAAA,EAAAA,KAAA,MAAAE,UACIF,EAAAA,EAAAA,KAAA,YAEJA,EAAAA,EAAAA,KAAA,MAAAE,UACIC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,cACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,mBAGpB/C,EAAAA,EAAAA,KAAA,MAAAE,UACIF,EAAAA,EAAAA,KAAA,YAEJA,EAAAA,EAAAA,KAAA,MAAAE,UACIC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,gBACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,QAAQoH,KAAK,gBAGjCnK,EAAAA,EAAAA,KAAA,MAAAE,UACIC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,gBACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,QAAQoH,KAAK,qBAKzCnK,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eAIZF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YAGRF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,cAKZ,OACIF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,cACIU,MAAO,CACHyC,SAAU,WACVuC,IAAK,MACLC,KAAM,MACNC,MAAO,MACPC,OAAQ,OACRC,gBAAiB,yBACjBmE,WAAY,wBAEhBxJ,UAAU,MAAKV,SAAA,CAEY,eAA1BL,EAAMwK,kBAAoCrK,EAAAA,EAAAA,KAACgK,EAAO,KACnDhK,EAAAA,EAAAA,KAAA,iBACIa,MAAO,CACHiC,MAAO,sBACPmD,gBAAiB,sBACjBC,YAAa,yBACfhG,SACyB,WAA1BL,EAAMwK,kBAAgCrK,EAAAA,EAAAA,KAACgK,EAAO,UAGxD,EAIEM,EAAOA,KAChB,MAAM9I,EAAOC,SAASC,cAAc,SAC9B7B,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,KAClBwK,EAAcC,IAAmBnJ,EAAAA,EAAAA,UACpCQ,iBAAiBL,GAAMM,iBAAiB,yBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,sBAAuBuI,EAAa,GAC5D,CAACA,IAEJ,MAAOE,EAAsBC,IAA2BrJ,EAAAA,EAAAA,UACpDQ,iBAAiBL,GAAMM,iBAAiB,iCAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,8BAA+ByI,EAAqB,GAC5E,CAACA,IAEJ,MAAOxE,EAAiB0E,IAAsBtJ,EAAAA,EAAAA,UAC1CQ,iBAAiBL,GAAMM,iBAAiB,sBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,mBAAoBiE,EAAgB,GAC5D,CAACA,IAEJ,MAAO2E,EAAWC,IAAgBxJ,EAAAA,EAAAA,UAC9BQ,iBAAiBL,GAAMM,iBAAiB,2BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,wBAAyB4I,EAAU,GAC3D,CAACA,IAEJ,MAAO/D,EAAUC,IAAezF,EAAAA,EAAAA,UAC5BQ,iBAAiBL,GAAMM,iBAAiB,wBAAwBa,MAAM,GAAI,KAE9EZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,uBAAwB6E,EAAW,KAAK,GAChE,CAACA,IAEJ,MAAOX,EAAamC,IAAkBhH,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,6BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,0BAA2BkE,EAAY,GAC/D,CAACA,IAEJ,MAAO6B,EAAaC,IAAkB3G,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,2BAA2Ba,MAAM,GAAI,KAEjFZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,0BAA2B+F,EAAc,KAAK,GACtE,CAACA,IAEJ,MAAOE,EAAcC,IAAmB7G,EAAAA,EAAAA,UACpCQ,iBAAiBL,GAAMM,iBAAiB,4BAA4Ba,MAAM,GAAI,KAElFZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,2BAA4BiG,EAAe,KAAK,GACxE,CAACA,IAEJ,MAAOE,EAAYC,IAAiB/G,EAAAA,EAAAA,UAChCQ,iBAAiBL,GAAMM,iBAAiB,4BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,yBAA0BmG,EAAW,GAC7D,CAACA,IAEJ,MAAO2C,EAAgBC,IAAqB1J,EAAAA,EAAAA,UACxCQ,iBAAiBL,GAAMM,iBAAiB,4BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,yBAA0B8I,EAAe,GACjE,CAACA,IAEJ,MAAOE,EAAWC,IAAgB5J,EAAAA,EAAAA,UAC9BQ,iBAAiBL,GAAMM,iBAAiB,2BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,wBAAyBgJ,EAAU,GAC3D,CAACA,IAEJ,MAAOE,EAAeC,IAAoB9J,EAAAA,EAAAA,UACtCQ,iBAAiBL,GAAMM,iBAAiB,+BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,4BAA6BkJ,EAAc,GACnE,CAACA,IAEJ,MAAOE,EAAoBC,IAAyBhK,EAAAA,EAAAA,UAChDQ,iBAAiBL,GAAMM,iBAAiB,gCAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,6BAA8BoJ,EAAmB,GACzE,CAACA,IAEJ,MAAOE,EAAoBC,IAAyBlK,EAAAA,EAAAA,UAChDQ,iBAAiBL,GAAMM,iBAAiB,oCAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,iCAAkCsJ,EAAmB,GAC7E,CAACA,IAEJ,MAAOE,EAAyBC,IAA8BpK,EAAAA,EAAAA,UAC1DQ,iBAAiBL,GAAMM,iBAAiB,qCAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,kCAAmCwJ,EAAwB,GACnF,CAACA,IAEJ,MAAOE,EAAsBC,IAA2BtK,EAAAA,EAAAA,UACpDQ,iBAAiBL,GAAMM,iBAAiB,sCAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,mCAAoC0J,EAAqB,GACjF,CAACA,IAEJ,MAAOE,EAAsBC,IAA2BxK,EAAAA,EAAAA,UACpDQ,iBAAiBL,GAAMM,iBAAiB,oCAAoCa,MAAM,GAAI,KAE1FZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,mCAAoC4J,EAAuB,KAAK,IAG3F,MAAOE,EAAuBC,IAA4B1K,EAAAA,EAAAA,UACtDQ,iBAAiBL,GAAMM,iBAAiB,qCAAqCa,MAAM,GAAI,KAE3FZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,oCAAqC8J,EAAwB,KAAK,GAC1F,CAACA,IAEJ,MAAOE,EAAqBC,IAA0B5K,EAAAA,EAAAA,UAClDQ,iBAAiBL,GAAMM,iBAAiB,oCAS5C,OAPAC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,kCAAmCgK,EAAoB,GAC/E,CAACA,KAMA7L,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOyG,EACPxG,SAAWC,GAAMwG,EAAYxG,EAAEE,OAAOJ,aAG9CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,eACPF,EAAAA,EAAAA,KAAA,UACII,MAAOP,EAAMwK,gBACbhK,SAAWC,GAAMT,EAAMqM,mBAAmB5L,EAAEE,OAAOJ,OAAOF,SAEzDL,EAAMsM,oBAAoBzL,KAAK0L,IAC5BpM,EAAAA,EAAAA,KAAA,UAAQI,MAAOgM,EAASlM,SAAEkM,eAK1CjM,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,oBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,yBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOyH,EACP3G,SAAU4G,EACV3G,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kCACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO2H,EACP7G,SAAU8G,EACV7G,UAAU,WAItB1D,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,wBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOsI,EACPxH,SAAUyH,EACVxH,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO0I,EACP5H,SAAU6H,EACV5H,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,gBACRF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOoI,EACPtH,SAAUuH,EACVtH,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,sBACRF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOwI,EACP1H,SAAU2H,EACV1H,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO4I,EACP9H,SAAU+H,EACV9H,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,EACLC,IAAK,EACLC,KAAK,IACL7E,MAAOwL,EACPvL,SAAWC,GAAMuL,EAAwBvL,EAAEE,OAAOJ,aAG1DD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAO0L,EACPzL,SAAWC,GAAMyL,EAAyBzL,EAAEE,OAAOJ,aAG3DD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPC,EAAAA,EAAAA,MAAA,UACIC,MAAO4L,EACP3L,SAAWC,GAAM2L,EAAuB3L,EAAEE,OAAOJ,OAAOF,SAAA,EAExDF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,qBAKnCC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,UAERC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO8H,EACPhH,SAAUiH,EACVhH,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOgI,EACPlH,SAAUmH,EACVlH,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOmD,EACPrC,SAAU+G,EACV9G,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOkI,EACPpH,SAAUqH,EACVpH,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOoD,EACPtC,SAAUyE,EACVxE,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,EACLC,IAAK,EACLC,KAAK,IACL7E,MAAO2H,EACP1H,SAAWC,GAAM0H,EAAe1H,EAAEE,OAAOJ,aAGjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAO6H,EACP5H,SAAWC,GAAM4H,EAAgB5H,EAAEE,OAAOJ,aAGlDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPC,EAAAA,EAAAA,MAAA,UAAQC,MAAO+H,EAAY9H,SAAWC,GAAM8H,EAAc9H,EAAEE,OAAOJ,OAAOF,SAAA,EACtEF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,sBAIpC,ECvbEmM,EAAaA,MACDvM,EAAAA,EAAAA,YAAWC,EAAAA,IAChC,OACII,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,MAAA,cACIU,MAAO,CACHyC,SAAU,WACVuC,IAAK,OACLC,KAAM,OACNC,MAAO,MACPC,OAAQ,QACRC,gBAAiB,iCACjBC,YAAa,oCAEjBtF,UAAU,kBAAiBV,SAAA,EAE3BC,EAAAA,EAAAA,MAAA,eACIU,MAAO,CACHiC,MAAO,uCACPmD,gBAAiB,wCACnB/F,SAAA,EACFF,EAAAA,EAAAA,KAACe,EAAAA,IAAO,KACRf,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iBAERF,EAAAA,EAAAA,KAAA,iBACIa,MAAO,CACHiC,MAAO,8BACPmD,gBAAiB,8BACjBC,YAAa,gCACboG,UAAW,QACbpM,SAAE,iBAEZC,EAAAA,EAAAA,MAAA,cACIU,MAAO,CACHyC,SAAU,WACVuC,IAAK,OACLC,KAAM,OACNC,MAAO,MACPC,OAAQ,QACRC,gBAAiB,0BAErBrF,UAAU,MAAKV,SAAA,EAEfC,EAAAA,EAAAA,MAAA,eACIU,MAAO,CACHiC,MAAO,+BACPmD,gBAAiB,gCACnB/F,SAAA,EACFF,EAAAA,EAAAA,KAACe,EAAAA,IAAO,KACRf,EAAAA,EAAAA,KAAA,MAAAE,SAAI,eAERF,EAAAA,EAAAA,KAAA,iBACIa,MAAO,CACHiC,MAAO,sBACPmD,gBAAiB,sBACjBC,YAAa,wBACboG,UAAU,QACZpM,SAAE,kBAEb,EAIEqM,EAAMA,KACf,IAAI/K,EAAOC,SAASC,cAAc,SAElC,MAAOkJ,EAAWC,IAAgBxJ,EAAAA,EAAAA,UAC9BQ,iBAAiBL,GAAMM,iBAAiB,oBAC5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,iBAAkB4I,EAAU,GACpD,CAACA,IAEJ,MAAO4B,EAAmBC,IAAwBpL,EAAAA,EAAAA,UAC9CQ,iBAAiBL,GAAMM,iBAAiB,4BAC5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,yBAA0BwK,EAAkB,GACpE,CAACA,IAEJ,MAAOrF,EAAUC,IAAe/F,EAAAA,EAAAA,UAC5BQ,iBAAiBL,GAAMM,iBAAiB,oBAC5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,iBAAkBmF,EAAS,GACnD,CAACA,IAEJ,MAAOuF,EAAkBC,IAAuBtL,EAAAA,EAAAA,UAC5CQ,iBAAiBL,GAAMM,iBAAiB,4BAC5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,yBAA0B0K,EAAiB,GACnE,CAACA,IAEJ,MAAOxG,EAAamC,IAAkBhH,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,sBAC5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,mBAAoBkE,EAAY,GACxD,CAACA,IAEJ,MAAO0G,EAAqBC,IAA0BxL,EAAAA,EAAAA,UAClDQ,iBAAiBL,GAAMM,iBAAiB,8BAC5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,2BAA4B4K,EAAoB,GACxE,CAACA,IAEJ,MAAO7E,EAAaC,IAAkB3G,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,oBAAoBa,MAAM,GAAI,KAC1EZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,mBAAoB+F,EAAc,KAAK,GAC/D,CAACA,IAEJ,MAAOE,EAAcC,IAAmB7G,EAAAA,EAAAA,UACpCQ,iBAAiBL,GAAMM,iBAAiB,qBAAqBa,MAAM,GAAI,KAC3EZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,oBAAqBiG,EAAe,KAAK,GACjE,CAACA,IAEJ,MAAOE,EAAYC,IAAiB/G,EAAAA,EAAAA,UAChCG,EAAKX,MAAMiB,iBAAiB,oBAKhC,OAJAC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,kBAAmBmG,EAAW,GACtD,CAACA,KAGAhI,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,gBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO8H,EACPhH,SAAUiH,EACViC,OAAO,QAGf3M,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO0J,EACP5I,SAAU6I,EACVK,OAAO,WAInB3M,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,sBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOqE,EACPvD,SAAUwD,EACV0F,OAAO,QAGf3M,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO4J,EACP9I,SAAU+I,EACVG,OAAO,WAInB3M,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOoD,EACPtC,SAAUyE,EACVyE,OAAO,QAGf3M,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO8J,EACPhJ,SAAUiJ,EACVC,OAAO,QAGf3M,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,WACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAI,IACJC,IAAI,KACJ5E,MAAO2H,EACP1H,SAAWC,GAAM0H,EAAe1H,EAAEE,OAAOJ,aAGjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAI,IACJC,IAAI,KACJ5E,MAAO6H,EACP5H,SAAWC,GAAM4H,EAAgB5H,EAAEE,OAAOJ,aAGlDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,UACPC,EAAAA,EAAAA,MAAA,UAAQC,MAAO+H,EAAY9H,SAAWC,GAAM8H,EAAc9H,EAAEE,OAAOJ,OAAOF,SAAA,EACtEF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,sBAIpC,ECrNE6M,EAAgBA,KAC3B,MAAMnH,GAAe9F,EAAAA,EAAAA,YAAWC,EAAAA,KACzBiN,EAAoBC,IAAyB5L,EAAAA,EAAAA,UAAS,0BACtD6L,EAAsBC,IAA2B9L,EAAAA,EAAAA,UAAS,0BAC1D+L,EAAkBC,IAAuBhM,EAAAA,EAAAA,UAAS,0CACzDU,EAAAA,EAAAA,YAAU,KACR,OAAQ6D,EAAa0H,mBACnB,IAAK,OACHL,EAAsB,uBACtBE,EAAwB,uBACxBE,EAAoB,uBACpB,MACF,IAAK,OACHJ,EAAsB,kDACtBE,EAAwB,+CACxBE,EAAoB,8CACpB,MACF,IAAK,UACHJ,EAAsB,0BACtBE,EAAwB,0BACxBE,EAAoB,0BACpB,MACF,QACEJ,EAAsB,yBACtBE,EAAwB,yBACxBE,EAAoB,yCAExB,GACC,CAACzH,EAAa0H,oBAEjB,MAAMC,EAAkBpD,IACtB,OAAQA,GACN,IAAK,QACH,OAAOiD,EACT,IAAK,OACL,IAAK,KACH,OAAOF,EACT,QACE,OAAOF,EACX,EAGIQ,EAAmBA,KACvBrN,EAAAA,EAAAA,MAAA,sBAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAQY,UAAW2M,EAAe,MAAMrN,SAAC,QACzCF,EAAAA,EAAAA,KAAA,UAAQY,UAAW2M,EAAe,UAAUrN,SAAC,YAC7CF,EAAAA,EAAAA,KAAA,UAAQY,UAAW2M,EAAe,SAASrN,SAAC,aAIhD,OACEF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,cACEU,MAAO,CACLyC,SAAU,WACVuC,IAAK,MACLC,KAAM,MACN2H,UAAW,yBACXvN,SAAA,EAEFF,EAAAA,EAAAA,KAAA,sBAAAE,SAAoB,YAGpBC,EAAAA,EAAAA,MAAA,mBACEU,MAAO,CACL6M,aAAqD,cAAvC9H,EAAa+H,sBAAwC,MAAQ,wBAC1EzN,SAAA,EAEHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,gBACmC,sBAAvC0F,EAAa+H,wBAAiD3N,EAAAA,EAAAA,KAACwN,EAAgB,OAExC,cAAvC5H,EAAa+H,wBAAyC3N,EAAAA,EAAAA,KAACwN,EAAgB,QAEzE,EAIMI,EAASA,KACpB,MAAMhI,GAAe9F,EAAAA,EAAAA,YAAWC,EAAAA,IAChC,IAAIyB,EAAOC,SAASC,cAAc,SAElC,MAAOmM,EAAiBC,IAAsBzM,EAAAA,EAAAA,UAC5CQ,iBAAiBL,GAAMM,iBAAiB,uBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,oBAAqB6L,EAAgB,GAC3D,CAACA,IAEJ,MAAOE,EAAmBC,IAAwB3M,EAAAA,EAAAA,UAChDQ,iBAAiBL,GAAMM,iBAAiB,yBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,sBAAuB+L,EAAkB,GAC/D,CAACA,IAEJ,MAAOE,EAAmBC,IAAwB7M,EAAAA,EAAAA,UAChDQ,iBAAiBL,GAAMM,iBAAiB,uBAAuBa,MAAM,GAAI,KAE3EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,sBAAuBiM,EAAoB,KAAK,GACtE,CAACA,IAEJ,MAAOE,EAAoBC,IAAyB/M,EAAAA,EAAAA,UAClDQ,iBAAiBL,GAAMM,iBAAiB,wBAAwBa,MAAM,GAAI,KAE5EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,uBAAwBmM,EAAqB,KAAK,GACxE,CAACA,IAEJ,MAAOE,EAAkBC,IAAuBjN,EAAAA,EAAAA,UAC9CQ,iBAAiBL,GAAMM,iBAAiB,wBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,qBAAsBqM,EAAiB,GAC7D,CAACA,IAEJ,MAAOE,EAAgBC,IAAqBnN,EAAAA,EAAAA,UAC1CQ,iBAAiBL,GAAMM,iBAAiB,sBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,mBAAoBuM,EAAe,GACzD,CAACA,IAEJ,MAAOE,EAAqBC,IAA0BrN,EAAAA,EAAAA,UACpDQ,iBAAiBL,GAAMM,iBAAiB,2BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,wBAAyByM,EAAoB,GACnE,CAACA,IAEJ,MAAOE,EAAoBC,IAAyBvN,EAAAA,EAAAA,UAClDQ,iBAAiBL,GAAMM,iBAAiB,wBAAwBa,MAAM,GAAI,KAE5EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,uBAAwB2M,EAAqB,KAAK,GACxE,CAACA,IAEJ,MAAOE,EAAuBC,IAA4BzN,EAAAA,EAAAA,UACxDQ,iBAAiBL,GAAMM,iBAAiB,6BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,0BAA2B6M,EAAsB,GACvE,CAACA,IAEJ,MAAOE,EAAuBC,IAA4B3N,EAAAA,EAAAA,UACxDQ,iBAAiBL,GAAMM,iBAAiB,2BAA2Ba,MAAM,GAAI,KAE/EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,0BAA2B+M,EAAwB,KAAK,GAC9E,CAACA,IAEJ,MAAOE,EAAwBC,IAA6B7N,EAAAA,EAAAA,UAC1DQ,iBAAiBL,GAAMM,iBAAiB,4BAA4Ba,MAAM,GAAI,KAEhFZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,2BAA4BiN,EAAyB,KAAK,GAChF,CAACA,IAEJ,MAAOE,EAAsBC,IAA2B/N,EAAAA,EAAAA,UACtDQ,iBAAiBL,GAAMM,iBAAiB,4BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,yBAA0BmN,EAAqB,GACrE,CAACA,IAEJ,MAAOE,EAAeC,IAAoBjO,EAAAA,EAAAA,UACxCQ,iBAAiBL,GAAMM,iBAAiB,mBAAmBa,MAAM,GAAI,KAEvEZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,kBAAmBqN,EAAgB,KAAK,GAC9D,CAACA,IAEJ,MAAOE,EAAkBC,IAAuBnO,EAAAA,EAAAA,UAC9CQ,iBAAiBL,GAAMM,iBAAiB,wBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,qBAAsBuN,EAAiB,GAC7D,CAACA,IAEJ,MAAOE,EAAsBC,IAA2BrO,EAAAA,EAAAA,UACtDQ,iBAAiBL,GAAMM,iBAAiB,0BAA0Ba,MAAM,GAAI,KAE9EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,yBAA0ByN,EAAuB,KAAK,GAC5E,CAACA,IAEJ,MAAOE,EAAuBC,IAA4BvO,EAAAA,EAAAA,UACxDQ,iBAAiBL,GAAMM,iBAAiB,6BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,0BAA2B2N,EAAsB,GACvE,CAACA,IAEJ,MAAOE,EAAqBC,IAA0BzO,EAAAA,EAAAA,UACpDQ,iBAAiBL,GAAMM,iBAAiB,2BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,wBAAyB6N,EAAoB,GACnE,CAACA,IAEJ,MAAOE,EAAkBC,IAAuB3O,EAAAA,EAAAA,UAC9CQ,iBAAiBL,GAAMM,iBAAiB,wBAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,qBAAsB+N,EAAiB,GAC7D,CAACA,IAEJ,MAAOE,EAAuBC,IAA4B7O,EAAAA,EAAAA,UACxDQ,iBAAiBL,GAAMM,iBAAiB,6BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,0BAA2BiO,EAAsB,GACvE,CAACA,IAEJ,MAAOE,EAAsBC,IAA2B/O,EAAAA,EAAAA,UACtDQ,iBAAiBL,GAAMM,iBAAiB,0BAA0Ba,MAAM,GAAI,KAE9EZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,yBAA0BmO,EAAuB,KAAK,GAC5E,CAACA,IAEJ,MAAOE,EAAyBC,IAA8BjP,EAAAA,EAAAA,UAC5DQ,iBAAiBL,GAAMM,iBAAiB,+BAE1CC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,4BAA6BqO,EAAwB,GAC3E,CAACA,IAEJ,MAAOE,EAAyBC,IAA8BnP,EAAAA,EAAAA,UAC5DQ,iBAAiBL,GAAMM,iBAAiB,6BAA6Ba,MAAM,GAAI,KAEjFZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,4BAA6BuO,EAA0B,KAAK,GAClF,CAACA,IAEJ,MAAOE,EAA0BC,IAA+BrP,EAAAA,EAAAA,UAC9DQ,iBAAiBL,GAAMM,iBAAiB,8BAA8Ba,MAAM,GAAI,KAElFZ,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,6BAA8ByO,EAA2B,KAAK,GACpF,CAACA,IAEJ,MAAOE,EAAwBC,IAA6BvP,EAAAA,EAAAA,UAC1DQ,iBAAiBL,GAAMM,iBAAiB,6BAO1C,OALAC,EAAAA,EAAAA,YAAU,KACRP,EAAKX,MAAMmB,YAAY,2BAA4B2O,EAAuB,GACzE,CAACA,KAKFxQ,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,mBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO+K,EACPjK,SAAUkK,EACVjK,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAA,UACEI,MAAOwF,EAAa4D,mBACpBnJ,SAAWC,GAAMsF,EAAa6D,sBAAsBnJ,EAAEE,OAAOJ,OAAOF,SAEnE0F,EAAa8D,iBAAiBhJ,KAAKiJ,IAClC3J,EAAAA,EAAAA,KAAA,UAA2BI,MAAOuJ,EAAazJ,SAC5CyJ,GADUA,WAMnBxJ,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,aACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOiL,EACPnK,SAAUoK,EACVnK,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAO6N,EACP5N,SAAWC,GAAM4N,EAAqB5N,EAAEE,OAAOJ,aAGnDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAO+N,EACP9N,SAAWC,GAAM8N,EAAsB9N,EAAEE,OAAOJ,aAGpDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPC,EAAAA,EAAAA,MAAA,UACEC,MAAOiO,EACPhO,SAAWC,GAAMgO,EAAoBhO,EAAEE,OAAOJ,OAAOF,SAAA,EAErDF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,qBAI7BC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,aACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOyM,EACP3L,SAAU4L,EACV3L,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO6M,EACP/L,SAAUgM,EACV/L,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOqP,EACPpP,SAAWC,GAAMoP,EAAwBpP,EAAEE,OAAOJ,gBAIxDD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,UACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOyL,EACP3K,SAAU4K,EACV3K,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOuO,EACPtO,SAAWC,GAAMsO,EAAsBtO,EAAEE,OAAOJ,aAGpDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO2L,EACP7K,SAAU8K,EACV7K,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,aACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO+L,EACPjL,SAAUkL,EACVjL,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAO2O,EACP1O,SAAWC,GAAM0O,EAAyB1O,EAAEE,OAAOJ,aAGvDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAO6O,EACP5O,SAAWC,GAAM4O,EAA0B5O,EAAEE,OAAOJ,aAGxDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPC,EAAAA,EAAAA,MAAA,UACEC,MAAO+O,EACP9O,SAAWC,GAAM8O,EAAwB9O,EAAEE,OAAOJ,OAAOF,SAAA,EAEzDF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,kBAG3BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,qBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAOiP,EACPhP,SAAWC,GAAMgP,EAAiBhP,EAAEE,OAAOJ,mBAKnDD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,UACEI,MAAOwF,EAAa+H,sBACpBtN,SAAWC,GAAMsF,EAAaiL,yBAAyBvQ,EAAEE,OAAOJ,OAAOF,SAEtE0F,EAAakL,0BAA0BpQ,KAAKqQ,IAC3C/Q,EAAAA,EAAAA,KAAA,UAA6BI,MAAO2Q,EAAe7Q,SAChD6Q,GADUA,WAMnB5Q,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAA,UACEI,MAAOwF,EAAa0H,kBACpBjN,SAAWC,GAAMsF,EAAaoL,qBAAqB1Q,EAAEE,OAAOJ,OAAOF,SAElE0F,EAAaqL,sBAAsBvQ,KAAKwQ,IACvClR,EAAAA,EAAAA,KAAA,UAA0BI,MAAO8Q,EAAYhR,SAC1CgR,GADUA,WAMnB/Q,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,2BACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAO+M,EACPjM,SAAUkM,EACVjM,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOiN,EACPnM,SAAUoM,EACVnM,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOmN,EACPrM,SAAUsM,EACVrM,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAO+P,EACP9P,SAAWC,GAAM8P,EAAwB9P,EAAEE,OAAOJ,aAGtDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACVb,MAAOuN,EACPzM,SAAU0M,EACVzM,UAAU,QAGd1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAOmQ,EACPlQ,SAAWC,GAAMkQ,EAA2BlQ,EAAEE,OAAOJ,aAGzDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAA,SACE+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAOqQ,EACPpQ,SAAWC,GAAMoQ,EAA4BpQ,EAAEE,OAAOJ,aAG1DD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPC,EAAAA,EAAAA,MAAA,UACEC,MAAOuQ,EACPtQ,SAAWC,GAAMsQ,EAA0BtQ,EAAEE,OAAOJ,OAAOF,SAAA,EAE3DF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,sBAIpB,ECxiBFiR,EAAiBA,KAC1B,MAAMvL,GAAe9F,EAAAA,EAAAA,YAAWC,EAAAA,IAC1BqR,EAAmBA,KACvB,IAAIC,EAAM,GACV,OAAQzL,EAAa0L,kBACnB,IAAK,UACHD,EAAK,qBACL,MACF,IAAK,OACHA,EAAK,kBACL,MACF,IAAK,OACHA,EAAK,kBACL,MAEF,QACEA,EAAK,oBAGT,OAAOA,CAAG,EAGd,OACErR,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OACEU,MAAO,CACLyC,SAAU,WACViO,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAChBC,OAAQ,IACR5L,KAAM,IACNC,MAAO,OACPC,OAAQ,uBACR/E,WAAY,qBACZH,OAAQ,GACRZ,SAAA,EAEFF,EAAAA,EAAAA,KAAA,gBAAAE,UAEEF,EAAAA,EAAAA,KAAA,UAAQY,UAAWwQ,IAAmBlR,UACxCC,EAAAA,EAAAA,MAAA,OAAK4F,MAAM,MAAMC,OAAO,MAAM2L,QAAQ,cAAcC,KAAK,OAAOC,MAAM,6BAA4B3R,SAAA,EAClGC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,kBAAgB4D,GAAG,qBAAqB+N,kBAAkB,aAAY5R,SAAA,EACpEF,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,gBAEhC5R,EAAAA,EAAAA,MAAA,kBAAgB4D,GAAG,uBAAuB+N,kBAAkB,aAAY5R,SAAA,EACtEF,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,gBAEhC5R,EAAAA,EAAAA,MAAA,kBAAgB4D,GAAG,sBAAsB+N,kBAAkB,aAAY5R,SAAA,EACrEF,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,mBAGlC/R,EAAAA,EAAAA,KAAA,QACEY,UAAU,WACVC,MAAO,CACH+Q,KAA6B,oBAAvBR,IAA2C,2BAA6B,IAElFY,EAAE,4FACFC,OAAO,UACPC,YAAY,OAEdlS,EAAAA,EAAAA,KAAA,QACEY,UAAU,WACVC,MAAO,CACH+Q,KAA6B,oBAAvBR,IAA2C,6BAA+B,IAEpFY,EAAE,4FACFC,OAAO,UACPC,YAAY,OAEdlS,EAAAA,EAAAA,KAAA,QACEY,UAAU,WACVC,MAAO,CACH+Q,KAA6B,oBAAvBR,IAA2C,4BAA8B,IAEnFY,EAAE,4FACFC,OAAO,UACPC,YAAY,OAEdlS,EAAAA,EAAAA,KAAA,QAAMY,UAAU,OAAOoR,EAAE,kBAAkBC,OAAO,UAAUC,YAAY,OACxElS,EAAAA,EAAAA,KAAA,QAAMY,UAAU,OAAOoR,EAAE,uBAAuBC,OAAO,UAAUC,YAAY,OAC7ElS,EAAAA,EAAAA,KAAA,QAAMY,UAAU,OAAOoR,EAAE,uBAAuBC,OAAO,UAAUC,YAAY,cAI/ElS,EAAAA,EAAAA,KAAA,aAAAE,UACEF,EAAAA,EAAAA,KAAA,UAAAE,UACEF,EAAAA,EAAAA,KAACe,EAAAA,IAAO,YAIb,EAIMoR,EAAUA,KAEnB,IAAI3Q,EAAOC,SAASC,cAAc,SAClC,MAAM7B,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,KAElBqS,EAAeC,IAAoBhR,EAAAA,EAAAA,UACtCQ,iBAAiBL,GAAMM,iBAAiB,mBAAmBa,MAAM,GAAI,KAEzEZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,kBAAmBoQ,EAAgB,KAAK,GAChE,CAACA,IAEJ,MAAOE,EAAiBC,IAAsBlR,EAAAA,EAAAA,UAC1CQ,iBAAiBL,GAAMM,iBAAiB,qBAAqBa,MAAM,GAAI,KAE3EZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,oBAAqBsQ,EAAkB,KAAK,GACpE,CAACA,IAEJ,MAAOE,EAAaC,IAAkBpR,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,mBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,gBAAiBwQ,EAAY,GACrD,CAACA,IAEJ,MAAOE,EAAiBC,IAAsBtR,EAAAA,EAAAA,UAC1CQ,iBAAiBL,GAAMM,iBAAiB,qBAAqBa,MAAM,GAAI,IAc3E,OAZAZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,oBAAqB0Q,EAAkB,KAAK,GACpE,CAACA,KAWAvS,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,iBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,aACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOgS,EACP/R,SAAWC,GAAM+R,EAAiB/R,EAAEE,OAAOJ,aAGnDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOsS,EACPrS,SAAWC,GAAMqS,EAAmBrS,EAAEE,OAAOJ,aAGrDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOkS,EACPjS,SAAWC,GAAMiS,EAAmBjS,EAAEE,OAAOJ,gBAIzDD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,iBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO0P,EACP5O,SAAU6O,EACV5O,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAA,UACII,MAAOP,EAAM+S,oBACbvS,SAAWC,GAAMT,EAAMgT,uBAAuBvS,EAAEE,OAAOJ,OAAOF,SAE1DL,EAAM6J,iBAAiBhJ,KAAKoS,IACxB9S,EAAAA,EAAAA,KAAA,UAAiBI,MAAO0S,EAAG5S,SAAE4S,GAAhBA,eAKlC,E,wBCxMJ,MAAMC,EAAeA,KACxB,MAAMnN,GAAe9F,EAAAA,EAAAA,YAAWC,EAAAA,IAC1BqR,EAAmBA,KACvB,IAAIC,EAAM,GACV,OAAQzL,EAAa0L,kBACnB,IAAK,UACHD,EAAK,8CACL,MACF,IAAK,OACHA,EAAK,wCACL,MACF,IAAK,OACHA,EAAK,wCACL,MAEF,QACEA,EAAK,4CAGT,OAAOA,CAAG,EAEd,OACErR,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OACEU,MAAO,CACLyC,SAAU,WACViO,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAChBC,OAAQ,IACR5L,KAAM,IACNC,MAAO,OACPC,OAAQ,uBACR/E,WAAY,qBACZH,OAAQ,GACRZ,SAAA,EAEFC,EAAAA,EAAAA,MAAA,gBAAAD,SAAA,EAEEF,EAAAA,EAAAA,KAAA,UAAQY,UAAWwQ,IAAmBlR,UACxCC,EAAAA,EAAAA,MAAA,OAAK4F,MAAM,MAAMC,OAAO,MAAM2L,QAAQ,cAAcC,KAAK,OAAOC,MAAM,6BAA4B3R,SAAA,EAClGC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,kBAAgB4D,GAAG,qBAAqB+N,kBAAkB,aAAY5R,SAAA,EACpEF,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,gBAEhC5R,EAAAA,EAAAA,MAAA,kBAAgB4D,GAAG,uBAAuB+N,kBAAkB,aAAY5R,SAAA,EACtEF,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,gBAEhC5R,EAAAA,EAAAA,MAAA,kBAAgB4D,GAAG,sBAAsB+N,kBAAkB,aAAY5R,SAAA,EACrEF,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,aAC9B/R,EAAAA,EAAAA,KAAA,QAAM+R,OAAO,MAAM,aAAW,mBAGlC/R,EAAAA,EAAAA,KAAA,QACEY,UAAU,WACVC,MAAO,CACLmS,aAAc,SACdpB,KAA6B,0CAAvBR,IAAiE,2BAA6B,UACpG3D,UAAW,kCAEbuE,EAAE,4FACFC,OAAO,UACPC,YAAY,OAEdlS,EAAAA,EAAAA,KAAA,QACEY,UAAU,WACVC,MAAO,CACLmS,aAAc,SACdpB,KAA8B,0CAAvBR,IAAiE,6BAA+B,UACvG3D,UAAW,mCAEbuE,EAAE,4FACFC,OAAO,UACPC,YAAY,OAEdlS,EAAAA,EAAAA,KAAA,QACEY,UAAU,WACVC,MAAO,CACLmS,aAAc,SACdpB,KAA8B,0CAAvBR,IAAiE,4BAA8B,UACtG3D,UAAW,iCAEbuE,EAAE,4FACFC,OAAO,UACPC,YAAY,OAEdlS,EAAAA,EAAAA,KAAA,QAAMY,UAAU,OAAOoR,EAAE,kBAAkBC,OAAO,UAAUC,YAAY,OACxElS,EAAAA,EAAAA,KAAA,QAAMY,UAAU,OAAOoR,EAAE,uBAAuBC,OAAO,UAAUC,YAAY,OAC7ElS,EAAAA,EAAAA,KAAA,QAAMY,UAAU,OAAOoR,EAAE,uBAAuBC,OAAO,UAAUC,YAAY,YAG7E/R,EAAAA,EAAAA,MAAA,cAAY8S,MAAO,2BAA4BpS,MAAO,CAAEiF,KAAM,EAAGoN,WAAY,MAAOhT,SAAA,EAClFC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACe,EAAAA,IAAO,IACP,IAAI,kBAGTf,EAAAA,EAAAA,KAAA,MAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACmT,EAAAA,IAAM,IACN,IAAI,kBAGTnT,EAAAA,EAAAA,KAAA,MAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACoT,EAAAA,IAAU,IACV,IAAI,qBAIXjT,EAAAA,EAAAA,MAAA,OAAKU,MAAO,CAAEqS,WAAY,MAAOhT,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACqT,EAAAA,IAAM,IAAG,eAGZlT,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACsT,EAAAA,IAAmB,IAAG,cAGzBnT,EAAAA,EAAAA,MAAA,UAAQS,UAAU,kBAAiBV,SAAA,EACjCF,EAAAA,EAAAA,KAACuT,EAAAA,IAAc,IAAG,qBAM1BvT,EAAAA,EAAAA,KAAA,oBAED,EAIMwT,EAAQA,KAEjB,IAAIhS,EAAOC,SAASC,cAAc,SAClC,MAAM7B,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,KAElB0T,EAAgBC,IAAqBrS,EAAAA,EAAAA,UACxCQ,iBAAiBL,GAAMM,iBAAiB,sBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,mBAAoByR,EAAe,GAC3D,CAACA,IAEJ,MAAOE,EAAeC,IAAoBvS,EAAAA,EAAAA,UACtCQ,iBAAiBL,GAAMM,iBAAiB,qBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,kBAAmB2R,EAAc,GACzD,CAACA,IAEJ,MAAOE,EAAoBC,IAAyBzS,EAAAA,EAAAA,UAChDQ,iBAAiBL,GAAMM,iBAAiB,yBAO5C,OALAC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,uBAAwB6R,EAAmB,GACnE,CAACA,KAIA1T,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,kBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAA,UACII,MAAOP,EAAMyR,iBACbjR,SAAWC,IAAOT,EAAMkU,oBAAoBzT,EAAEE,OAAOJ,MAAM,EAAEF,SAE5DL,EAAMmU,qBAAqBtT,KAAKb,IAEzBG,EAAAA,EAAAA,KAAA,UAAoBI,MAAOP,EAAMK,SAC5BL,GADQA,WAO7BM,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO2Q,EACP7P,SAAU8P,EACV7P,UAAU,WAItB1D,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,gBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO+Q,EACPjQ,SAAUkQ,EACVjQ,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO6Q,EACP/P,SAAUgQ,EACV/P,UAAU,YAIvB,E,cCxNJ,MAAMoQ,EAAcA,KAEnBjU,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,OACIU,MAAO,CACHyC,SAAU,WACViO,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAChBC,OAAQ,IACR5L,KAAM,IACNC,MAAO,OACPC,OAAQ,uBACR/E,WAAY,qBACZH,OAAQ,GACVZ,SAAA,EAEFF,EAAAA,EAAAA,KAAA,iBACAA,EAAAA,EAAAA,KAAA,mBAAAE,UACIC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAACkU,EAAAA,IAAQ,IAAG,iBAGpBlU,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,kBAAAE,UACIC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,CAAQ,SAEJF,EAAAA,EAAAA,KAAA,SAAM,uBASjBmU,EAAOA,KAChB,IAAI3S,EAAOC,SAASC,cAAc,UACpB5B,EAAAA,EAAAA,YAAWC,EAAAA,IAAzB,MAEOqU,EAAcC,IAAmBhT,EAAAA,EAAAA,UACpCQ,iBAAiBL,GAAMM,iBAAiB,2BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,wBAAyBoS,EAAa,GAC9D,CAACA,IAEJ,MAAOE,EAAaC,IAAkBlT,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,mBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,gBAAiBsS,EAAY,GACrD,CAACA,IAEJ,MAAOE,EAAkBC,IAAuBpT,EAAAA,EAAAA,UAC5CQ,iBAAiBL,GAAMM,iBAAiB,wBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,qBAAsBwS,EAAiB,GAC/D,CAACA,IAEJ,MAAOE,EAAYC,IAAiBtT,EAAAA,EAAAA,UAChCQ,iBAAiBL,GAAMM,iBAAiB,yBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,sBAAuB0S,EAAW,GAC1D,CAACA,IAEJ,MAAOE,EAAWC,IAAgBxT,EAAAA,EAAAA,UAC9BQ,iBAAiBL,GAAMM,iBAAiB,iBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,cAAe4S,EAAU,GACjD,CAACA,IAEJ,MAAOE,EAAgBC,IAAqB1T,EAAAA,EAAAA,UACxCQ,iBAAiBL,GAAMM,iBAAiB,qBAM5C,OAJAC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,mBAAoB8S,EAAe,GAC3D,CAACA,KAGA3U,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,aACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOsR,EACPxQ,SAAUyQ,EACVxQ,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOwR,EACP1Q,SAAU2Q,EACV1Q,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO0R,EACP5Q,SAAU6Q,EACV5Q,UAAU,WAItB1D,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,WACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO4R,EACP9Q,SAAU+Q,EACV9Q,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO8R,EACPhR,SAAUiR,EACVhR,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOgS,EACPlR,SAAUmR,EACVlR,UAAU,YAIvB,EC7IEmR,EAAqBA,KAC9B,MAAOC,EAAWC,IAAgB7T,EAAAA,EAAAA,WAAS,IACpC8T,EAAWC,IAAgB/T,EAAAA,EAAAA,WAAS,IACpCgU,EAAOC,IAAYjU,EAAAA,EAAAA,UAAS,KACnC,OACIrB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,gBAAcU,MAAO,CAAEiF,KAAM,EAAGD,IAAK,GAAI3F,SAAA,EACrCC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,YACLF,EAAAA,EAAAA,KAAA,eAEJG,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,yBACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,OAAAE,SAAK,oBAETF,EAAAA,EAAAA,KAAA,UACAG,EAAAA,EAAAA,MAAA,UAAQsD,QAASA,IAAMyR,GAAcD,GAAW/U,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,gBACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,WAAW+B,QAASmQ,EAAWM,UAAQ,QAEvDpV,EAAAA,EAAAA,MAAA,UAAQsD,QAASA,IAAM2R,GAAcD,GAAWjV,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,gBACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,WAAW+B,QAASqQ,EAAWI,UAAQ,QAEvDvV,EAAAA,EAAAA,KAAA,UACAG,EAAAA,EAAAA,MAAA,UAAQsD,QAASA,IAAM6R,EAAS,KAAKpV,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,aACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,QAAQoH,KAAK,QAAQrF,QAAmB,MAAVuQ,EAAeE,UAAQ,QAErEpV,EAAAA,EAAAA,MAAA,UAAQsD,QAASA,IAAM6R,EAAS,KAAKpV,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,aACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,QAAQoH,KAAK,QAAQrF,QAAmB,MAAVuQ,EAAeE,UAAQ,WAG1E,EAGEC,EAAcA,KACvB,IAAIhU,EAAOC,SAASC,cAAc,SAElC,MAAOmF,EAAUC,IAAezF,EAAAA,EAAAA,UAC5BQ,iBAAiBL,GAAMM,iBAAiB,yBAAyBa,MAAM,GAAI,KAE/EZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,wBAAyB6E,EAAW,KAAK,GACjE,CAACA,IAEJ,MAAO+D,EAAWC,IAAgBxJ,EAAAA,EAAAA,UAC9BQ,iBAAiBL,GAAMM,iBAAiB,4BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,yBAA0B4I,EAAU,GAC5D,CAACA,IAEJ,MAAOzD,EAAUC,IAAe/F,EAAAA,EAAAA,UAC5BQ,iBAAiBL,GAAMM,iBAAiB,uBAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,oBAAqBmF,EAAS,GACtD,CAACA,IAEJ,MAAOjB,EAAamC,IAAkBhH,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,8BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,2BAA4BkE,EAAY,GAChE,CAACA,IAEJ,MAAO6B,EAAaC,IAAkB3G,EAAAA,EAAAA,UAClCQ,iBAAiBL,GAAMM,iBAAiB,4BAA4Ba,MAAM,GAAI,KAElFZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,2BAA4B+F,EAAc,KAAK,GACvE,CAACA,IAEJ,MAAOE,EAAcC,IAAmB7G,EAAAA,EAAAA,UACpCQ,iBAAiBL,GAAMM,iBAAiB,6BAA6Ba,MAAM,GAAI,KAEnFZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,4BAA6BiG,EAAe,KAAK,GACzE,CAACA,IAEJ,MAAOE,EAAYC,IAAiB/G,EAAAA,EAAAA,UAChCQ,iBAAiBL,GAAMM,iBAAiB,6BAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,0BAA2BmG,EAAW,GAC9D,CAACA,IAEJ,MAAOsN,EAAYC,IAAiBrU,EAAAA,EAAAA,UAChCQ,iBAAiBL,GAAMM,iBAAiB,mCAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,gCAAiCyT,EAAW,GACpE,CAACA,IAEJ,MAAOzK,EAAWC,IAAgB5J,EAAAA,EAAAA,UAC9BQ,iBAAiBL,GAAMM,iBAAiB,kCAE5CC,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,+BAAgCgJ,EAAU,GAClE,CAACA,IAEJ,MAAO2K,EAASC,IAAcvU,EAAAA,EAAAA,UAC1BQ,iBAAiBL,GAAMM,iBAAiB,wBAAwBa,MAAM,GAAI,IAM9E,OAJAZ,EAAAA,EAAAA,YAAU,KACNP,EAAKX,MAAMmB,YAAY,uBAAwB2T,EAAU,KAAK,GAC/D,CAACA,KAGAxV,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,UACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO8H,EACPhH,SAAUiH,EACVhH,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACL7E,MAAOyG,EACPxG,SAAWC,GAAMwG,EAAYxG,EAAEE,OAAOJ,gBAIlDD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,gBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOqE,EACPvD,SAAUwD,EACVvD,UAAU,WAItB1D,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOoD,EACPtC,SAAUyE,EACVxE,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,EACLC,IAAK,EACLC,KAAK,IACL7E,MAAO2H,EACP1H,SAAWC,GAAM0H,EAAe1H,EAAEE,OAAOJ,aAGjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAO6H,EACP5H,SAAWC,GAAM4H,EAAgB5H,EAAEE,OAAOJ,aAGlDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPC,EAAAA,EAAAA,MAAA,UAAQC,MAAO+H,EAAY9H,SAAWC,GAAM8H,EAAc9H,EAAEE,OAAOJ,OAAOF,SAAA,EACtEF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,kBAG/BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAA,SACI+C,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACL7E,MAAOuV,EACPtV,SAAWC,GAAMsV,EAAWtV,EAAEE,OAAOJ,gBAIjDD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,WACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAO2S,EACP7R,SAAU8R,EACV7R,UAAU,QAGlB1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,6BACPF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,CACRb,MAAOkI,EACPpH,SAAUqH,EACVpH,UAAU,YAIvB,E,aCrNI,SAASgS,IACtB,MAAOC,EAASC,IAAc1U,EAAAA,EAAAA,UAAS,SAChC2U,EAASC,IAAc5U,EAAAA,EAAAA,UAAS,UACjCJ,GAAanB,EAAAA,EAAAA,YAAWoB,EAAAA,IAC9B,OACEf,EAAAA,EAAAA,MAAA,sBAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACEyD,QAASA,KAAQwS,EAAW,UAAWF,EAAW,OAAO,EACzDnV,UAAuB,WAAZoV,EAAuB,kBAAoB,GAAG9V,SAC1D,YAGDF,EAAAA,EAAAA,KAAA,OACEyD,QAASA,KAAQwS,EAAW,WAAYF,EAAW,OAAO,EAC1DnV,UAAuB,YAAZoV,EAAwB,kBAAoB,GAAG9V,SAC3D,aAGDF,EAAAA,EAAAA,KAAA,OACEyD,QAASA,KAAQwS,EAAW,WAAYF,EAAW,UAAU,EAC7DnV,UAAuB,YAAZkV,EAAwB,kBAAoB,GAAG5V,SAC3D,YAGY,YAAZ4V,IACC3V,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,OACEsD,QAASA,IAAMwS,EAAW,WAC1BrV,UAAuB,YAAZoV,EAAwB,kBAAoB,GAAG9V,SAAA,CAEzD,IAAI,cAEPC,EAAAA,EAAAA,MAAA,OACEsD,QAASA,IAAMwS,EAAW,SAC1BrV,UAAuB,UAAZoV,EAAsB,kBAAoB,GAAG9V,SAAA,CAEvD,IAAI,YAEPC,EAAAA,EAAAA,MAAA,OACEsD,QAASA,IAAMwS,EAAW,QAC1BrV,UAAuB,SAAZoV,EAAqB,kBAAoB,GAAG9V,SAAA,CAEtD,IAAI,cAIXF,EAAAA,EAAAA,KAAA,OACEyD,QAASA,KAAQwS,EAAW,UAAWF,EAAW,SAAS,EAC3DnV,UAAuB,WAAZkV,EAAuB,kBAAoB,GAAG5V,SAC1D,YAGY,WAAZ4V,IACC3V,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,OACEsD,QAASA,IAAMwS,EAAW,UAC1BrV,UAAuB,WAAZoV,EAAuB,kBAAoB,GAAG9V,SAAA,CAExD,IAAI,aAEPC,EAAAA,EAAAA,MAAA,OACEsD,QAASA,IAAMwS,EAAW,QAC1BrV,UAAuB,SAAZoV,EAAqB,kBAAoB,GAAG9V,SAAA,CAEtD,IAAI,WAEPC,EAAAA,EAAAA,MAAA,OACEsD,QAASA,IAAMwS,EAAW,OAC1BrV,UAAuB,QAAZoV,EAAoB,kBAAoB,GAAG9V,SAAA,CAErD,IAAI,UAEPC,EAAAA,EAAAA,MAAA,OACEsD,QAASA,IAAMwS,EAAW,UAC1BrV,UAAuB,WAAZoV,EAAuB,kBAAoB,GAAG9V,SAAA,CAExD,IAAI,gBAIXF,EAAAA,EAAAA,KAAA,OACEyD,QAASA,KAAOwS,EAAW,eAAgBF,EAAW,OAAO,EAC7DnV,UAAuB,gBAAZoV,EAA4B,kBAAoB,GAAG9V,SAC/D,qBAIHC,EAAAA,EAAAA,MAAA,QAAM+V,SAAW5V,GAAMA,EAAE6V,iBAAiBjW,SAAA,EACxCC,EAAAA,EAAAA,MAAA,OAAKS,UAAU,aAAYV,SAAA,CACI,aAA5Be,EAAWK,MAAMC,QAAwBvB,EAAAA,EAAAA,KAACoW,EAAAA,QAAQ,KAAMpW,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC5C,YAAZ+V,GAAwBhW,EAAAA,EAAAA,KAACW,EAAc,KAAMX,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACjC,YAAZ+V,GAAwBhW,EAAAA,EAAAA,KAACmR,EAAc,KAAMnR,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACjC,UAAZ+V,GAAsBhW,EAAAA,EAAAA,KAAC+S,EAAY,KAAM/S,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC7B,SAAZ+V,GAAqBhW,EAAAA,EAAAA,KAACiU,EAAW,KAAMjU,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC3B,WAAZ+V,GAAuBhW,EAAAA,EAAAA,KAAC2F,EAAa,KAAM3F,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC/B,SAAZ+V,GAAqBhW,EAAAA,EAAAA,KAAC+J,EAAW,KAAM/J,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC3B,QAAZ+V,GAAoBhW,EAAAA,EAAAA,KAACqM,EAAU,KAAMrM,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACzB,WAAZ+V,GAAuBhW,EAAAA,EAAAA,KAAC+M,EAAa,KAAM/M,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC/B,gBAAZ+V,GAA4BhW,EAAAA,EAAAA,KAACgV,EAAkB,KAAMhV,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,OAE3C,WAAZ+V,GAAuBhW,EAAAA,EAAAA,KAACJ,EAAM,KAAMI,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACxB,YAAZ+V,GAAwBhW,EAAAA,EAAAA,KAACgB,EAAO,KAAMhB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC1B,YAAZ+V,GAAwBhW,EAAAA,EAAAA,KAACmS,EAAO,KAAMnS,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC1B,UAAZ+V,GAAsBhW,EAAAA,EAAAA,KAACwT,EAAK,KAAMxT,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACtB,SAAZ+V,GAAqBhW,EAAAA,EAAAA,KAACmU,EAAI,KAAMnU,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACpB,WAAZ+V,GAAuBhW,EAAAA,EAAAA,KAACwG,EAAM,KAAMxG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACxB,QAAZ+V,GAAoBhW,EAAAA,EAAAA,KAACuM,EAAG,KAAMvM,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAClB,SAAZ+V,GAAqBhW,EAAAA,EAAAA,KAACsK,EAAI,KAAMtK,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACpB,WAAZ+V,GAAuBhW,EAAAA,EAAAA,KAAC4N,EAAM,KAAM5N,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACxB,gBAAZ+V,GAA4BhW,EAAAA,EAAAA,KAACwV,EAAW,KAAMxV,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,KAC/CD,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,cAIR,C,yVC1He,SAASoW,IACtB,MAAMnV,GAAanB,EAAAA,EAAAA,YAAWoB,EAAAA,IACxBmV,EAAQA,KACZ,MAAMC,GAAMC,EAAAA,EAAAA,UACNC,GAAKC,EAAAA,EAAAA,IAAUnV,GAAUA,EAAMkV,KAC/BE,GAAeC,EAAAA,EAAAA,GAAUC,EAAAA,cAAqBC,GACpDH,EAAaI,MAAQJ,EAAaK,MAAQH,EAAAA,eAC1C,MAAMI,GAAOC,EAAAA,EAAAA,UAAQ,IAAM,IAAIL,EAAAA,cAAoB,KAAM,OAAO,IAC1DM,GAASD,EAAAA,EAAAA,UACb,MACEE,aAAc,KACdC,cAAe,KACfV,eACAW,aAAc,IAAIT,EAAAA,QAClBU,SAAU,SACVC,WAAY,KACZC,gBAAiB,GACjBC,KAAK,EACLC,OAAQlB,EAAGmB,YAEb,CAACjB,IAKH,OAHAkB,EAAAA,EAAAA,IACE,CAACtW,EAAOuW,IAAWvB,EAAIwB,QAAQC,SAASC,SAASC,KAAK7X,OAASyX,KAE1D7X,EAAAA,EAAAA,KAAA,SAAOsW,IAAKA,EAAK4B,KAAM,CAAClB,EAAME,GAAS,cAAaiB,KAAKC,GAAK,GAAK,EAGtEC,EAASA,KACb,MAAM/B,GAAMC,EAAAA,EAAAA,UACN+B,GAAe3B,EAAAA,EAAAA,GAAUC,EAAAA,cAAqB2B,GACpDD,EAAaxB,MAAQwB,EAAavB,MAAQH,EAAAA,oBAC1C,MAAM4B,GAAc7B,EAAAA,EAAAA,GAAUC,EAAAA,cAAqB6B,GAGnD,OAFAD,EAAY1B,MAAQ0B,EAAYzB,MAAQH,EAAAA,eACxC4B,EAAYhV,OAAOkV,IAAI,IAAK,MACrB1Y,EAAAA,EAAAA,KAAC2Y,EAAAA,GAAK,CAACrC,IAAKA,EAAKhT,SAAU,CAAC,GAAI,GAAI,GAAI4U,KAAM,CAAC,KAAM,KAAM,IAAK,KAAM,cAAaC,KAAKC,GAAK,EAAElY,UACpGF,EAAAA,EAAAA,KAAA,wBACE8C,MAAM,QACN8V,UAAW,GACXC,UAAW,GACXnY,IAAK8X,EACLM,UAAWR,EACXS,YAAa,IAAInC,EAAAA,QAAc,GAAK,IACpCoC,gBAAiBV,EACjBW,kBAAmB,MACf,EAGV,OACE9Y,EAAAA,EAAAA,MAAC+Y,EAAAA,GAAM,CACLrY,MAAO,CACLyC,SAAU,WACVuC,IAAK,IACLC,KAAM,IACNhF,OAAQ,MAEVqY,IAAKC,OAAOC,iBACZC,OAAQ,CAAEhW,SAAU,CAAC,EAAG,GAAI,IAAKkC,KAAM,GAAItF,SAAA,CAE1Ce,EAAWK,MAAgB,SAAO,IAAEuD,WACnC7E,EAAAA,EAAAA,KAAA,OACEuZ,OAAO,MACPzW,MAAO7B,EAAWK,MAAgB,SAAO,IAAEwB,MAC3C0C,KAAMvE,EAAWK,MAAgB,SAAO,IAAEkE,KAC1CC,IAAKxE,EAAWK,MAAgB,SAAO,IAAEmE,OAE7CzF,EAAAA,EAAAA,KAACwZ,EAAAA,EAAa,CAAChZ,OAAQ,CAAC,EAAG,GAAI,MAC/BR,EAAAA,EAAAA,KAACyZ,EAAAA,SAAQ,CAACC,SAAU,KAAKxZ,SACtBe,EAAWK,MAAgB,SAAO,IAAEuD,WACnC7E,EAAAA,EAAAA,KAAC2Z,EAAAA,EAAG,CACFC,SAAU,KACV1U,YAAajE,EAAWK,MAAgB,SAAO,IAAE4D,YACjDC,QAASlE,EAAWK,MAAgB,SAAO,IAAE6D,QAC7C0U,SAAU5Y,EAAWK,MAAgB,SAAO,IAAE+D,UAC9CD,UAAWnE,EAAWK,MAAgB,SAAO,IAAE8D,UAC/C0U,SAAU7Y,EAAWK,MAAgB,SAAO,IAAEwY,cAGpD9Z,EAAAA,EAAAA,KAACyZ,EAAAA,SAAQ,CAACC,SAAU,KAAKxZ,SACtBe,EAAWK,MAAgB,SAAS,MAAEuD,WACrC7E,EAAAA,EAAAA,KAAC+Z,EAAAA,EAAK,CACJC,OAAQ,IACRzU,MAAOtE,EAAWK,MAAgB,SAAS,MAAEiE,UAGlDtE,EAAWK,MAAgB,SAAoB,iBAAEuD,WAChD7E,EAAAA,EAAAA,KAAA,cACE8C,MAAO7B,EAAWK,MAAgB,SAAoB,iBAAEwB,MACxDwC,UAAWrE,EAAWK,MAAgB,SAAoB,iBAAEgE,UAC5DhC,SAAU,CAAC,EAAG,KAAQ,QAEzBrC,EAAWK,MAAgB,SAAgB,aAAEuD,WAC5C7E,EAAAA,EAAAA,KAAA,gBACEsF,UAAWrE,EAAWK,MAAgB,SAAgB,aAAEgE,UACxDxC,MAAO7B,EAAWK,MAAgB,SAAgB,aAAEwB,SAExD9C,EAAAA,EAAAA,KAACyZ,EAAAA,SAAQ,CAACC,SAAU,KAAKxZ,SACtBe,EAAWK,MAAgB,SAAS,MAAEuD,WAAY7E,EAAAA,EAAAA,KAACqW,EAAK,OAE3DrW,EAAAA,EAAAA,KAACyZ,EAAAA,SAAQ,CAACC,SAAU,KAAKxZ,SACtBe,EAAWK,MAAgB,SAAU,OAAEuD,WAAY7E,EAAAA,EAAAA,KAACqY,EAAM,QAInE,EA1GA4B,EAAAA,EAAAA,GAAO,CAAEC,MAAM,K,0DCXA,SAASC,EAASC,GAC7B,IAAIC,EAAID,EAAI,GACRE,EAAIF,EAAI,GACRG,EAAIH,EAAI,GACZC,GAAK,IACLC,GAAK,IACLC,GAAK,IACL,IAAIC,EAAOrC,KAAKpT,IAAIsV,EAAGC,EAAGC,GACtBE,EAAOtC,KAAKnT,IAAIqV,EAAGC,EAAGC,GACtB1C,EAAQ4C,EAAOD,EACfE,EAAI,EACJC,EAAI,EACJC,GAAMH,EAAOD,GAAQ,EAyBzB,OAxBc,IAAV3C,GACA8C,EAAI,EACJD,EAAI,IAGAC,EADAC,GAAK,GACD/C,GAAS4C,EAAOD,GAEhB3C,GAAS,EAAI4C,EAAKD,GAEtBC,IAASJ,EACTK,GAAKJ,EAAIC,GAAK1C,EACP4C,IAASH,EAChBI,GAAMH,EAAIF,GAAKxC,EAAS,EAClB4C,IAASF,IACfG,GAAML,EAAIC,GAAKzC,EAAS,IAGhC6C,EAAIvC,KAAK0C,MAAU,GAAJH,GACXA,EAAI,IACJA,GAAK,KAETC,EAAIxC,KAAK2C,IAAQ,IAAJH,GAASI,QAAQ,GAC9BH,GAAS,IAAJA,GAAUG,QAAQ,GACb,CAACL,EAAGC,EAAI,IAAKC,EAAI,IAE/B,CCtCe,SAASI,EAAWC,GAC/B,IAAIZ,EAAIY,EAAK,GACTX,EAAIW,EAAK,GACTV,EAAIU,EAAK,GACTC,EAAID,EAAK,GACLZ,EAAIc,SAASF,EAAK,GAAI,IACtBX,EAAIa,SAASF,EAAK,GAAI,IACtBV,EAAIY,SAASF,EAAK,GAAI,IACtBC,EAAIC,SAASF,EAAK,GAAI,IAC1BZ,GAAK,IACLC,GAAK,IACLC,GAAK,IACL,IAAIC,EAAOrC,KAAKpT,IAAIsV,EAAGC,EAAGC,GACtBE,EAAOtC,KAAKnT,IAAIqV,EAAGC,EAAGC,GACtB1C,EAAQ4C,EAAOD,EACfE,EAAI,EACJC,EAAI,EACJC,GAAMH,EAAOD,GAAQ,EAyBzB,OAxBc,IAAV3C,GACA8C,EAAI,EACJD,EAAI,IAGAC,EADAC,GAAK,GACD/C,GAAS4C,EAAOD,GAEhB3C,GAAS,EAAI4C,EAAKD,GAEtBC,IAASJ,EACTK,GAAKJ,EAAIC,GAAK1C,EACP4C,IAASH,EAChBI,GAAMH,EAAIF,GAAKxC,EAAS,EAClB4C,IAASF,IACfG,GAAML,EAAIC,GAAKzC,EAAS,IAGhC6C,EAAIvC,KAAK0C,MAAU,GAAJH,GACXA,EAAI,IACJA,GAAK,KAETC,EAAIxC,KAAK2C,IAAQ,IAAJH,GAASI,QAAQ,GAC9BH,GAAS,IAAJA,GAAUG,QAAQ,GACZ,CAACL,EAAGC,EAAI,IAAKC,EAAI,IAAKM,EAErC,C,qBCrBW,SAASvX,EAAWyX,GAAiC,IAAhC,MAAEtY,EAAK,SAAEc,EAAQ,SAAEC,GAAUuX,EAC7D,MAAMC,GAAiB9E,EAAAA,EAAAA,QAAO,MACxB+E,GAAY/E,EAAAA,EAAAA,QAAO,MACnBgF,GAAgBhF,EAAAA,EAAAA,QAAO,MACvBiF,GAAWjF,EAAAA,EAAAA,QAAO,OACjBkF,EAAkBC,IAAuBra,EAAAA,EAAAA,UAAS,CAAEsa,EAAG,EAAGC,EAAG,KAC7DC,EAAqBC,IAA0Bza,EAAAA,EAAAA,UAAS,IACxD0a,EAAgBC,IAAqB3a,EAAAA,EAAAA,UAAS,IAC9C4a,EAAMC,IAAW7a,EAAAA,EAAAA,WAAS,IAC1B8a,EAAKC,IAAU/a,EAAAA,EAAAA,UAAS,IACxBgb,EAAWC,IAAgBjb,EAAAA,EAAAA,UAAS,KACpCkb,EAAYC,IAAiBnb,EAAAA,EAAAA,UAAS,MACtCyL,EAAO2P,IAAYpb,EAAAA,EAAAA,UAAS,MAGnCU,EAAAA,EAAAA,YAAU,KACFka,GACAZ,EAAevD,QAAQ4E,OAC3B,GACD,CAACT,KAUJla,EAAAA,EAAAA,YAAU,KACN,GAAIe,EACA,GAAIe,EAAU,CACV,IAAI8Y,EAAY,GAChB,GAAiB,MAAb7Z,EAAM,GACN6Z,EAAY3B,ECxDjB,SAAmB4B,GAC9B,IAAIpY,EAYA,OAXe,IAAfoY,EAAIC,OAEY,IADhBrY,EAAS,wDAAwDsY,KAAKF,IAC5D,KACNpY,EAAO,GAAK,MAEK,IAAfoY,EAAIC,OACVrY,EAAS,wDAAwDsY,KAAKF,GAClD,IAAfA,EAAIC,UACTrY,EAAS,4CAA4CsY,KAAKF,IACnD,GAAK,MAELpY,EACD,CACE2W,SAAS3W,EAAO,GAAI,IACpB2W,SAAS3W,EAAO,GAAI,IACpB2W,SAAS3W,EAAO,GAAI,IACpB2W,SAAS3W,EAAO,GAAI,IAAM,KAE5B,IACd,CDmC2CuY,CAAUja,SAC9B,GAA0B,SAAtBA,EAAMH,MAAM,EAAG,GACtBga,EAAY3B,EAAWlY,QACpB,GAA0B,SAAtBA,EAAMH,MAAM,EAAG,GACtB,IAAK,IAAIqa,EAAI,EAAGA,EAAIla,EAAM+Z,OAAQG,IAAK,CAGlB,MAAbla,EAAMka,GACNC,EAAQD,EAAI,EACQ,MAAbla,EAAMka,IACbE,EAAMF,EACNL,EAAUQ,KAAKra,EAAMH,MAAMsa,EAAOC,KACd,MAAbpa,EAAMka,KACbL,EAAUQ,KAAKra,EAAMH,MAAMsa,EAAOD,IAClCC,EAAQD,EAAI,EAEpB,CAMJ,GAJAZ,EAAO1W,OAAOiX,EAAU,KACxBH,EAAc9W,OAAOiX,EAAU,GAAGha,MAAM,EAAGga,EAAU,GAAGE,OAAS,KACjEP,EAAa5W,OAAOiX,EAAU,GAAGha,MAAM,EAAGga,EAAU,GAAGE,OAAS,KAChEJ,EAAS/W,OAAOiX,EAAU,KACtBV,EAAM,CACN,MAAMmB,EAAa9B,EAAUxD,QAAQuF,wBACrC3B,EAAoB,CAChBC,EAAGgB,EAAU,GAAK,IAAMS,EAAWrX,MACnC6V,GAAI,IAAMe,EAAU,GAAGha,MAAM,EAAGga,EAAU,GAAGE,OAAS,IAAM,IAAMO,EAAWpX,SAEjF,MAAMsX,EAAiB/B,EAAczD,QAAQuF,wBAC7CvB,GAAyB,IAAMa,EAAU,GAAGha,MAAM,EAAGga,EAAU,GAAGE,OAAS,IAAM,IAAOS,EAAetX,QACvG,MAAMuX,EAAY/B,EAAS1D,QAAQuF,wBACnCrB,EAAkBW,EAAU,GAAKY,EAAUxX,MAC/C,CACJ,KAAO,CACH,IAAIyX,EAAW,GACf,GAAiB,MAAb1a,EAAM,GACN0a,EAAWrD,EE5FhB,SAAkByC,GAC7B,IAAIpY,EAMJ,OAJIA,EADc,IAAfoY,EAAIC,OACM,4CAA4CC,KAAKF,GAEjD,4CAA4CE,KAAKF,IAGxD,CACKzB,SAAS3W,EAAO,GAAI,IACpB2W,SAAS3W,EAAO,GAAI,IACpB2W,SAAS3W,EAAO,GAAI,KAEzB,IACV,CF8EwCiZ,CAAS3a,SAC1B,GAA0B,QAAtBA,EAAMH,MAAM,EAAG,GACtB6a,EAAWrD,EAASrX,QACjB,GAA0B,QAAtBA,EAAMH,MAAM,EAAG,GACtB,IAAK,IAAIqa,EAAI,EAAGA,EAAIla,EAAM+Z,OAAQG,IAAK,CACnC,IAAIC,EACAC,EACa,MAAbpa,EAAMka,GACNC,EAAQD,EAAI,EACQ,MAAbla,EAAMka,IACbE,EAAMF,EACNQ,EAASL,KAAKra,EAAMH,MAAMsa,EAAOC,KACb,MAAbpa,EAAMka,KACbQ,EAASL,KAAKra,EAAMH,MAAMsa,EAAOD,IACjCC,EAAQD,EAAI,EAEpB,MAEAQ,EG9GL,SAAmBrT,GAC9B,OAAOA,GACH,IAAK,MAuCL,IAAK,SACD,MAAO,CAAC,EAAG,OAAQ,OAtCvB,IAAK,QA+BL,IAAK,OACD,MAAO,CAAC,IAAK,OAAQ,OA9BzB,IAAK,OAiCL,IAAK,OAIL,IAAK,OACD,MAAO,CAAC,IAAK,OAAQ,OApCzB,IAAK,SAqCL,IAAK,QACD,MAAO,CAAC,GAAI,OAAQ,OApCxB,IAAK,OA2BL,IAAK,OACD,MAAO,CAAC,IAAK,OAAQ,OA1BzB,IAAK,UACD,MAAO,CAAC,IAAK,OAAQ,OACzB,IAAK,QAiCL,QACI,MAAO,CAAC,EAAG,KAAM,MAhCrB,IAAK,QACD,MAAO,CAAC,EAAG,KAAM,QACrB,IAAK,OACL,IAAK,OACD,MAAO,CAAC,EAAG,KAAM,OACrB,IAAK,YACL,IAAK,YACD,MAAO,CAAC,EAAG,KAAM,OACrB,IAAK,WACL,IAAK,WACD,MAAO,CAAC,EAAG,KAAM,OACrB,IAAK,QACD,MAAO,CAAC,GAAI,MAAO,OACvB,IAAK,SACD,MAAO,CAAC,GAAI,OAAQ,OACxB,IAAK,SACD,MAAO,CAAC,IAAK,OAAQ,OACzB,IAAK,OACD,MAAO,CAAC,IAAK,OAAQ,OAgBjC,CH4D+BuT,CAAU5a,GAKzB,GAHAsZ,EAAO1W,OAAO8X,EAAS,KACvBhB,EAAc9W,OAAO8X,EAAS,GAAG7a,MAAM,EAAG6a,EAAS,GAAGX,OAAS,KAC/DP,EAAa5W,OAAO8X,EAAS,GAAG7a,MAAM,EAAG6a,EAAS,GAAGX,OAAS,KAC1DZ,EAAM,CACN,MAAMmB,EAAa9B,EAAUxD,QAAQuF,wBACrC3B,EAAoB,CAChBC,EAAG6B,EAAS,GAAK,IAAMJ,EAAWrX,MAClC6V,GAAI,IAAM4B,EAAS,GAAG7a,MAAM,EAAG6a,EAAS,GAAGX,OAAS,IAAM,IAAMO,EAAWpX,SAE/E,MAAMsX,EAAiB/B,EAAczD,QAAQuF,wBAC7CvB,GAAyB,IAAM0B,EAAS,GAAG7a,MAAM,EAAG6a,EAAS,GAAGX,OAAS,IAAM,IAAOS,EAAetX,OACzG,CACJ,CACJ,GACD,CAACiW,EAAMnZ,EAAOe,KAgBjB9B,EAAAA,EAAAA,YAAU,KACN,GAAIuZ,EAAUxD,QAAS,CAdL6F,KAClBA,EAAIC,UAAU,EAAG,EAAGD,EAAIE,OAAO9X,MAAO4X,EAAIE,OAAO7X,QACjD,IAAI8X,EAAaH,EAAIE,OAAO9X,MAAQ,IAChCgY,EAAcJ,EAAIE,OAAO7X,OAAS,IACtC,IAAK,IAAIgX,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAIgB,EAAI,EAAGA,EAAI,IAAKA,IACrBL,EAAIM,UAAY,OAAOjB,KAAKT,MAAe,IAAMyB,MACjDL,EAAIO,SAASlB,EAAIc,EAAYE,EAAID,GAAcf,EAAI,GAAKc,GAAaE,EAAI,GAAKD,EAEtF,EAOII,CADuB7C,EAAUxD,QAAQsG,WAAW,KAAM,CAAEtR,OAAO,IAEvE,IAED,CAACmP,EAAMM,IAGV,MAAM8B,EAAmBC,IACrB,GAAsB,IAAlBA,EAAMC,QAAe,CACrB,MAAMC,EAAOlD,EAAUxD,QAAQuF,wBAC/B,IAAI1B,EAAI2C,EAAMG,QAAUD,EAAK1Y,KACzB8V,EAAI0C,EAAMI,QAAUF,EAAK3Y,IACzB8V,GAAK,GAAKA,GAAK6C,EAAKzY,OAAS6V,GAAK,GAAKA,GAAK4C,EAAKxY,SACjD0V,EAAoB,CAAEC,IAAGC,MACzBQ,EAAOjE,KAAKwG,MAAM,IAAMhD,EAAI6C,EAAKzY,QACjCuW,EAAa,IAAMnE,KAAKwG,MAAM,IAAM/C,EAAI4C,EAAKxY,SAErD,GAEE4Y,EAAkBN,IACpB,GAA6B,IAAzBA,EAAMO,QAAQhC,OAAc,CAC5B,MAAM2B,EAAOlD,EAAUxD,QAAQuF,wBAC/B,IAAI1B,EAAI2C,EAAMO,QAAQ,GAAGJ,QAAUD,EAAK1Y,KACpC8V,EAAI0C,EAAMO,QAAQ,GAAGH,QAAUF,EAAK3Y,IACpC8V,GAAK,GAAKA,GAAK6C,EAAKzY,OAAS6V,GAAK,GAAKA,GAAK4C,EAAKxY,SACjD0V,EAAoB,CAAEC,IAAGC,MACzBQ,EAAOjE,KAAKwG,MAAM,IAAMhD,EAAI6C,EAAKzY,QACjCuW,EAAa,IAAMnE,KAAKwG,MAAM,IAAM/C,EAAI4C,EAAKxY,SAErD,GAIE8Y,EAA0BR,IAC5B,GAAsB,IAAlBA,EAAMC,QAAe,CACrB,MAAMC,EAAOjD,EAAczD,QAAQuF,wBACnC,IAAI1B,EAAI2C,EAAMG,QAAUD,EAAK1Y,KACzB8V,EAAI0C,EAAMI,QAAUF,EAAK3Y,IACzB8V,GAAK,GAAKA,GAAK6C,EAAKzY,OAAS6V,GAAK,GAAKA,GAAK4C,EAAKxY,SACjDwW,EAAc,IAAMrE,KAAKwG,MAAM,IAAM/C,EAAI4C,EAAKxY,SAC9C8V,EAAuBF,GAE/B,GAEEmD,EAAyBT,IAC3B,GAA6B,IAAzBA,EAAMO,QAAQhC,OAAc,CAC5B,MAAM2B,EAAOjD,EAAczD,QAAQuF,wBACnC,IAAI1B,EAAI2C,EAAMO,QAAQ,GAAGJ,QAAUD,EAAK1Y,KACpC8V,EAAI0C,EAAMO,QAAQ,GAAGH,QAAUF,EAAK3Y,IACpC8V,GAAK,GAAKA,GAAK6C,EAAKzY,OAAS6V,GAAK,GAAKA,GAAK4C,EAAKxY,SACjDwW,EAAc,IAAMrE,KAAKwG,MAAM,IAAM/C,EAAI4C,EAAKxY,SAC9C8V,EAAuBF,GAE/B,GAIEoD,EAAqBV,IACvB,GAAsB,IAAlBA,EAAMC,QAAe,CACrB,MAAMC,EAAOhD,EAAS1D,QAAQuF,wBAC9B,IAAI1B,EAAI2C,EAAMG,QAAUD,EAAK1Y,KACzB8V,EAAI0C,EAAMI,QAAUF,EAAK3Y,IACzB8V,GAAK,GAAKA,GAAK6C,EAAKzY,OAAS6V,GAAK,GAAKA,GAAK4C,EAAKxY,SACjDyW,EAAUtE,KAAKwG,MAAM,IAAMhD,EAAI6C,EAAKzY,OAAU,KAC9CiW,EAAkBL,GAE1B,GAEEsD,EAAoBX,IACtB,GAA6B,IAAzBA,EAAMO,QAAQhC,OAAc,CAC5B,MAAM2B,EAAOhD,EAAS1D,QAAQuF,wBAC9B,IAAI1B,EAAI2C,EAAMO,QAAQ,GAAGJ,QAAUD,EAAK1Y,KACpC8V,EAAI0C,EAAMO,QAAQ,GAAGH,QAAUF,EAAK3Y,IACpC8V,GAAK,GAAKA,GAAK6C,EAAKzY,OAAS6V,GAAK,GAAKA,GAAK4C,EAAKxY,SACjDyW,EAAUtE,KAAKwG,MAAM,IAAMhD,EAAI6C,EAAKzY,OAAU,KAC9CiW,EAAkBL,GAE1B,GA4BJ,OACIxb,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,uBAAqByD,QAASA,IAAMyY,GAASD,GAAM/b,UAC/CF,EAAAA,EAAAA,KAAA,OAAAE,UACIF,EAAAA,EAAAA,KAAA,UAAQa,MAAO,CAAEI,WAAY6B,SAGpCmZ,IAAQiD,EAAAA,EAAAA,eACL/e,EAAAA,EAAAA,MAAA,uBACIgf,SAAS,IACT7I,IAAK+E,EACL+D,OAAS9e,IAxNLge,SAwNsBhe,GAvN3B+e,cAAcC,SAAShB,EAAMiB,gBACpCrD,GAAQ,EAsN6B,EAAAhc,SAAA,EAE7BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,iBAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UACIwf,YAAclf,GAAM+d,EAAgB/d,GACpCmf,YAAcnf,GAAM+d,EAAgB/d,GACpCof,YAAcpf,GAAMse,EAAete,GACnCqf,aAAerf,GAAMse,EAAete,GACpCsf,WAAatf,GAAMse,EAAete,GAClCgW,IAAKgF,EAAWvV,MAAM,MAAMC,OAAO,MACnCnF,MAAO,CAAEgf,QAAShc,EAAWiJ,EAAQ,MAEzC9M,EAAAA,EAAAA,KAAA,gBACIa,MAAO,CACHgF,IAAK4V,EAAiBG,EACtB9V,KAAM2V,EAAiBE,EACvB1a,WACI4C,EACI,QAAQsY,KAAOI,MAAeF,OAAevP,KAC7C,OAAOqP,KAAOI,MAAeF,OAEzCmD,YAAclf,GAAM+d,EAAgB/d,GACpCmf,YAAcnf,GAAM+d,EAAgB/d,GACpCof,YAAcpf,GAAMse,EAAete,GACnCqf,aAAerf,GAAMse,EAAete,GACpCsf,WAAatf,GAAMse,EAAete,SAG1CH,EAAAA,EAAAA,MAAA,qBAAmB2f,MAAM,aAAY5f,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OACIsW,IAAKiF,EACL1a,MAAO,CACHI,WACI,6BAA6Bkb,QAAUE,aAAqBF,UAAYE,QAEhFmD,YAAclf,GAAMwe,EAAuBxe,GAC3Cmf,YAAcnf,GAAMwe,EAAuBxe,GAC3Cof,YAAcpf,GAAMye,EAAsBze,GAC1Cqf,aAAerf,GAAMye,EAAsBze,GAC3Csf,WAAatf,GAAMye,EAAsBze,MAE7CN,EAAAA,EAAAA,KAAA,gBACIa,MAAO,CACHgF,IAAKgW,EACL5a,WAAY,QAAQkb,KAAOI,MAAeF,OAAevP,MAE7D0S,YAAclf,GAAMwe,EAAuBxe,GAC3Cmf,YAAcnf,GAAMwe,EAAuBxe,GAC3Cof,YAAcpf,GAAMye,EAAsBze,GAC1Cqf,aAAerf,GAAMye,EAAsBze,GAC3Csf,WAAatf,GAAMye,EAAsBze,WAIpDuD,IACG1D,EAAAA,EAAAA,MAAA,gBAAc2f,MAAM,QAAO5f,SAAA,EACvBF,EAAAA,EAAAA,KAAA,OACIsW,IAAKkF,EACL3a,MAAO,CACHI,WACI,+BAA+Bkb,KAAOI,MAAeF,gBAAwBF,KAAOI,MAAeF,WAE3GmD,YAAclf,GAAM0e,EAAkB1e,GACtCmf,YAAcnf,GAAM0e,EAAkB1e,GACtCof,YAAcpf,GAAM2e,EAAiB3e,GACrCqf,aAAerf,GAAM2e,EAAiB3e,GACtCsf,WAAatf,GAAM2e,EAAiB3e,MAExCN,EAAAA,EAAAA,KAAA,gBACIa,MAAO,CACHiF,KAAMiW,EACN9a,WAAY,OAAOkb,KAAOI,MAAeF,OAAevP,MAE5D0S,YAAclf,GAAM0e,EAAkB1e,GACtCmf,YAAcnf,GAAM0e,EAAkB1e,GACtCof,YAAcpf,GAAM2e,EAAiB3e,GACrCqf,aAAerf,GAAM2e,EAAiB3e,GACtCsf,WAAatf,GAAM2e,EAAiB3e,SAIhDH,EAAAA,EAAAA,MAAA,gBAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,OAEDF,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,SAASgC,IAAI,IAAIC,IAAI,MAAM5E,MAAO+b,EAC1C9b,SAAWC,GAzHfF,KACpBgc,EAAOhc,GACP,MAAMoe,EAAOlD,EAAUxD,QAAQuF,wBAC/B3B,EAAoB,IAAKD,EAAkBE,EAAGvb,EAAQ,IAAMoe,EAAKzY,OAAQ,EAsHhCga,CAAezf,EAAEE,OAAOJ,aAEjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,QAEDF,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,SAASgC,IAAI,IAAIC,IAAI,MAAM5E,MAAOic,EAC1Chc,SAAWC,GAxHfF,KACpBkc,EAAalc,GACb,MAAMoe,EAAOlD,EAAUxD,QAAQuF,wBAC/B3B,EAAoB,IAAKD,EAAkBG,GAAI,IAAMxb,GAAS,IAAMoe,EAAKxY,QAAS,EAqHzCga,CAAe1f,EAAEE,OAAOJ,aAEjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,QAEDF,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,SAASgC,IAAI,IAAIC,IAAI,MAAM5E,MAAOmc,EAC1Clc,SAAWC,GAvHRF,KAC3Boc,EAAcpc,GACd,MAAMoe,EAAOjD,EAAczD,QAAQuF,wBACnCvB,GAAyB,IAAM1b,GAAS,IAAOoe,EAAKxY,OAAO,EAoHlBia,CAAsB3f,EAAEE,OAAOJ,YAEvDyD,IACG1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,SAEDF,EAAAA,EAAAA,KAAA,SAAO+C,KAAK,SAASgC,IAAI,IAAIC,IAAI,IAAIC,KAAK,OAAO7E,MAAO0M,EACpDzM,SAAWC,GAvHjBF,KACtBqc,EAASrc,GACT,MAAMoe,EAAOhD,EAAS1D,QAAQuF,wBAC9BrB,EAAkB5b,EAAQoe,EAAKzY,MAAM,EAoHQma,CAAiB5f,EAAEE,OAAOJ,gBAI3DJ,EAAAA,EAAAA,KAAA,gBAAAE,UACIF,EAAAA,EAAAA,KAAA,UACIa,MAAO,CACHI,WAAY4C,EAAW,QAAQsY,KAAOI,MAAeF,OAAevP,KAAW,OAAOqP,KAAOI,MAAeF,OAEhH5Y,QAASA,KAAmBG,EAAXC,EAAoB,QAAQsY,KAAOI,MAAeF,OAAevP,KAAqB,OAAOqP,KAAOI,MAAeF,MAAc,EAAGnc,SACxJ,eAKPuB,SAAS0e,eAAe,WAG1C,C","sources":["Apps/Definitions/Pages/Global.jsx","Apps/Definitions/Pages/Desktop.jsx","Apps/Definitions/Pages/Windows/Window.jsx","Apps/Definitions/Pages/Windows/Menu.jsx","Apps/Definitions/Pages/Windows/App.jsx","Apps/Definitions/Pages/Windows/Dialog.jsx","Apps/Definitions/Pages/Taskbar/TaskBar.jsx","Apps/Definitions/Pages/Taskbar/Start.jsx","Apps/Definitions/Pages/Taskbar/Tray.jsx","Apps/Definitions/Pages/ContextMenu.jsx","Apps/Definitions/index.jsx","System/Desktop/Scenario.jsx","System/GlobalComponents/ColorPicker/Converters/rgbToHsl.js","System/GlobalComponents/ColorPicker/Converters/rgbaToHsla.js","System/GlobalComponents/ColorPicker/ColorPicker.jsx","System/GlobalComponents/ColorPicker/Converters/hexToRgba.js","System/GlobalComponents/ColorPicker/Converters/hexToRgb.js","System/GlobalComponents/ColorPicker/Converters/nameToHsl.js"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"./../../../System/ThemeManager/context.jsx\";\r\n\r\nexport const Global = () => {\r\n    const theme = useContext(ThemeContext);\r\n    /*\r\n    To be moved outside of the component, due to interfering with theme change\r\n    const fontFamilyList = [\r\n    \"Arial\",\r\n    \"Times New Roman\",\r\n    \"Monospace\",\r\n    \"Verdana\",\r\n    \"Georgia\",\r\n    \"Courier New\",\r\n    \"Tahoma\",\r\n    \"Garamond\",\r\n    \"Trebuchet MS\",\r\n    \"Impact\",\r\n    \"Helvetica\",\r\n    \"Arial Black\",\r\n    \"Comic Sans MS\",\r\n    \"Lucida Console\",\r\n    \"Lucida Sans Unicode\",\r\n    \"Lucida Sans\",\r\n    \"Palatino Linotype\",\r\n    \"Book Antiqua\",\r\n    \"Arial Narrow\",\r\n    \"Arial Rounded MT Bold\",\r\n    \"Brush Script MT\",\r\n    \"Century Gothic\",\r\n    \"Century Schoolbook\"\r\n];\r\n    const [fontFamily, setFontFamily] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--GeneralFontFamily\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--GeneralFontFamily\", fontFamily);\r\n    }, [fontFamily]);\r\n    \r\n            <fieldset>\r\n                <legend>Font Family:</legend>\r\n                <select\r\n                    value={fontFamily}\r\n                    onChange={(e) => setFontFamily(e.target.value)}\r\n                >\r\n                    {fontFamilyList.sort().map((font) => (\r\n                        <option key={font} style={{ fontFamily: font }}>\r\n                            {font}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </fieldset>\r\n    */\r\n    \r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Theme:</legend>\r\n                <select\r\n                    value={theme.theme}\r\n                    onChange={(e) => theme.setTheme(e.target.value)}\r\n                >\r\n                    {theme.themeList.map((theme) => (\r\n                        <option key={theme}>{theme}</option>\r\n                    ))}\r\n                </select>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { BackgroundContext } from \"../../../System/Desktop/BackgroundContext.js\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const DesktopPreview = () => {\r\n  return (\r\n    <>\r\n      <div className=\"desktopShortcut\" style={{ zIndex: 1 }}>\r\n        <FcGlobe className=\"desktopIcon\" />\r\n        Shortcut\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Desktop = () => {\r\n  const background = useContext(BackgroundContext);\r\n  const [backgroundMenu, setBackgroundMenu] = useState(background.state.active);\r\n  var root = document.querySelector(\":root\");\r\n\r\n  const [desktopBkgrColor, setDesktopBkgrColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrColor\", desktopBkgrColor);\r\n  },[desktopBkgrColor]);\r\n    //----------------------------------------------------------------------------//\r\n  const [desktopBkgrImage, setDesktopBkgrImage] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrImage\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrImage\", desktopBkgrImage);\r\n  },[desktopBkgrImage]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrSize, setDesktopBkgrSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrSize\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrSize\", desktopBkgrSize);\r\n  },[desktopBkgrSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrPosition, setDesktopBkgrPosition] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrPosition\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrPosition\", desktopBkgrPosition);\r\n  },[desktopBkgrPosition]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrRepeat, setDesktopBkgrRepeat] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrRepeat\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrRepeat\", desktopBkgrRepeat);\r\n  },[desktopBkgrRepeat]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopFontSize, setDesktopFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopFontSize\", desktopFontSize + \"px\");\r\n  },[desktopFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopIconSize, setDesktopIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopIconSize\", desktopIconSize + \"px\");\r\n  },[desktopIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n\r\n  //Upload Image\r\n  const uploadImage = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = (readerEvent) => {\r\n      background.setImage(\r\n        readerEvent.target.result,\r\n        background.state.image.position,\r\n        background.state.image.size,\r\n        background.state.image.repeat);\r\n    }\r\n  };\r\n\r\n  //Update background context\r\n  useEffect(() => {\r\n    if (background.state.active === \"color\") {\r\n      if (background.state.color.type === \"color\") {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(\"none\");\r\n      } else if (background.state.color.type === \"gradient\") {\r\n        if (background.state.color.gradient.type === \"linear\") {\r\n          setDesktopBkgrColor(`linear-gradient(${background.state.color.gradient.degree}deg, ${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        } else if (background.state.color.gradient.type === \"radial\") {\r\n          setDesktopBkgrColor(`radial-gradient(${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        }\r\n      }\r\n    } else if (background.state.active === \"image\") {\r\n      if (background.state.image.url) {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(`url(${background.state.image.url})`);\r\n        setDesktopBkgrPosition(background.state.image.position);\r\n        setDesktopBkgrSize(background.state.image.size);\r\n        setDesktopBkgrRepeat(background.state.image.repeat);\r\n      }\r\n    }\r\n  }, [background.state]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Background:\r\n          <div>\r\n            <select value={backgroundMenu} onChange={(e) => setBackgroundMenu(e.target.value)}>\r\n              <option value=\"color\">Color</option>\r\n              <option value=\"image\">Image</option>\r\n              <option value=\"scenario\">3D Scenario</option>\r\n            </select>\r\n          </div></legend>\r\n        {backgroundMenu === \"color\" ? (\r\n          <>\r\n            <div\r\n              className={\r\n                background.state.active === \"color\"\r\n                  ? \"defMenuButton defMenuButtonON\"\r\n                  : \"defMenuButton\"\r\n              }\r\n              onClick={() => background.setActive(\"color\")}\r\n            >\r\n              Use Simple Color\r\n            </div>\r\n            <label>Set Background Color: </label>\r\n            <ColorPicker\r\n              color={desktopBkgrColor}\r\n              setColor={setDesktopBkgrColor}\r\n              useAlpha={false}\r\n            />\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"image\" ? (\r\n          <>\r\n            <div\r\n              className={\r\n                background.state.active === \"image\"\r\n                  ? \"defMenuButton defMenuButtonON\"\r\n                  : \"defMenuButton\"\r\n              }\r\n              onClick={() => background.setActive(\"image\")}\r\n            >\r\n              Use Image\r\n            </div>\r\n            <label htmlFor=\"imageUpload\">Upload Image: </label>\r\n            <input\r\n              id=\"imageUpload\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={(e) => { uploadImage(e.target.files[0]) }} />\r\n            <label htmlFor=\"imagePosition\">Position: </label>\r\n            <select id=\"imagePosition\"\r\n              value={background.state.image.position}\r\n              onChange={(e) => {\r\n                background.setImage(\r\n                  background.state.image.file,\r\n                  e.target.value,\r\n                  background.state.image.size,\r\n                  background.state.image.repeat\r\n                );\r\n                setDesktopBkgrPosition(e.target.value);\r\n              }}>\r\n              <option value=\"top\">Top</option>\r\n              <option value=\"left top\">Top Left</option>\r\n              <option value=\"right top\">Top Right</option>\r\n              <option value=\"center\">Center</option>\r\n              <option value=\"bottom\">Bottom</option>\r\n              <option value=\"left bottom\">Bottom Left</option>\r\n              <option value=\"right bottom\">Bottom Right</option>\r\n              <option value=\"left\">Left</option>\r\n              <option value=\"right\">Right</option>\r\n            </select>\r\n            <label htmlFor=\"imageSize\">Size: </label>\r\n            <select id=\"imageSize\"\r\n              value={background.state.image.size}\r\n              onChange={(e) => {\r\n                background.setImage(\r\n                  background.state.image.file,\r\n                  background.state.image.position,\r\n                  e.target.value,\r\n                  background.state.image.repeat\r\n                );\r\n                setDesktopBkgrSize(e.target.value);\r\n              }}>\r\n              <option value=\"auto\">Auto</option>\r\n              <option value=\"contain\">Contain</option>\r\n              <option value=\"cover\">Cover</option>\r\n              <option value=\"100vw 100vh\">Stretch</option>\r\n            </select>\r\n            <label htmlFor=\"imageRepeat\">Repeat: </label>\r\n            <select id=\"imageRepeat\"\r\n              value={background.state.image.repeat}\r\n              onChange={(e) => {\r\n                background.setImage(\r\n                  background.state.image.file,\r\n                  background.state.image.position,\r\n                  background.state.image.size,\r\n                  e.target.value\r\n                );\r\n                setDesktopBkgrRepeat(e.target.value);\r\n              }}\r\n            >\r\n              <option value=\"no-repeat\">No Repeat</option>\r\n              <option value=\"repeat\">Repeat</option>\r\n              <option value=\"repeat-x\">Repeat X</option>\r\n              <option value=\"repeat-y\">Repeat Y</option>\r\n            </select>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"Shader\" ? <></> : <></>}\r\n        {backgroundMenu === \"scenario\" ? (\r\n          <>\r\n            <div\r\n              className={\r\n                background.state.active === \"scenario\"\r\n                  ? \"defMenuButton defMenuButtonON\"\r\n                  : \"defMenuButton\"\r\n              }\r\n              onClick={() => background.setActive(\"scenario\")}\r\n            >\r\n              Use Scenario\r\n            </div>\r\n            <fieldset>\r\n              <legend\r\n              style={{cursor:\"pointer\"}}\r\n              onClick={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n              > \r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"sun\"].isActive}\r\n                  onChange={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n                />\r\n                Sun & Sky\r\n              </legend>\r\n              {background.state[\"scenario\"][\"sun\"].isActive &&\r\n                <><div>\r\n                  <label>Inclination:</label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                </div>\r\n                  <div>\r\n                    <label>Azimuth:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Turbidity:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Rayleight:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Ambient Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                <ColorPicker\r\n                  color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n                  setColor={(color) => \r\n                    background.setScenario(\"ambientLight\", \"color\", color)}\r\n                  useAlpha={false}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Directional Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                    <ColorPicker\r\n                      color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n                      setColor={(color) => \r\n                        background.setScenario(\"directionalLight\", \"color\", color)}\r\n                      useAlpha={false}\r\n                    />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend \r\n              style={{cursor:\"pointer\"}}\r\n              onClick={() => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"stars\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n                />\r\n                Stars\r\n              </legend>\r\n              {background.state[\"scenario\"][\"stars\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Star Count:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"100000\"\r\n                      value={background.state[\"scenario\"][\"stars\"].count}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"stars\", \"count\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend \r\n              style={{cursor:\"pointer\"}}\r\n              onClick={() => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"fog\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}\r\n                />\r\n                Fog\r\n              </legend>\r\n              {background.state[\"scenario\"][\"fog\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Color:</label>\r\n                    <ColorPicker\r\n                      color={background.state[\"scenario\"][\"fog\"].color}\r\n                      setColor={(color) => background.setScenario(\"fog\", \"color\", color)}\r\n                      useAlpha={false}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Near:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Far:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend> Terrain </legend>\r\n              <div>\r\n                <label>Sea:</label>\r\n                <input type=\"checkbox\" \r\n                checked={background.state[\"scenario\"][\"ocean\"].isActive} \r\n                onChange={() => background.setScenario(\"ocean\", \"isActive\", !background.state[\"scenario\"][\"ocean\"].isActive)}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Dunes:</label>\r\n                <input type=\"checkbox\" \r\n                checked={background.state[\"scenario\"][\"desert\"].isActive} \r\n                onChange={() => background.setScenario(\"desert\", \"isActive\", !background.state[\"scenario\"][\"desert\"].isActive)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Shortcuts</legend>\r\n        <div>\r\n          <label>Icon Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={36}\r\n            max={120}\r\n            step=\"1\"\r\n            value={Number(desktopIconSize)}\r\n            onChange={(e) => setDesktopIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={32}\r\n            step=\"1\"\r\n            value={Number(desktopFontSize)}\r\n            onChange={(e) => setDesktopFontSize(e.target.value)}\r\n          /></div>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\nimport {\r\n  FaRegWindowMinimize,\r\n  FaWindowMaximize,\r\n} from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { RiCloseLargeLine } from \"react-icons/ri\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const WindowPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  return (\r\n    <>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"10px\",\r\n          left: \"10px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          backgroundColor: \"var(--WindowBkgrColorInactive)\",\r\n          borderColor: \"var(--WindowBorderColorInactive)\"\r\n        }}\r\n        className=\"app appInactive\"\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowTopBarFontColorInactive)\",\r\n            backgroundColor: \"var(--WindowTopBarBkgrColorInactive)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Inactive</h1>\r\n          {themeContext.topBarIconTheme === \"Default\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverRed \">\r\n                <AiOutlineClose />\r\n              </button></>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Aero\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroMinimize\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroMaximize\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroClose \">\r\n                <AiOutlineClose />\r\n              </button></>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Aqua\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaGreen\">+</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaYellow\">-</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaRed\">x</button>\r\n            </>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Classic\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonClassic\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonClassic\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonClassic \">\r\n                <RiCloseLargeLine />\r\n              </button>\r\n            </>\r\n          }\r\n        </app-top-bar>\r\n        <app-container\r\n          style={{\r\n            color: \"var(--AppFontColorInactive)\",\r\n            backgroundColor: \"var(--AppBkgrColorInactive)\",\r\n            borderColor: \"var(--AppBorderColorInactive)\"\r\n          }}></app-container>\r\n      </app-window>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50px\",\r\n          left: \"60px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          backgroundColor: \"var(--WindowBkgrColor)\"\r\n        }}\r\n        className=\"app\"\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowTopBarFontColor)\",\r\n            backgroundColor: \"var(--WindowTopBarBkgrColor)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Active</h1>\r\n          {themeContext.topBarIconTheme === \"Default\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverRed\">\r\n                <AiOutlineClose />\r\n              </button></>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Aero\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroMinimize\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroMaximize\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroClose \">\r\n                <AiOutlineClose />\r\n              </button></>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Aqua\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaGreen\">+</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaYellow\">-</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaRed\">x</button>\r\n            </>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Classic\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonClassic\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonClassic\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonClassic \">\r\n                <RiCloseLargeLine />\r\n              </button>\r\n            </>\r\n          }\r\n        </app-top-bar>\r\n        <app-container\r\n          style={{\r\n            color: \"var(--AppFontColor)\",\r\n            backgroundColor: \"var(--AppBkgrColor)\",\r\n            borderColor: \"var(--AppBorderColor)\"\r\n          }}></app-container>\r\n      </app-window>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Window = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  var root = document.querySelector(\":root\");\r\n\r\n  const [windowFontColor, setWindowFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowFontColor\", windowFontColor);\r\n  }, [windowFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [windowFontColorInactive, setWindowFontColorInactive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowFontColorInactive\", windowFontColorInactive);\r\n  }, [windowFontColorInactive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [fontSize, setFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontSize\", fontSize + \"px\");\r\n  }, [fontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarTitleAlign, setTopbarTitleAlign] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontAlign\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontAlign\", topbarTitleAlign);\r\n  }, [topbarTitleAlign]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarFontColor, setTopbarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontColor\", topbarFontColor);\r\n  }, [topbarFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [bkgColor, setBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBkgrColor\", bkgColor);\r\n  }, [bkgColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [windowPadding, setWindowPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowPadding\", windowPadding + \"px\");\r\n  }, [windowPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarFlexDirection, setTopbarFlexDirection] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFlexDirection\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFlexDirection\", topbarFlexDirection);\r\n  }, [topbarFlexDirection]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarBkgColor, setTopbarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarBkgrColor\", topbarBkgColor);\r\n  }, [topbarBkgColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topBarHeight, setTopBarHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarHeight\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarHeight\", topBarHeight + \"px\");\r\n  }, [topBarHeight]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topBarIconSize, setTopBarIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarIconSize\", topBarIconSize + \"px\");\r\n  }, [topBarIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderWidth, setBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderWidth\", borderWidth + \"px\");\r\n  }, [borderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderRadius, setBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderRadius\", borderRadius + \"px\");\r\n  }, [borderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderType, setBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderType\", borderType);\r\n  }, [borderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderColor, setBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderColor\", borderColor);\r\n  }, [borderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowXOffset, setShadowXOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowXOffset\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowXOffset\", shadowXOffset + \"px\");\r\n  }, [shadowXOffset]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowYOffset, setShadowYOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowYOffset\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowYOffset\", shadowYOffset + \"px\");\r\n  }, [shadowYOffset]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowBlur, setShadowBlur] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowBlur\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowBlur\", shadowBlur + \"px\");\r\n  }, [shadowBlur]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowSpread, setShadowSpread] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowSpread\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowSpread\", shadowSpread + \"px\");\r\n  }, [shadowSpread]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowColor, setShadowColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowColor\", shadowColor);\r\n  }, [shadowColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [inactiveBorderColor, setInactiveBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderColorInactive\", inactiveBorderColor);\r\n  }, [inactiveBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [inactiveTopBarBkgColor, setInactiveTopBarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgrColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarBkgrColorInactive\", inactiveTopBarBkgColor);\r\n  }, [inactiveTopBarBkgColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarFontColorInactive, setTopbarFontColorInactive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontColorInactive\", topbarFontColorInactive);\r\n  }, [topbarFontColorInactive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [inactiveBkgColor, setInactiveBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgrColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBkgrColorInactive\", inactiveBkgColor);\r\n  }, [inactiveBkgColor]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Window</legend>\r\n        <div>\r\n          <label>Background Effect:</label>\r\n          <select\r\n            value={themeContext.windowBackgroundFX}\r\n            onChange={(e) => themeContext.setWindowBackgroundFX(e.target.value)}\r\n          >\r\n            {themeContext.backgroundFXList.map((backgroundFX) => (\r\n              <option key={backgroundFX} value={backgroundFX}>\r\n                {backgroundFX}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <fieldset>\r\n          <legend>Top Bar</legend>\r\n          <div>\r\n            <label>Icon Theme:</label>\r\n            <select\r\n              value={themeContext.topBarIconTheme}\r\n              onChange={(e) => themeContext.setTopBarIconTheme(e.target.value)}\r\n            >\r\n              {themeContext.topBarIconThemeList.map((iconTheme) => (\r\n                <option key={iconTheme} value={iconTheme}>\r\n                  {iconTheme}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Direction:</label>\r\n            <select\r\n              value={topbarFlexDirection}\r\n              onChange={(e) => setTopbarFlexDirection(e.target.value)}\r\n            >\r\n              <option value=\"row\">Close on the Right</option>\r\n              <option value=\"row-reverse\">Close on the Left</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Align Title</label>\r\n            <select\r\n              value={topbarTitleAlign}\r\n              onChange={(e) => setTopbarTitleAlign(e.target.value)}\r\n            >\r\n              <option value=\"left\">Left</option>\r\n              <option value=\"center\">Center</option>\r\n              <option value=\"right\">Right</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Height:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={20}\r\n              max={64}\r\n              step=\"1\"\r\n              value={topBarHeight}\r\n              onChange={(e) => setTopBarHeight(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Icon Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={16}\r\n              max={60}\r\n              step=\"1\"\r\n              value={topBarIconSize}\r\n              onChange={(e) => setTopBarIconSize(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={fontSize}\r\n              onChange={(e) => setFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Border Thickness:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={borderWidth}\r\n              onChange={(e) => setBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={20}\r\n              step=\"1\"\r\n              value={borderRadius}\r\n              onChange={(e) => setBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Type:</label>\r\n            <select\r\n              value={borderType}\r\n              onChange={(e) => setBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Padding:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={windowPadding}\r\n              onChange={(e) => setWindowPadding(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Shadow</legend>\r\n          <div>\r\n            <label>Y-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowYOffset}\r\n              onChange={(e) => setShadowYOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>X-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowXOffset}\r\n              onChange={(e) => setShadowXOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Spread</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowSpread}\r\n              onChange={(e) => setShadowSpread(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Blur</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowBlur}\r\n              onChange={(e) => setShadowBlur(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={shadowColor}\r\n              setColor={setShadowColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Active Window</legend>\r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={topbarBkgColor}\r\n              setColor={setTopbarBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={topbarFontColor}\r\n              setColor={setTopbarFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={bkgColor}\r\n              setColor={setBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color: </label>\r\n            <ColorPicker\r\n              color={windowFontColor}\r\n              setColor={setWindowFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={borderColor}\r\n              setColor={setBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Inactive Window</legend>\r\n\r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveTopBarBkgColor}\r\n              setColor={setInactiveTopBarBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={topbarFontColorInactive}\r\n              setColor={setTopbarFontColorInactive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBkgColor}\r\n              setColor={setInactiveBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color: </label>\r\n            <ColorPicker\r\n              color={windowFontColorInactive}\r\n              setColor={setWindowFontColorInactive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBorderColor}\r\n              setColor={setInactiveBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect, useContext, Fragment } from \"react\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const MenuPreview = () => {\r\n    const theme = useContext(ThemeContext);\r\n    const NavMenu = () => <nav\r\n        className=\"appMenuBar\"\r\n        style={{\r\n            backgroundColor: \"var(--WindowMenuNavBkgr)\"\r\n        }}\r\n    >\r\n        <Fragment>\r\n            <drop-down>\r\n                <ul>\r\n                    <li>\r\n                        <button>\r\n                            <div>Button</div>\r\n                            <span />\r\n                            <kbd>keybind</kbd>\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <button disabled>\r\n                            <div>Disabled Button</div>\r\n                            <span />\r\n                            <kbd>keybind</kbd>\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <hr />\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            <div>Checkbox</div>\r\n                            <span />\r\n                            <input type=\"checkbox\" />\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <hr />\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            <div>Checkbox 1</div>\r\n                            <span />\r\n                            <input type=\"radio\" name=\"radio\" />\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            <div>Checkbox 2</div>\r\n                            <span />\r\n                            <input type=\"radio\" name=\"radio\" />\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </drop-down>\r\n            <button>\r\n                Menu 1\r\n            </button>\r\n        </Fragment>\r\n        <button>\r\n            Menu 3\r\n        </button>\r\n        <button>\r\n            Menu 4\r\n        </button>\r\n    </nav>;\r\n\r\n    return (\r\n        <>\r\n            <app-window\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: \"0px\",\r\n                    left: \"0px\",\r\n                    width: \"80%\",\r\n                    height: \"100%\",\r\n                    backgroundColor: \"var(--WindowBkgrColor)\",\r\n                    paddingTop: \"var(--WindowPadding)\",\r\n                }}\r\n                className=\"app\"\r\n            >\r\n                {theme.navMenuLocation === \"in top bar\" && <NavMenu />}\r\n                <app-container\r\n                    style={{\r\n                        color: \"var(--AppFontColor)\",\r\n                        backgroundColor: \"var(--AppBkgrColor)\",\r\n                        borderColor: \"var(--AppBorderColor)\"\r\n                    }}>\r\n                    {theme.navMenuLocation === \"in app\" && <NavMenu />}\r\n                </app-container>\r\n            </app-window>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const Menu = () => {\r\n    const root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n    const [navBkgrColor, setNavBkgrColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavBkgr\", navBkgrColor);\r\n    }, [navBkgrColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navBkgrColorInactive, setNavBkgrColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavBkgrInactive\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavBkgrInactive\", navBkgrColorInactive);\r\n    }, [navBkgrColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [backgroundColor, setBackgroundColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBkgr\", backgroundColor);\r\n    }, [backgroundColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuFontColor\", fontColor);\r\n    }, [fontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontSize, setFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuFontSize\", fontSize + \"px\");\r\n    }, [fontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderColor\", borderColor);\r\n    }, [borderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderWidth\", borderWidth + \"px\");\r\n    }, [borderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderRadius\", borderRadius + \"px\");\r\n    }, [borderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderType\", borderType);\r\n    }, [borderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverFontColor, setHoverFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuHoverColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuHoverColor\", hoverFontColor);\r\n    }, [hoverFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverBkgr, setHoverBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuHoverBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuHoverBkgr\", hoverBkgr);\r\n    }, [hoverBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBkgr, setNavButtonBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBkgr\", navButtonBkgr);\r\n    }, [navButtonBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonFontColor, setNavButtonFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonColor\", navButtonFontColor);\r\n    }, [navButtonFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonHoverBkgr, setNavButtonHoverBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonHoverBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonHoverBkgr\", navButtonHoverBkgr);\r\n    }, [navButtonHoverBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonHoverFontColor, setNavButtonHoverFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonHoverColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonHoverColor\", navButtonHoverFontColor);\r\n    }, [navButtonHoverFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderColor, setNavButtonBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderColor\", navButtonBorderColor);\r\n    }, [navButtonBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderWidth, setNavButtonBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderWidth\", navButtonBorderWidth + \"px\");\r\n    }), [navButtonBorderWidth];\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderRadius, setNavButtonBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderRadius\", navButtonBorderRadius + \"px\");\r\n    }, [navButtonBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderType, setNavButtonBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderType\", navButtonBorderType);\r\n    }, [navButtonBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Global</legend>\r\n                <div>\r\n                    <label>Font Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={11}\r\n                        max={30}\r\n                        step=\"1\"\r\n                        value={fontSize}\r\n                        onChange={(e) => setFontSize(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Position:</label>\r\n                    <select\r\n                        value={theme.navMenuLocation}\r\n                        onChange={(e) => theme.setNavMenuLocation(e.target.value)}\r\n                    >\r\n                        {theme.navMenuLocationList.map((location) => (\r\n                            <option value={location}>{location}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Navigation Bar</legend>\r\n                <div>\r\n                    <label>Nav Bar Background:</label>\r\n                    <ColorPicker\r\n                        color={navBkgrColor}\r\n                        setColor={setNavBkgrColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Nav Bar Background Inactive:</label>\r\n                    <ColorPicker\r\n                        color={navBkgrColorInactive}\r\n                        setColor={setNavBkgrColorInactive}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Navigation Buttons</legend>\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={navButtonFontColor}\r\n                        setColor={setNavButtonFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Font Color:</label>\r\n                    <ColorPicker\r\n                        color={navButtonHoverFontColor}\r\n                        setColor={setNavButtonHoverFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <legend>Background</legend>\r\n                    <ColorPicker\r\n                        color={navButtonBkgr}\r\n                        setColor={setNavButtonBkgr}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <legend>Hover Background</legend>\r\n                    <ColorPicker\r\n                        color={navButtonHoverBkgr}\r\n                        setColor={setNavButtonHoverBkgr}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                        color={navButtonBorderColor}\r\n                        setColor={setNavButtonBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={navButtonBorderWidth}\r\n                        onChange={(e) => setNavButtonBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={navButtonBorderRadius}\r\n                        onChange={(e) => setNavButtonBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select\r\n                        value={navButtonBorderType}\r\n                        onChange={(e) => setNavButtonBorderType(e.target.value)}\r\n                    >\r\n                        <option value=\"solid\">Solid</option>\r\n                        <option value=\"dotted\">Dotted</option>\r\n                        <option value=\"dashed\">Dashed</option>\r\n                        <option value=\"double\">Double</option>\r\n                        <option value=\"groove\">Groove</option>\r\n                        <option value=\"ridge\">Ridge</option>\r\n                        <option value=\"inset\">Inset</option>\r\n                        <option value=\"outset\">Outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n                <legend>Menu</legend>\r\n\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={fontColor}\r\n                        setColor={setFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Font Color:</label>\r\n                    <ColorPicker\r\n                        color={hoverFontColor}\r\n                        setColor={setHoverFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Background Color:</label>\r\n                    <ColorPicker\r\n                        color={backgroundColor}\r\n                        setColor={setBackgroundColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Background:</label>\r\n                    <ColorPicker\r\n                        color={hoverBkgr}\r\n                        setColor={setHoverBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};","import { useState, useEffect, useContext } from \"react\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const AppPreview = () => {\r\n    const themeContext = useContext(ThemeContext);\r\n    return (\r\n        <>\r\n            <app-window\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: \"10px\",\r\n                    left: \"10px\",\r\n                    width: \"80%\",\r\n                    height: \"120px\",\r\n                    backgroundColor: \"var(--WindowBkgrColorInactive)\",\r\n                    borderColor: \"var(--WindowBorderColorInactive)\"\r\n                }}\r\n                className=\"app appInactive\"\r\n            >\r\n                <app-top-bar\r\n                    style={{\r\n                        color: \"var(--WindowTopBarFontColorInactive)\",\r\n                        backgroundColor: \"var(--WindowTopBarBkgrColorInactive)\"\r\n                    }}>\r\n                    <FcGlobe />\r\n                    <h1>Inactive</h1>\r\n                </app-top-bar>\r\n                <app-container\r\n                    style={{\r\n                        color: \"var(--AppFontColorInactive)\",\r\n                        backgroundColor: \"var(--AppBkgrColorInactive)\",\r\n                        borderColor: \"var(--AppBorderColorInactive)\",\r\n                        textAlign: \"left\"\r\n                    }}>{\"-Content\"}</app-container>\r\n            </app-window>\r\n            <app-window\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: \"50px\",\r\n                    left: \"60px\",\r\n                    width: \"80%\",\r\n                    height: \"120px\",\r\n                    backgroundColor: \"var(--WindowBkgrColor)\"\r\n                }}\r\n                className=\"app\"\r\n            >\r\n                <app-top-bar\r\n                    style={{\r\n                        color: \"var(--WindowTopBarFontColor)\",\r\n                        backgroundColor: \"var(--WindowTopBarBkgrColor)\"\r\n                    }}>\r\n                    <FcGlobe />\r\n                    <h1>Active</h1>\r\n                </app-top-bar>\r\n                <app-container\r\n                    style={{\r\n                        color: \"var(--AppFontColor)\",\r\n                        backgroundColor: \"var(--AppBkgrColor)\",\r\n                        borderColor: \"var(--AppBorderColor)\",\r\n                        textAlign:\"left\"\r\n                    }}>{\"-Content\"}</app-container>\r\n            </app-window>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const App = () => {\r\n    var root = document.querySelector(\":root\");\r\n\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppFontColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppFontColor\", fontColor);\r\n    }, [fontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColorInactive, setFontColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppFontColorInactive\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppFontColorInactive\", fontColorInactive);\r\n    }, [fontColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [bkgColor, setBkgColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBkgrColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBkgrColor\", bkgColor);\r\n    }, [bkgColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [bkgColorInactive, setBkgColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBkgrColorInactive\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBkgrColorInactive\", bkgColorInactive);\r\n    }, [bkgColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderColor\", borderColor);\r\n    }, [borderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColorInactive, setBorderColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderColorInactive\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderColorInactive\", borderColorInactive);\r\n    }, [borderColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderWidth\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderWidth\", borderWidth + \"px\");\r\n    }, [borderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderRadius\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderRadius\", borderRadius + \"px\");\r\n    }, [borderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        root.style.getPropertyValue(\"--AppBorderType\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderType\", borderType);\r\n    }, [borderType]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Font Color</legend>\r\n                <div>\r\n                    <label>Active</label>\r\n                    <ColorPicker\r\n                        color={fontColor}\r\n                        setColor={setFontColor}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Inactive</label>\r\n                    <ColorPicker\r\n                        color={fontColorInactive}\r\n                        setColor={setFontColorInactive}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background Color</legend>\r\n                <div>\r\n                    <label>Active</label>\r\n                    <ColorPicker\r\n                        color={bkgColor}\r\n                        setColor={setBkgColor}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Inactive</label>\r\n                    <ColorPicker\r\n                        color={bkgColorInactive}\r\n                        setColor={setBkgColorInactive}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Color Active</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Color Inactive</label>\r\n                    <ColorPicker\r\n                        color={borderColorInactive}\r\n                        setColor={setBorderColorInactive}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Radius</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Type</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};","import { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const DialogPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  const [buttonClassNeutral, setButtonClassNeutral] = useState(\"appDialogButtonFluent\");\r\n  const [buttonClassSuggested, setButtonClassSuggested] = useState(\"appDialogButtonFluent\");\r\n  const [buttonClassClose, setButtonClassClose] = useState(\"appDialogButtonFluent buttonActiveRed\");\r\n  useEffect(() => {\r\n    switch (themeContext.dialogButtonTheme) {\r\n      case \"Aero\":\r\n        setButtonClassNeutral(\"appDialogButtonAero\");\r\n        setButtonClassSuggested(\"appDialogButtonAero\");\r\n        setButtonClassClose(\"appDialogButtonAero\");\r\n        break;\r\n      case \"Aqua\":\r\n        setButtonClassNeutral(\"appDialogButtonAqua appDialogButtonAquaNeutral\");\r\n        setButtonClassSuggested(\"appDialogButtonAqua appDialogButtonAquaBlue\");\r\n        setButtonClassClose(\"appDialogButtonAqua appDialogButtonAquaRed\");\r\n        break;\r\n      case \"Classic\":\r\n        setButtonClassNeutral(\"appDialogButtonClassic\");\r\n        setButtonClassSuggested(\"appDialogButtonClassic\");\r\n        setButtonClassClose(\"appDialogButtonClassic\");\r\n        break;\r\n      default:\r\n        setButtonClassNeutral(\"appDialogButtonFluent\");\r\n        setButtonClassSuggested(\"appDialogButtonFluent\");\r\n        setButtonClassClose(\"appDialogButtonFluent buttonActiveRed\");\r\n        break;\r\n    }\r\n  }, [themeContext.dialogButtonTheme]);\r\n\r\n  const setButtonClass = (name) => {\r\n    switch (name) {\r\n      case \"Close\":\r\n        return buttonClassClose;\r\n      case \"Save\":\r\n      case \"Ok\":\r\n        return buttonClassSuggested;\r\n      default:\r\n        return buttonClassNeutral;\r\n    }\r\n  }\r\n\r\n  const DialogButtonsBar = () => \r\n    <app-dialog-actions>\r\n      <button className={setButtonClass(\"Ok\")}>Ok</button>\r\n      <button className={setButtonClass(\"Cancel\")}>Cancel</button>\r\n      <button className={setButtonClass(\"Close\")}>Close</button>\r\n    </app-dialog-actions>\r\n  ;\r\n\r\n  return (\r\n    <>\r\n      <app-dialog\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n        }}\r\n      >\r\n        <app-dialog-top-bar>\r\n          Dialog\r\n        </app-dialog-top-bar>\r\n        <app-dialog-info\r\n          style={{\r\n            marginBottom: themeContext.dialogButtonsLocation === \"in window\" ? \"0px\" : \"var(--DialogPadding)\"\r\n           }}\r\n        >\r\n          <p>Information</p>\r\n        {themeContext.dialogButtonsLocation === \"in info container\" && <DialogButtonsBar />}\r\n        </app-dialog-info>\r\n        {themeContext.dialogButtonsLocation === \"in window\" && <DialogButtonsBar />}\r\n      </app-dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Dialog = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  var root = document.querySelector(\":root\");\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBkgrColor, setDialogBkgrColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBkgrColor\", dialogBkgrColor);\r\n  }, [dialogBkgrColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderColor, setDialogBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderColor\", dialogBorderColor);\r\n  }, [dialogBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderWidth, setDialogBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderWidth\", dialogBorderWidth + \"px\");\r\n  }, [dialogBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderRadius, setDialogBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderRadius\", dialogBorderRadius + \"px\");\r\n  }, [dialogBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderType, setDialogBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderType\", dialogBorderType);\r\n  }, [dialogBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBkgr, setDialogInfoBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBkgr\", dialogInfoBkgr);\r\n  }, [dialogInfoBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoFontColor, setDialogInfoFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoFontColor\", dialogInfoFontColor);\r\n  }, [dialogInfoFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoFontSize, setDialogInfoFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoFontSize\", dialogInfoFontSize + \"px\");\r\n  }, [dialogInfoFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderColor, setDialogInfoBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderColor\"),\r\n  )\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderColor\", dialogInfoBorderColor);\r\n  }, [dialogInfoBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderWidth, setDialogInfoBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderWidth\", dialogInfoBorderWidth + \"px\");\r\n  }, [dialogInfoBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderRadius, setDialogInfoBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderRadius\", dialogInfoBorderRadius + \"px\");\r\n  }, [dialogInfoBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderType, setDialogInfoBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderType\", dialogInfoBorderType);\r\n  }, [dialogInfoBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogPadding, setDialogPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogPadding\", dialogPadding + \"px\");\r\n  }, [dialogPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogTopBarBkgr, setDialogTopBarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogTopBarBkgr\", dialogTopBarBkgr);\r\n  }, [dialogTopBarBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogTopBarFontSize, setDialogTopBarFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogTopBarFontSize\", dialogTopBarFontSize + \"px\");\r\n  }, [dialogTopBarFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogTopBarFontColor, setDialogTopBarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogTopBarFontColor\", dialogTopBarFontColor);\r\n  }, [dialogTopBarFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBarBkgr, setDialogButtonBarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBarBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBarBkgr\", dialogButtonBarBkgr);\r\n  }, [dialogButtonBarBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBkgr, setDialogButtonBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBkgr\", dialogButtonBkgr);\r\n  }, [dialogButtonBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonFontColor, setDialogButtonFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonFontColor\", dialogButtonFontColor);\r\n  }, [dialogButtonFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonFontSize, setDialogButtonFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonFontSize\", dialogButtonFontSize + \"px\");\r\n  }, [dialogButtonFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderColor, setDialogButtonBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderColor\", dialogButtonBorderColor);\r\n  }, [dialogButtonBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderWidth, setDialogButtonBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderWidth\", dialogButtonBorderWidth + \"px\");\r\n  }, [dialogButtonBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderRadius, setDialogButtonBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderRadius\", dialogButtonBorderRadius + \"px\");\r\n  }, [dialogButtonBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderType, setDialogButtonBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderType\", dialogButtonBorderType);\r\n  }, [dialogButtonBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n\r\n  return (\r\n\r\n    <fieldset>\r\n      <legend>Dialog Window</legend>\r\n      <div>\r\n        <label>Background Color: </label>\r\n        <ColorPicker\r\n          color={dialogBkgrColor}\r\n          setColor={setDialogBkgrColor}\r\n          useAlpha={true}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label>Background Effect:</label>\r\n        <select\r\n          value={themeContext.windowBackgroundFX}\r\n          onChange={(e) => themeContext.setWindowBackgroundFX(e.target.value)}\r\n        >\r\n          {themeContext.backgroundFXList.map((backgroundFX) => (\r\n            <option key={backgroundFX} value={backgroundFX}>\r\n              {backgroundFX}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <fieldset>\r\n        <legend>Border</legend>\r\n        <div>\r\n          <label>Color: </label>\r\n          <ColorPicker\r\n            color={dialogBorderColor}\r\n            setColor={setDialogBorderColor}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Thickness: </label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={10}\r\n            step=\"1\"\r\n            value={dialogBorderWidth}\r\n            onChange={(e) => setDialogBorderWidth(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Corner Curvature: </label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={25}\r\n            step=\"1\"\r\n            value={dialogBorderRadius}\r\n            onChange={(e) => setDialogBorderRadius(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Type: </label>\r\n          <select\r\n            value={dialogBorderType}\r\n            onChange={(e) => setDialogBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">Solid</option>\r\n            <option value=\"dashed\">Dashed</option>\r\n            <option value=\"dotted\">Dotted</option>\r\n            <option value=\"double\">Double</option>\r\n            <option value=\"groove\">Groove</option>\r\n            <option value=\"ridge\">Ridge</option>\r\n            <option value=\"inset\">Inset</option>\r\n            <option value=\"outset\">Outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Top Bar</legend>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={dialogTopBarBkgr}\r\n            setColor={setDialogTopBarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={dialogTopBarFontColor}\r\n            setColor={setDialogTopBarFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={60}\r\n            step=\"1\"\r\n            value={dialogTopBarFontSize}\r\n            onChange={(e) => setDialogTopBarFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Info</legend>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={dialogInfoBkgr}\r\n            setColor={setDialogInfoBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size: </label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={60}\r\n            step=\"1\"\r\n            value={dialogInfoFontSize}\r\n            onChange={(e) => setDialogInfoFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={dialogInfoFontColor}\r\n            setColor={setDialogInfoFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Color: </label>\r\n            <ColorPicker\r\n              color={dialogInfoBorderColor}\r\n              setColor={setDialogInfoBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Thickness: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogInfoBorderWidth}\r\n              onChange={(e) => setDialogInfoBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={12}\r\n              step=\"1\"\r\n              value={dialogInfoBorderRadius}\r\n              onChange={(e) => setDialogInfoBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Type: </label>\r\n            <select\r\n              value={dialogInfoBorderType}\r\n              onChange={(e) => setDialogInfoBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">Solid</option>\r\n              <option value=\"dashed\">Dashed</option>\r\n              <option value=\"dotted\">Dotted</option>\r\n              <option value=\"double\">Double</option>\r\n              <option value=\"groove\">Groove</option>\r\n              <option value=\"ridge\">Ridge</option>\r\n              <option value=\"inset\">Inset</option>\r\n              <option value=\"outset\">Outset</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Margin Distance</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogPadding}\r\n              onChange={(e) => setDialogPadding(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Button</legend>\r\n        <div>\r\n          <label>Location: </label>\r\n          <select\r\n            value={themeContext.dialogButtonsLocation}\r\n            onChange={(e) => themeContext.setDialogButtonsLocation(e.target.value)}\r\n          >\r\n            {themeContext.dialogButtonsLocationList.map((buttonLocation) => (\r\n              <option key={buttonLocation} value={buttonLocation}>\r\n                {buttonLocation}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Theme:</label>\r\n          <select\r\n            value={themeContext.dialogButtonTheme}\r\n            onChange={(e) => themeContext.setDialogButtonTheme(e.target.value)}\r\n          >\r\n            {themeContext.dialogButtonThemeList.map((buttonTheme) => (\r\n              <option key={buttonTheme} value={buttonTheme}>\r\n                {buttonTheme}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Bar Background Color:</label>\r\n          <ColorPicker\r\n            color={dialogButtonBarBkgr}\r\n            setColor={setDialogButtonBarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={dialogButtonBkgr}\r\n            setColor={setDialogButtonBkgr}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={dialogButtonFontColor}\r\n            setColor={setDialogButtonFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={60}\r\n            step=\"1\"\r\n            value={dialogButtonFontSize}\r\n            onChange={(e) => setDialogButtonFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Color:</label>\r\n          <ColorPicker\r\n            color={dialogButtonBorderColor}\r\n            setColor={setDialogButtonBorderColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Width:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={10}\r\n            step=\"1\"\r\n            value={dialogButtonBorderWidth}\r\n            onChange={(e) => setDialogButtonBorderWidth(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Radius:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={25}\r\n            step=\"1\"\r\n            value={dialogButtonBorderRadius}\r\n            onChange={(e) => setDialogButtonBorderRadius(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Style:</label>\r\n          <select\r\n            value={dialogButtonBorderType}\r\n            onChange={(e) => setDialogButtonBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">Solid</option>\r\n            <option value=\"dashed\">Dashed</option>\r\n            <option value=\"dotted\">Dotted</option>\r\n            <option value=\"double\">Double</option>\r\n            <option value=\"groove\">Groove</option>\r\n            <option value=\"ridge\">Ridge</option>\r\n            <option value=\"inset\">Inset</option>\r\n            <option value=\"outset\">Outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n    </fieldset>\r\n  );\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nexport const TaskBarPreview = () => {\r\n    const themeContext = useContext(ThemeContext);\r\n    const startButtonClass = () => {\r\n      let ans = \"\";\r\n      switch (themeContext.startButtonTheme) {\r\n        case \"Classic\":\r\n          ans= \"startButtonClassic\";\r\n          break;\r\n        case \"Aero\":\r\n          ans= \"startButtonAero\";\r\n          break;\r\n        case \"Aqua\":\r\n          ans= \"startButtonAqua\";\r\n          break;\r\n        case \"Default\":\r\n        default:\r\n          ans= \"startButtonFluent\";\r\n          break;\r\n      }\r\n      return ans;\r\n    }\r\n  \r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          background: \"var(--TaskbarBkgr)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <start-button\r\n        >\r\n          <button className={startButtonClass()}>\r\n        <svg width=\"400\" height=\"400\" viewBox=\"0 0 400 400\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <defs>\r\n            <linearGradient id=\"startButtonAquaRed\" gradientTransform=\"rotate(90)\">\r\n              <stop offset=\"20%\" stop-color=\"#FF9999\" />\r\n              <stop offset=\"50%\" stop-color=\"#FF0000\" />\r\n              <stop offset=\"80%\" stop-color=\"#9F0000\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"startButtonAquaGreen\" gradientTransform=\"rotate(90)\">\r\n              <stop offset=\"20%\" stop-color=\"#99FF99\" />\r\n              <stop offset=\"50%\" stop-color=\"#00FF00\" />\r\n              <stop offset=\"80%\" stop-color=\"#009F00\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"startButtonAquaBlue\" gradientTransform=\"rotate(90)\">\r\n              <stop offset=\"20%\" stop-color=\"#9999FF\" />\r\n              <stop offset=\"50%\" stop-color=\"#0000FF\" />\r\n              <stop offset=\"80%\" stop-color=\"#00009F\" />\r\n            </linearGradient>\r\n          </defs>\r\n          <path\r\n            className=\"hex hex1\"\r\n            style={{ \r\n                fill: startButtonClass() === \"startButtonAqua\" ? \"url(#startButtonAquaRed)\" : \"\"\r\n            }}\r\n            d=\"M41.0481 108.077L105 71.1547L168.952 108.077V181.923L105 218.845L41.0481 181.923V108.077Z\"\r\n            stroke=\"#808080\"\r\n            strokeWidth=\"8\"\r\n          />\r\n          <path\r\n            className=\"hex hex2\"\r\n            style={{ \r\n                fill: startButtonClass() === \"startButtonAqua\" ? \"url(#startButtonAquaGreen)\" : \"\"\r\n            }}\r\n            d=\"M231.048 108.077L295 71.1547L358.952 108.077V181.923L295 218.845L231.048 181.923V108.077Z\"\r\n            stroke=\"#808080\"\r\n            strokeWidth=\"8\"\r\n          />\r\n          <path\r\n            className=\"hex hex3\"\r\n            style={{ \r\n                fill: startButtonClass() === \"startButtonAqua\" ? \"url(#startButtonAquaBlue)\" : \"\"\r\n            }}\r\n            d=\"M136.048 273.077L200 236.155L263.952 273.077V346.923L200 383.845L136.048 346.923V273.077Z\"\r\n            stroke=\"#808080\"\r\n            strokeWidth=\"8\"\r\n          />\r\n          <path className=\"axis\" d=\"M200 200L200 60\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n          <path className=\"axis\" d=\"M200 200L78.7564 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n          <path className=\"axis\" d=\"M200 200L321.244 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n        </svg>\r\n          </button>\r\n        </start-button>\r\n        <live-apps>\r\n          <button>\r\n            <FcGlobe />\r\n          </button>\r\n        </live-apps>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TaskBar = () => {\r\n\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [taskbarHeight, setTaskbarHeight] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarHeight\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarHeight\", taskbarHeight + \"px\");\r\n    }, [taskbarHeight]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarIconSize, setTaskbarIconSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarIconSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarIconSize\", taskbarIconSize + \"px\");\r\n    }, [taskbarIconSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarBkgr, setTaskbarBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarBkgr\", taskbarBkgr);\r\n    }, [taskbarBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarFontSize, setTaskbarFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarFontSize\", taskbarFontSize + \"px\");\r\n    }, [taskbarFontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    /*const [taskbarFontColor, setTaskbarFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarFontColor\", taskbarFontColor);\r\n    }, [taskbarFontColor]);*/\r\n    //----------------------------------------------------------------------------//\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Dimentions:</legend>\r\n                <div>\r\n                    <label>Height:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={20}\r\n                        max={60}\r\n                        step=\"1\"\r\n                        value={taskbarHeight}\r\n                        onChange={(e) => setTaskbarHeight(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Font Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={10}\r\n                        max={26}\r\n                        step=\"1\"\r\n                        value={taskbarFontSize}\r\n                        onChange={(e) => setTaskbarFontSize(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Icon Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={10}\r\n                        max={60}\r\n                        step=\"1\"\r\n                        value={taskbarIconSize}\r\n                        onChange={(e) => setTaskbarIconSize(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background:</legend>\r\n                <div>\r\n                    <label>Color:</label>\r\n                    <ColorPicker\r\n                        color={taskbarBkgr}\r\n                        setColor={setTaskbarBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Background FX:</label>\r\n                    <select\r\n                        value={theme.taskbarBackgroundFX}\r\n                        onChange={(e) => theme.setTaskbarBackgroundFX(e.target.value)}\r\n                    >{\r\n                            theme.backgroundFXList.map((fx) => (\r\n                                <option key={fx} value={fx}>{fx}</option>\r\n                            ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FaGear } from \"react-icons/fa6\";\r\nimport { MdOutlineRestartAlt } from \"react-icons/md\";\r\nimport { RiShutDownLine } from \"react-icons/ri\";\r\nimport { FcGlobe, FcInfo, FcSettings } from \"react-icons/fc\";\r\n\r\nexport const StartPreview = () => {\r\n    const themeContext = useContext(ThemeContext);\r\n    const startButtonClass = () => {\r\n      let ans = \"\";\r\n      switch (themeContext.startButtonTheme) {\r\n        case \"Classic\":\r\n          ans= \"startButtonClassic startButtonClassicActive\";\r\n          break;\r\n        case \"Aero\":\r\n          ans= \"startButtonAero startButtonAeroActive\";\r\n          break;\r\n        case \"Aqua\":\r\n          ans= \"startButtonAqua startButtonAquaActive\";\r\n          break;\r\n        case \"Default\":\r\n        default:\r\n          ans= \"startButtonFluent startButtonFluentActive\";\r\n          break;\r\n      }\r\n      return ans;\r\n    }\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          background: \"var(--TaskbarBkgr)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <start-button\r\n        >\r\n          <button className={startButtonClass()}>\r\n        <svg width=\"400\" height=\"400\" viewBox=\"0 0 400 400\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <defs>\r\n            <linearGradient id=\"startButtonAquaRed\" gradientTransform=\"rotate(90)\">\r\n              <stop offset=\"20%\" stop-color=\"#FF9999\" />\r\n              <stop offset=\"50%\" stop-color=\"#FF0000\" />\r\n              <stop offset=\"80%\" stop-color=\"#9F0000\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"startButtonAquaGreen\" gradientTransform=\"rotate(90)\">\r\n              <stop offset=\"20%\" stop-color=\"#99FF99\" />\r\n              <stop offset=\"50%\" stop-color=\"#00FF00\" />\r\n              <stop offset=\"80%\" stop-color=\"#009F00\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"startButtonAquaBlue\" gradientTransform=\"rotate(90)\">\r\n              <stop offset=\"20%\" stop-color=\"#9999FF\" />\r\n              <stop offset=\"50%\" stop-color=\"#0000FF\" />\r\n              <stop offset=\"80%\" stop-color=\"#00009F\" />\r\n            </linearGradient>\r\n          </defs>\r\n          <path\r\n            className=\"hex hex1\"\r\n            style={{\r\n              mixBlendMode: \"screen\",\r\n              fill: startButtonClass() === \"startButtonAqua startButtonAquaActive\" ? \"url(#startButtonAquaRed)\" : \"#FF0000\",\r\n              transform: \"translate(45%, 23%) scale(1.5)\",\r\n            }}\r\n            d=\"M41.0481 108.077L105 71.1547L168.952 108.077V181.923L105 218.845L41.0481 181.923V108.077Z\"\r\n            stroke=\"#808080\"\r\n            strokeWidth=\"8\"\r\n          />\r\n          <path\r\n            className=\"hex hex2\"\r\n            style={{\r\n              mixBlendMode: \"screen\",\r\n              fill:  startButtonClass() === \"startButtonAqua startButtonAquaActive\" ? \"url(#startButtonAquaGreen)\" : \"#00FF00\",\r\n              transform: \"translate(-45%, 23%) scale(1.5)\",\r\n            }}\r\n            d=\"M231.048 108.077L295 71.1547L358.952 108.077V181.923L295 218.845L231.048 181.923V108.077Z\"\r\n            stroke=\"#808080\"\r\n            strokeWidth=\"8\"\r\n          />\r\n          <path\r\n            className=\"hex hex3\"\r\n            style={{\r\n              mixBlendMode: \"screen\",\r\n              fill:  startButtonClass() === \"startButtonAqua startButtonAquaActive\" ? \"url(#startButtonAquaBlue)\" : \"#0000FF\",\r\n              transform: \"translate(0, -45%) scale(1.5)\"\r\n            }}\r\n            d=\"M136.048 273.077L200 236.155L263.952 273.077V346.923L200 383.845L136.048 346.923V273.077Z\"\r\n            stroke=\"#808080\"\r\n            strokeWidth=\"8\"\r\n          />\r\n          <path className=\"axis\" d=\"M200 200L200 60\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n          <path className=\"axis\" d=\"M200 200L78.7564 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n          <path className=\"axis\" d=\"M200 200L321.244 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n        </svg>\r\n          </button>\r\n          <start-list class={\"expandHeight expandWidth\"} style={{ left: 0, transition: \"0s\" }}>\r\n            <ul>\r\n              <li>\r\n                <button>\r\n                  <FcGlobe />\r\n                  {\" \"}Program 1\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcInfo />\r\n                  {\" \"}Program 2\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcSettings />\r\n                  {\" \"}Program 3\r\n                </button>\r\n              </li>\r\n            </ul>\r\n            <div style={{ transition: \"0s\" }}>\r\n              <button>\r\n                <FaGear />\r\n                Settings\r\n              </button>\r\n              <button>\r\n                <MdOutlineRestartAlt />\r\n                Refresh\r\n              </button>\r\n              <button className=\"buttonActiveRed\">\r\n                <RiShutDownLine />\r\n                Close\r\n              </button>\r\n            </div>\r\n          </start-list>\r\n        </start-button>\r\n        <live-apps></live-apps>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Start = () => {\r\n\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [startIconColor, setStartIconColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartIconColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartIconColor\", startIconColor);\r\n    }, [startIconColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuBkgr, setStartMenuBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuBkgr\", startMenuBkgr);\r\n    }, [startMenuBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuFontColor, setStartMenuFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuFontColor\", startMenuFontColor);\r\n    }, [startMenuFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Start Button</legend>\r\n                <div>\r\n                    <label>Button Theme:</label>\r\n                    <select\r\n                        value={theme.startButtonTheme}\r\n                        onChange={(e) => {theme.setStartButtonTheme(e.target.value)}}\r\n                    >\r\n                        {theme.startButtonThemeList.map((theme) => {\r\n                            return (\r\n                                <option key={theme} value={theme}>\r\n                                    {theme}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Color:</label>\r\n                    <ColorPicker\r\n                        color={startIconColor}\r\n                        setColor={setStartIconColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Start Menu</legend>\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={startMenuFontColor}\r\n                        setColor={setStartMenuFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Background:</label>\r\n                    <ColorPicker\r\n                        color={startMenuBkgr}\r\n                        setColor={setStartMenuBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { WiCloudy } from \"react-icons/wi\";\r\n\r\nexport const TrayPreview = () => {\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"space-between\",\r\n                    bottom: \"0\",\r\n                    left: \"0\",\r\n                    width: \"100%\",\r\n                    height: \"var(--TaskbarHeight)\",\r\n                    background: \"var(--TaskbarBkgr)\",\r\n                    zIndex: 1,\r\n                }}\r\n            >\r\n                <live-apps></live-apps>\r\n                <taskbar-weather>\r\n                    <button>\r\n                        <WiCloudy /> 20°C\r\n                    </button>\r\n                </taskbar-weather>\r\n                <vertical-rect />\r\n                <task-bar-clock>\r\n                    <button>\r\n                        11:59\r\n                        <br />\r\n                        31/12/2000\r\n                    </button>\r\n                </task-bar-clock>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const Tray = () => {\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [weatherColor, setWeatherColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWeatherColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWeatherColor\", weatherColor);\r\n    }, [weatherColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [weatherBkgr, setWeatherBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WeatherBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WeatherBkgr\", weatherBkgr);\r\n    }, [weatherBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [weatherFontColor, setWeatherFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WeatherFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WeatherFontColor\", weatherFontColor);\r\n    }, [weatherFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [clockColor, setClockColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarClockColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarClockColor\", clockColor);\r\n    }, [clockColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [clockBkgr, setClockBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ClockBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ClockBkgr\", clockBkgr);\r\n    }, [clockBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [clockFontColor, setClockFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ClockFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ClockFontColor\", clockFontColor);\r\n    }, [clockFontColor]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Weather</legend>\r\n                <div>\r\n                    <label>Tray Color:</label>\r\n                    <ColorPicker\r\n                        color={weatherColor}\r\n                        setColor={setWeatherColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Window Background:</label>\r\n                    <ColorPicker\r\n                        color={weatherBkgr}\r\n                        setColor={setWeatherBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Window Font Color:</label>\r\n                    <ColorPicker\r\n                        color={weatherFontColor}\r\n                        setColor={setWeatherFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Clock</legend>\r\n                <div>\r\n                    <label>Tray Color:</label>\r\n                    <ColorPicker\r\n                        color={clockColor}\r\n                        setColor={setClockColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Window Background:</label>\r\n                    <ColorPicker\r\n                        color={clockBkgr}\r\n                        setColor={setClockBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Window Font Color:</label>\r\n                    <ColorPicker\r\n                        color={clockFontColor}\r\n                        setColor={setClockFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const ContextMenuPreview = () => {\r\n    const [checkbox1, setCheckbox1] = useState(false);\r\n    const [checkbox2, setCheckbox2] = useState(false);\r\n    const [radio, setRadio] = useState(\"1\");\r\n    return (\r\n        <>\r\n            <context-menu style={{ left: 5, top: 5 }}>\r\n                <button>\r\n                    <div>Button</div>\r\n                    <span />\r\n                </button>\r\n                <button>\r\n                    <div>Button with Keybind</div>\r\n                    <span />\r\n                    <kbd>key1 + key2</kbd>\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setCheckbox1(!checkbox1)}>\r\n                    <div>Checkbox 1</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox1} readOnly />\r\n                </button>\r\n                <button onClick={() => setCheckbox2(!checkbox2)}>\r\n                    <div>Checkbox 2</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox2} readOnly />\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setRadio(\"1\")}>\r\n                    <div>Radio 1</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"1\"} readOnly />\r\n                </button>\r\n                <button onClick={() => setRadio(\"2\")}>\r\n                    <div>Radio 2</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"2\"} readOnly />\r\n                </button>\r\n            </context-menu>\r\n        </>\r\n    );\r\n};\r\nexport const ContextMenu = () => {\r\n    var root = document.querySelector(\":root\");\r\n\r\n    const [fontSize, setFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuFontSize\", fontSize + \"px\");\r\n    }, [fontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuFontColor\", fontColor);\r\n    }, [fontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [bkgColor, setBkgColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBkgr\", bkgColor);\r\n    }, [bkgColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderColor\", borderColor);\r\n    }, [borderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderWidth\", borderWidth + \"px\");\r\n    }, [borderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderRadius\", borderRadius + \"px\");\r\n    }, [borderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderType\", borderType);\r\n    }, [borderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverColor, setHoverColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuButtonHoverColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuButtonHoverColor\", hoverColor);\r\n    }, [hoverColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverBkgr, setHoverBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuButtonHoverBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuButtonHoverBkgr\", hoverBkgr);\r\n    }, [hoverBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [padding, setPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuPadding\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuPadding\", padding + \"px\");\r\n    }, [padding]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Font</legend>\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={fontColor}\r\n                        setColor={setFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Font Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={11}\r\n                        max={30}\r\n                        step=\"1\"\r\n                        value={fontSize}\r\n                        onChange={(e) => setFontSize(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background</legend>\r\n                <div>\r\n                    <label>Background Color:</label>\r\n                    <ColorPicker\r\n                        color={bkgColor}\r\n                        setColor={setBkgColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Padding:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={padding}\r\n                        onChange={(e) => setPadding(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Hover</legend>\r\n                <div>\r\n                    <label>Hover Color:</label>\r\n                    <ColorPicker\r\n                        color={hoverColor}\r\n                        setColor={setHoverColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Background Color:</label>\r\n                    <ColorPicker\r\n                        color={hoverBkgr}\r\n                        setColor={setHoverBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};\r\n","// Definitions allows for user personalization of the app aspect and style. See individual components for reference.\r\n\r\nimport { useState, useContext } from \"react\";\r\nimport { Global } from \"./Pages/Global.jsx\";\r\nimport { DesktopPreview, Desktop } from \"./Pages/Desktop.jsx\";\r\nimport { WindowPreview, Window } from \"./Pages/Windows/Window.jsx\";\r\nimport { MenuPreview, Menu } from \"./Pages/Windows/Menu.jsx\";\r\nimport { AppPreview, App } from \"./Pages/Windows/App.jsx\";\r\nimport { DialogPreview, Dialog } from \"./Pages/Windows/Dialog.jsx\";\r\nimport { TaskBarPreview, TaskBar } from \"./Pages/Taskbar/TaskBar.jsx\";\r\nimport { StartPreview, Start } from \"./Pages/Taskbar/Start.jsx\";\r\nimport { TrayPreview, Tray } from \"./Pages/Taskbar/Tray.jsx\";\r\nimport { ContextMenuPreview, ContextMenu } from \"./Pages/ContextMenu.jsx\";\r\nimport Scenario from \"../../System/Desktop/Scenario.jsx\";\r\nimport { BackgroundContext } from \"../../System/Desktop/BackgroundContext.js\";\r\nimport \"./style.css\";\r\n\r\nexport default function Definitions() {\r\n  const [subMenu, setSubMenu] = useState(\"none\");\r\n  const [defPage, setDefPage] = useState(\"Global\");\r\n  const background = useContext(BackgroundContext);\r\n  return (\r\n    <settings-container>\r\n      <nav>\r\n        <div\r\n          onClick={() => { setDefPage(\"Global\"); setSubMenu(\"none\") }}\r\n          className={defPage === \"Global\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Global\r\n        </div>\r\n        <div\r\n          onClick={() => { setDefPage(\"Desktop\"); setSubMenu(\"none\") }}\r\n          className={defPage === \"Desktop\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Desktop\r\n        </div>\r\n        <div\r\n          onClick={() => { setDefPage(\"Taskbar\"); setSubMenu(\"Taskbar\") }}\r\n          className={subMenu === \"Taskbar\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Taskbar\r\n        </div>\r\n        {subMenu === \"Taskbar\" &&\r\n          <>\r\n            <div\r\n              onClick={() => setDefPage(\"Taskbar\")}\r\n              className={defPage === \"Taskbar\" ? \"defMenuButtonON\" : \"\"}\r\n            >\r\n              {\">\"}Taskbar\r\n            </div>\r\n            <div\r\n              onClick={() => setDefPage(\"Start\")}\r\n              className={defPage === \"Start\" ? \"defMenuButtonON\" : \"\"}\r\n            >\r\n              {\">\"}Start\r\n            </div>\r\n            <div\r\n              onClick={() => setDefPage(\"Tray\")}\r\n              className={defPage === \"Tray\" ? \"defMenuButtonON\" : \"\"}\r\n            >\r\n              {\">\"}Tray\r\n            </div>\r\n          </>\r\n        }\r\n        <div\r\n          onClick={() => { setDefPage(\"Window\"); setSubMenu(\"Window\") }}\r\n          className={subMenu === \"Window\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Windows\r\n        </div>\r\n        {subMenu === \"Window\" &&\r\n          <>\r\n            <div\r\n              onClick={() => setDefPage(\"Window\")}\r\n              className={defPage === \"Window\" ? \"defMenuButtonON\" : \"\"}\r\n            >\r\n              {\">\"}Window\r\n            </div>\r\n            <div\r\n              onClick={() => setDefPage(\"Menu\")}\r\n              className={defPage === \"Menu\" ? \"defMenuButtonON\" : \"\"}\r\n            >\r\n              {\">\"}Menu\r\n            </div>\r\n            <div\r\n              onClick={() => setDefPage(\"App\")}\r\n              className={defPage === \"App\" ? \"defMenuButtonON\" : \"\"}\r\n            >\r\n              {\">\"}App\r\n            </div>\r\n            <div\r\n              onClick={() => setDefPage(\"Dialog\")}\r\n              className={defPage === \"Dialog\" ? \"defMenuButtonON\" : \"\"}\r\n            >\r\n              {\">\"}Dialog\r\n            </div>\r\n          </>\r\n        }\r\n        <div\r\n          onClick={() => {setDefPage(\"ContextMenu\"); setSubMenu(\"none\")}}\r\n          className={defPage === \"ContextMenu\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Context Menu\r\n        </div>\r\n      </nav>\r\n      <form onSubmit={(e) => e.preventDefault()}>\r\n        <div className=\"defPreview\">\r\n          {background.state.active === \"scenario\" ? <Scenario /> : <></>}\r\n          {defPage === \"Desktop\" ? <DesktopPreview /> : <></>}\r\n          {defPage === \"Taskbar\" ? <TaskBarPreview /> : <></>}\r\n          {defPage === \"Start\" ? <StartPreview /> : <></>}\r\n          {defPage === \"Tray\" ? <TrayPreview /> : <></>}\r\n          {defPage === \"Window\" ? <WindowPreview /> : <></>}\r\n          {defPage === \"Menu\" ? <MenuPreview /> : <></>}\r\n          {defPage === \"App\" ? <AppPreview /> : <></>}\r\n          {defPage === \"Dialog\" ? <DialogPreview /> : <></>}\r\n          {defPage === \"ContextMenu\" ? <ContextMenuPreview /> : <></>}\r\n        </div>\r\n        {defPage === \"Global\" ? <Global /> : <></>}\r\n        {defPage === \"Desktop\" ? <Desktop /> : <></>}\r\n        {defPage === \"Taskbar\" ? <TaskBar /> : <></>}\r\n        {defPage === \"Start\" ? <Start /> : <></>}\r\n        {defPage === \"Tray\" ? <Tray /> : <></>}\r\n        {defPage === \"Window\" ? <Window /> : <></>}\r\n        {defPage === \"App\" ? <App /> : <></>}\r\n        {defPage === \"Menu\" ? <Menu /> : <></>}\r\n        {defPage === \"Dialog\" ? <Dialog /> : <></>}\r\n        {defPage === \"ContextMenu\" ? <ContextMenu /> : <></>}\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n      </form>\r\n    </settings-container>\r\n  );\r\n};\r\n","import { Canvas } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\nimport { useRef, useMemo, useContext, Suspense } from \"react\";\r\nimport { BackgroundContext } from \"./BackgroundContext.js\";\r\nimport { OrbitControls, Plane, Stars, Sky } from \"@react-three/drei\";\r\nimport { extend, useFrame, useThree, useLoader } from \"@react-three/fiber\";\r\nimport { Water } from \"three-stdlib\";\r\nimport * as WaterNormals from \"./Textures/waternormals.jpeg\";\r\nimport * as HillsNormals from \"./Textures/DesertNormal.png\";\r\nimport * as SandTexture from \"./Textures/SandTexture1.jpg\";\r\n\r\nextend({ Water });\r\n\r\nexport default function Scenario() {\r\n  const background = useContext(BackgroundContext);\r\n  const Ocean = () => {\r\n    const ref = useRef();\r\n    const gl = useThree((state) => state.gl);\r\n    const waterNormals = useLoader(THREE.TextureLoader, WaterNormals.default);\r\n    waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping;\r\n    const geom = useMemo(() => new THREE.PlaneGeometry(1500, 1500), []);\r\n    const config = useMemo(\r\n      () => ({\r\n        textureWidth: 1036,\r\n        textureHeight: 1036,\r\n        waterNormals,\r\n        sunDirection: new THREE.Vector3(),\r\n        sunColor: 0xffffff,\r\n        waterColor: 0x001e0f,\r\n        distortionScale: 0.8,\r\n        fog: true,\r\n        format: gl.encoding,\r\n      }),\r\n      [waterNormals],\r\n    );\r\n    useFrame(\r\n      (state, delta) => (ref.current.material.uniforms.time.value += delta),\r\n    );\r\n    return <water ref={ref} args={[geom, config]} rotation-x={-Math.PI / 2} />;\r\n  };\r\n\r\n  const Desert = () => {\r\n    const ref = useRef();\r\n    const hillsNormals = useLoader(THREE.TextureLoader, HillsNormals.default);\r\n    hillsNormals.wrapS = hillsNormals.wrapT = THREE.ClampToEdgeWrapping;\r\n    const sandTexture = useLoader(THREE.TextureLoader, SandTexture.default);\r\n    sandTexture.wrapS = sandTexture.wrapT = THREE.RepeatWrapping;\r\n    sandTexture.repeat.set(100, 100);\r\n    return <Plane ref={ref} position={[0, -15, 0]} args={[1500, 1500, 150, 150]} rotation-x={-Math.PI / 2}>\r\n      <meshStandardMaterial\r\n        color=\"white\"\r\n        metalness={0.5}\r\n        roughness={0.8}\r\n        map={sandTexture}\r\n        normalMap={hillsNormals}\r\n        normalScale={new THREE.Vector2(0.8, 0.8)}\r\n        displacementMap={hillsNormals}\r\n        displacementScale={50} />\r\n    </Plane>;\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      style={{\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        zIndex: \"-1\",\r\n      }}\r\n      dpr={window.devicePixelRatio}\r\n      camera={{ position: [0, 25, 10], near: 2 }}\r\n    >\r\n      {background.state[\"scenario\"][\"fog\"].isActive &&\r\n        <fog\r\n          attach=\"fog\"\r\n          color={background.state[\"scenario\"][\"fog\"].color}\r\n          near={background.state[\"scenario\"][\"fog\"].near}\r\n          far={background.state[\"scenario\"][\"fog\"].far}\r\n        />}\r\n      <OrbitControls target={[0, 25, 0]} />\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"sun\"].isActive &&\r\n          <Sky\r\n            distance={450000}\r\n            inclination={background.state[\"scenario\"][\"sun\"].inclination}\r\n            azimuth={background.state[\"scenario\"][\"sun\"].azimuth}\r\n            rayleigh={background.state[\"scenario\"][\"sun\"].rayleight}\r\n            turbidity={background.state[\"scenario\"][\"sun\"].turbidity}\r\n            exposure={background.state[\"scenario\"][\"sun\"].exposure}\r\n          />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"stars\"].isActive &&\r\n          <Stars\r\n            radius={440}\r\n            count={background.state[\"scenario\"][\"stars\"].count}\r\n          />}\r\n      </Suspense>\r\n      {background.state[\"scenario\"][\"directionalLight\"].isActive &&\r\n        <pointLight\r\n          color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n          intensity={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n          position={[0, 10000, -1500]}\r\n        />}\r\n      {background.state[\"scenario\"][\"ambientLight\"].isActive &&\r\n        <ambientLight\r\n          intensity={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n          color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n        />}\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"ocean\"].isActive && <Ocean />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"desert\"].isActive && <Desert />}\r\n      </Suspense>\r\n    </Canvas>\r\n  );\r\n};\r\n","export default function rgbToHsl(rgb) {\r\n    let r = rgb[0],\r\n        g = rgb[1],\r\n        b = rgb[2];\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n        cmax = Math.max(r, g, b),\r\n        delta = cmax - cmin,\r\n        h = 0,\r\n        s = 0,\r\n        l = ((cmax + cmin) / 2);\r\n    if (delta === 0) {\r\n        s = 0;\r\n        h = 0;\r\n    }else {\r\n        if (l <= 0.5) {\r\n            s = delta / (cmax + cmin);\r\n        } else {\r\n            s = delta / (2 - cmax-cmin);\r\n        };\r\n        if (cmax === r) {\r\n            h = (g - b) / delta;\r\n        } else if (cmax === g) {\r\n            h = ((b - r) / delta) + 2;\r\n        } else if(cmax === b) {\r\n            h = ((r - g) / delta) + 4;\r\n        }\r\n    }\r\n    h = Math.round(h * 60);\r\n    if (h < 0) {\r\n        h += 360;\r\n    }\r\n    s = Math.abs(s * 100).toFixed(0);\r\n    l = (l * 100 ).toFixed(0);\r\n    let hsl = [h, s + '%', l + '%'];\r\n    return hsl;\r\n}","export default function rgbaToHsla(rgba) {\r\n    var r = rgba[0],\r\n        g = rgba[1],\r\n        b = rgba[2],\r\n        a = rgba[3];\r\n        var r = parseInt(rgba[1], 16);\r\n        var g = parseInt(rgba[2], 16);\r\n        var b = parseInt(rgba[3], 16);\r\n        var a = parseInt(rgba[4], 16);\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n        let cmin = Math.min(r, g, b),\r\n            cmax = Math.max(r, g, b),\r\n            delta = cmax - cmin,\r\n            h = 0,\r\n            s = 0,\r\n            l = ((cmax + cmin) / 2);\r\n        if (delta === 0) {\r\n            s = 0;\r\n            h = 0;\r\n        }else {\r\n            if (l <= 0.5) {\r\n                s = delta / (cmax + cmin);\r\n            } else {\r\n                s = delta / (2 - cmax-cmin);\r\n            };\r\n            if (cmax === r) {\r\n                h = (g - b) / delta;\r\n            } else if (cmax === g) {\r\n                h = ((b - r) / delta) + 2;\r\n            } else if(cmax === b) {\r\n                h = ((r - g) / delta) + 4;\r\n            }\r\n        }\r\n        h = Math.round(h * 60);\r\n        if (h < 0) {\r\n            h += 360;\r\n        }\r\n        s = Math.abs(s * 100).toFixed(0);\r\n        l = (l * 100 ).toFixed(0);\r\n        let hsla = [h, s + '%', l + '%', a];\r\n        return hsla;\r\n    }","/*\r\nCustom color picker to replace default color picker from input[type=\"color\"],\r\nallowing for the use of alpha channel. The color picker is open on click,\r\nand closes on blur. \r\nThe color preview is set on color change, and applied when confirmed, by use \r\nof the callback function setColor, which is passed as props.\r\nThe return value is always in hsl or hsla format.\r\nThe alpha channel is used only if the useAlpha prop is true.\r\n\r\nTODO: \r\nAdd support for gradients,\r\nAdd support for color values RGB, RGBA, hex, and hex with alpha\r\n*/\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport hexToRgb from \"./Converters/hexToRgb\";\r\nimport hexToRgba from \"./Converters/hexToRgba\";\r\nimport rgbToHsl from \"./Converters/rgbToHsl\";\r\nimport rgbaToHsla from \"./Converters/rgbaToHsla\";\r\nimport nameToHsl from \"./Converters/nameToHsl\";\r\nimport \"../styles.css\";\r\n\r\nexport default function ColorPicker({ color, setColor, useAlpha }) {\r\n    const colorPickerRef = useRef(null);\r\n    const hueLumRef = useRef(null);\r\n    const saturationRef = useRef(null);\r\n    const alphaRef = useRef(null);\r\n    const [colorSelectorPos, setColorSelectorPos] = useState({ x: 0, y: 0 });\r\n    const [saturationSliderPos, setSaturationSliderPos] = useState(0);\r\n    const [alphaSliderPos, setAlphaSliderPos] = useState(0);\r\n    const [open, setOpen] = useState(false);\r\n    const [hue, setHue] = useState(0);\r\n    const [lightness, setLightness] = useState(50);\r\n    const [saturation, setSaturation] = useState(100);\r\n    const [alpha, setAlpha] = useState(100);\r\n\r\n    // Focus color picker when open, allowing its closing on blur\r\n    useEffect(() => {\r\n        if (open) {\r\n            colorPickerRef.current.focus();\r\n        }\r\n    }, [open]);\r\n\r\n    // Closes color picker on blur\r\n    const handleBlur = (event) => {\r\n        if (!event.currentTarget.contains(event.relatedTarget)) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    // Set displayed color based on current hue, saturation, and lightness, and uptades slider positions\r\n    useEffect(() => {\r\n        if (color) {\r\n            if (useAlpha) {\r\n                let hslaColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslaColor = rgbaToHsla(hexToRgba(color));\r\n                } else if (color.slice(0, 4) === \"rgba\") {\r\n                    hslaColor = rgbaToHsla(color);\r\n                } else if (color.slice(0, 4) === \"hsla\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslaColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslaColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                }\r\n                setHue(Number(hslaColor[0]));\r\n                setSaturation(Number(hslaColor[1].slice(0, hslaColor[1].length - 1)));\r\n                setLightness(Number(hslaColor[2].slice(0, hslaColor[2].length - 1)));\r\n                setAlpha(Number(hslaColor[3]));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslaColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslaColor[2].slice(0, hslaColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslaColor[1].slice(0, hslaColor[1].length - 1)) / 100) * saturationRect.height);\r\n                    const alphaRect = alphaRef.current.getBoundingClientRect();\r\n                    setAlphaSliderPos(hslaColor[3] * alphaRect.width);\r\n                }\r\n            } else {\r\n                let hslColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslColor = rgbToHsl(hexToRgb(color));\r\n                } else if (color.slice(0, 3) === \"rgb\") {\r\n                    hslColor = rgbToHsl(color);\r\n                } else if (color.slice(0, 3) === \"hsl\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    hslColor = nameToHsl(color);\r\n                }\r\n                setHue(Number(hslColor[0]));\r\n                setSaturation(Number(hslColor[1].slice(0, hslColor[1].length - 1)));\r\n                setLightness(Number(hslColor[2].slice(0, hslColor[2].length - 1)));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslColor[2].slice(0, hslColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslColor[1].slice(0, hslColor[1].length - 1)) / 100) * saturationRect.height);\r\n                }\r\n            }\r\n        }\r\n    }, [open, color, useAlpha])\r\n\r\n    // Draw color map for hue on the x axis and lightness on the y axis, for the current saturation value\r\n    const drawColorMap = (ctx) => {\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        let blockwidth = ctx.canvas.width / 360;\r\n        let blockheight = ctx.canvas.height / 100;\r\n        for (let i = 0; i < 360; i++) {\r\n            for (let j = 0; j < 100; j++) {\r\n                ctx.fillStyle = `hsl(${i},${saturation}%,${100 - j}%)`;\r\n                ctx.fillRect(i * blockwidth, j * blockheight, (i + 1) * blockwidth, (j + 1) * blockheight);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates color map when saturation changes\r\n    useEffect(() => {\r\n        if (hueLumRef.current) {\r\n            const ctxColorPicker = hueLumRef.current.getContext(\"2d\", { alpha: false });\r\n            drawColorMap(ctxColorPicker);\r\n        }\r\n\r\n    }, [open, saturation]);\r\n\r\n    //Updates hue and luminance map slider positions when mouse moves, as well as their respective values\r\n    const handleHueLumMap = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = hueLumRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setColorSelectorPos({ x, y });\r\n                setHue(Math.floor(360 * x / rect.width));\r\n                setLightness(100 - Math.floor(100 * y / rect.height));\r\n            }\r\n        }\r\n    };\r\n    const touchHueLumMap = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = hueLumRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setColorSelectorPos({ x, y });\r\n                setHue(Math.floor(360 * x / rect.width));\r\n                setLightness(100 - Math.floor(100 * y / rect.height));\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates saturation slider position when mouse moves, as well as its value\r\n    const handleSaturationSlider = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = saturationRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setSaturation(100 - Math.floor(100 * y / rect.height));\r\n                setSaturationSliderPos(y);\r\n            }\r\n        }\r\n    };\r\n    const touchSaturationSlider = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = saturationRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setSaturation(100 - Math.floor(100 * y / rect.height));\r\n                setSaturationSliderPos(y);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates alpha slider position when mouse moves, as well as its value\r\n    const handleAlphaSlider = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = alphaRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setAlpha((Math.floor(100 * x / rect.width)) / 100);\r\n                setAlphaSliderPos(x);\r\n            }\r\n        }\r\n    };\r\n    const touchAlphaSlider = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = alphaRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setAlpha((Math.floor(100 * x / rect.width)) / 100);\r\n                setAlphaSliderPos(x);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const handleHueInput = (value) => {\r\n        setHue(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, x: value / 360 * rect.width });\r\n    };\r\n\r\n    const handleLumInput = (value) => {\r\n        setLightness(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, y: (100 - value) / 100 * rect.height });\r\n    };\r\n\r\n    const handleSaturationInput = (value) => {\r\n        setSaturation(value);\r\n        const rect = saturationRef.current.getBoundingClientRect();\r\n        setSaturationSliderPos(((100 - value) / 100) * rect.height);\r\n    };\r\n\r\n    const handleAlphaInput = (value) => {\r\n        setAlpha(value);\r\n        const rect = alphaRef.current.getBoundingClientRect();\r\n        setAlphaSliderPos(value * rect.width);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <color-picker-button onClick={() => setOpen(!open)} >\r\n                <div>\r\n                    <button style={{ background: color }} />\r\n                </div>\r\n            </color-picker-button>\r\n            {open && createPortal(\r\n                <color-picker-window\r\n                    tabIndex=\"0\"\r\n                    ref={colorPickerRef}\r\n                    onBlur={(e) => handleBlur(e)}\r\n                >\r\n                    <div>\r\n                        <hue-light-map>\r\n                            <canvas\r\n                                onMouseDown={(e) => handleHueLumMap(e)}\r\n                                onMouseMove={(e) => handleHueLumMap(e)}\r\n                                onTouchMove={(e) => touchHueLumMap(e)}\r\n                                onTouchStart={(e) => touchHueLumMap(e)}\r\n                                onTouchEnd={(e) => touchHueLumMap(e)}\r\n                                ref={hueLumRef} width=\"180\" height=\"180\"\r\n                                style={{ opacity: useAlpha ? alpha : 1 }}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: colorSelectorPos.y,\r\n                                    left: colorSelectorPos.x,\r\n                                    background:\r\n                                        useAlpha ?\r\n                                            `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` :\r\n                                            `hsl(${hue},${saturation}%,${lightness}%)`\r\n                                }}\r\n                                onMouseDown={(e) => handleHueLumMap(e)}\r\n                                onMouseMove={(e) => handleHueLumMap(e)}\r\n                                onTouchMove={(e) => touchHueLumMap(e)}\r\n                                onTouchStart={(e) => touchHueLumMap(e)}\r\n                                onTouchEnd={(e) => touchHueLumMap(e)}\r\n                            />\r\n                        </hue-light-map>\r\n                        <saturation-slider title=\"Saturation\">\r\n                            <div\r\n                                ref={saturationRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(0deg, hsl(${hue},0%,${lightness}%), hsla(${hue},100%,${lightness}%))`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                                onTouchMove={(e) => touchSaturationSlider(e)}\r\n                                onTouchStart={(e) => touchSaturationSlider(e)}\r\n                                onTouchEnd={(e) => touchSaturationSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: saturationSliderPos,\r\n                                    background: `hsla(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                                onTouchMove={(e) => touchSaturationSlider(e)}\r\n                                onTouchStart={(e) => touchSaturationSlider(e)}\r\n                                onTouchEnd={(e) => touchSaturationSlider(e)}\r\n                            />\r\n                        </saturation-slider>\r\n                    </div>\r\n                    {useAlpha &&\r\n                        <alpha-slider title=\"Alpha\">\r\n                            <div\r\n                                ref={alphaRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(90deg, hsla(${hue},${saturation}%,${lightness}%, 0), hsla(${hue},${saturation}%,${lightness}%, 1))`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                                onTouchMove={(e) => touchAlphaSlider(e)}\r\n                                onTouchStart={(e) => touchAlphaSlider(e)}\r\n                                onTouchEnd={(e) => touchAlphaSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    left: alphaSliderPos,\r\n                                    background: `hsl(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                                onTouchMove={(e) => touchAlphaSlider(e)}\r\n                                onTouchStart={(e) => touchAlphaSlider(e)}\r\n                                onTouchEnd={(e) => touchAlphaSlider(e)}\r\n                            />\r\n                        </alpha-slider>\r\n                    }\r\n                    <color-inputs>\r\n                        <div>\r\n                            Hue\r\n                            <input type=\"number\" min=\"0\" max=\"360\" value={hue}\r\n                                onChange={(e) => handleHueInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Lum.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={lightness}\r\n                                onChange={(e) => handleLumInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Sat.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={saturation}\r\n                                onChange={(e) => handleSaturationInput(e.target.value)} />\r\n                        </div>\r\n                        {useAlpha &&\r\n                            <div>\r\n                                Alpha\r\n                                <input type=\"number\" min=\"0\" max=\"1\" step=\"0.01\" value={alpha}\r\n                                    onChange={(e) => handleAlphaInput(e.target.value)} />\r\n                            </div>\r\n                        }\r\n                    </color-inputs>\r\n                    <color-button >\r\n                        <button\r\n                            style={{\r\n                                background: useAlpha ? `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` : `hsl(${hue},${saturation}%,${lightness}%)`\r\n                            }}\r\n                            onClick={() => { useAlpha ? setColor(`hsla(${hue},${saturation}%,${lightness}%, ${alpha})`) : setColor(`hsl(${hue},${saturation}%,${lightness}%)`) }}\r\n                        >\r\n                            Apply\r\n                        </button>\r\n                    </color-button>\r\n                </color-picker-window>\r\n                , document.getElementById(\"root\"))}\r\n        </>\r\n    );\r\n}","export default function hexToRgba(hex) {\r\n    var result;\r\n    if (hex.length === 5) {\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n        if(result[4] == 0){\r\n            result[4] = 'ff';\r\n        }\r\n    } else if(hex.length === 9) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }else if(hex.length === 8) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        result[4] = 'ff';\r\n    }\r\n        return result\r\n            ? [\r\n                parseInt(result[1], 16),\r\n                parseInt(result[2], 16),\r\n                parseInt(result[3], 16),\r\n                parseInt(result[4], 16) / 255,\r\n            ]\r\n            : null;\r\n}","export default function hexToRgb(hex) {\r\n    var result;\r\n    if(hex.length === 4){\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n    }else{\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }\r\n    return result\r\n        ? [\r\n               parseInt(result[1], 16),\r\n               parseInt(result[2], 16),\r\n               parseInt(result[3], 16),\r\n          ]\r\n        : null;\r\n}","export default function nameToHsl(name) {\r\n    switch(name){\r\n        case \"red\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"green\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"blue\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"yellow\":\r\n            return [60, \"100%\", \"50%\"];\r\n        case \"cyan\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"magenta\":\r\n            return [300, \"100%\", \"50%\"];\r\n        case \"black\":\r\n            return [0, \"0%\", \"0%\"];\r\n        case \"white\":\r\n            return [0, \"0%\", \"100%\"];\r\n        case \"gray\":\r\n        case \"grey\":\r\n            return [0, \"0%\", \"50%\"];\r\n        case \"lightgray\":\r\n        case \"lightgrey\":\r\n            return [0, \"0%\", \"75%\"];\r\n        case \"darkgray\":\r\n        case \"darkgrey\":\r\n            return [0, \"0%\", \"25%\"];\r\n        case \"brown\":\r\n            return [30, \"50%\", \"50%\"];\r\n        case \"orange\":\r\n            return [30, \"100%\", \"50%\"];\r\n        case \"purple\":\r\n            return [270, \"100%\", \"50%\"];\r\n        case \"pink\":\r\n            return [330, \"100%\", \"50%\"];\r\n        case \"lime\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"teal\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"aqua\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"maroon\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"navy\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"olive\":\r\n            return [60, \"100%\", \"50%\"];\r\n        default:\r\n            return [0, \"0%\", \"0%\"];\r\n    }\r\n}"],"names":["Global","theme","useContext","ThemeContext","_jsx","_Fragment","children","_jsxs","value","onChange","e","setTheme","target","themeList","map","DesktopPreview","className","style","zIndex","FcGlobe","Desktop","background","BackgroundContext","backgroundMenu","setBackgroundMenu","useState","state","active","root","document","querySelector","desktopBkgrColor","setDesktopBkgrColor","getComputedStyle","getPropertyValue","useEffect","setProperty","desktopBkgrImage","setDesktopBkgrImage","desktopBkgrSize","setDesktopBkgrSize","desktopBkgrPosition","setDesktopBkgrPosition","desktopBkgrRepeat","setDesktopBkgrRepeat","desktopFontSize","setDesktopFontSize","slice","desktopIconSize","setDesktopIconSize","color","type","gradient","degree","color1","color2","image","url","position","size","repeat","onClick","setActive","ColorPicker","setColor","useAlpha","htmlFor","id","accept","file","reader","FileReader","readAsDataURL","onload","readerEvent","setImage","result","uploadImage","files","cursor","setScenario","isActive","checked","min","max","step","inclination","azimuth","turbidity","rayleight","intensity","count","near","far","Number","WindowPreview","themeContext","top","left","width","height","backgroundColor","borderColor","topBarIconTheme","FaRegWindowMinimize","FaWindowMaximize","AiOutlineClose","RiCloseLargeLine","Window","windowFontColor","setWindowFontColor","windowFontColorInactive","setWindowFontColorInactive","fontSize","setFontSize","topbarTitleAlign","setTopbarTitleAlign","topbarFontColor","setTopbarFontColor","bkgColor","setBkgColor","windowPadding","setWindowPadding","topbarFlexDirection","setTopbarFlexDirection","topbarBkgColor","setTopbarBkgColor","topBarHeight","setTopBarHeight","topBarIconSize","setTopBarIconSize","borderWidth","setBorderWidth","borderRadius","setBorderRadius","borderType","setBorderType","setBorderColor","shadowXOffset","setShadowXOffset","shadowYOffset","setShadowYOffset","shadowBlur","setShadowBlur","shadowSpread","setShadowSpread","shadowColor","setShadowColor","inactiveBorderColor","setInactiveBorderColor","inactiveTopBarBkgColor","setInactiveTopBarBkgColor","topbarFontColorInactive","setTopbarFontColorInactive","inactiveBkgColor","setInactiveBkgColor","windowBackgroundFX","setWindowBackgroundFX","backgroundFXList","backgroundFX","setTopBarIconTheme","topBarIconThemeList","iconTheme","MenuPreview","NavMenu","Fragment","disabled","name","paddingTop","navMenuLocation","Menu","navBkgrColor","setNavBkgrColor","navBkgrColorInactive","setNavBkgrColorInactive","setBackgroundColor","fontColor","setFontColor","hoverFontColor","setHoverFontColor","hoverBkgr","setHoverBkgr","navButtonBkgr","setNavButtonBkgr","navButtonFontColor","setNavButtonFontColor","navButtonHoverBkgr","setNavButtonHoverBkgr","navButtonHoverFontColor","setNavButtonHoverFontColor","navButtonBorderColor","setNavButtonBorderColor","navButtonBorderWidth","setNavButtonBorderWidth","navButtonBorderRadius","setNavButtonBorderRadius","navButtonBorderType","setNavButtonBorderType","setNavMenuLocation","navMenuLocationList","location","AppPreview","textAlign","App","fontColorInactive","setFontColorInactive","bkgColorInactive","setBkgColorInactive","borderColorInactive","setBorderColorInactive","alpha","DialogPreview","buttonClassNeutral","setButtonClassNeutral","buttonClassSuggested","setButtonClassSuggested","buttonClassClose","setButtonClassClose","dialogButtonTheme","setButtonClass","DialogButtonsBar","transform","marginBottom","dialogButtonsLocation","Dialog","dialogBkgrColor","setDialogBkgrColor","dialogBorderColor","setDialogBorderColor","dialogBorderWidth","setDialogBorderWidth","dialogBorderRadius","setDialogBorderRadius","dialogBorderType","setDialogBorderType","dialogInfoBkgr","setDialogInfoBkgr","dialogInfoFontColor","setDialogInfoFontColor","dialogInfoFontSize","setDialogInfoFontSize","dialogInfoBorderColor","setDialogInfoBorderColor","dialogInfoBorderWidth","setDialogInfoBorderWidth","dialogInfoBorderRadius","setDialogInfoBorderRadius","dialogInfoBorderType","setDialogInfoBorderType","dialogPadding","setDialogPadding","dialogTopBarBkgr","setDialogTopBarBkgr","dialogTopBarFontSize","setDialogTopBarFontSize","dialogTopBarFontColor","setDialogTopBarFontColor","dialogButtonBarBkgr","setDialogButtonBarBkgr","dialogButtonBkgr","setDialogButtonBkgr","dialogButtonFontColor","setDialogButtonFontColor","dialogButtonFontSize","setDialogButtonFontSize","dialogButtonBorderColor","setDialogButtonBorderColor","dialogButtonBorderWidth","setDialogButtonBorderWidth","dialogButtonBorderRadius","setDialogButtonBorderRadius","dialogButtonBorderType","setDialogButtonBorderType","setDialogButtonsLocation","dialogButtonsLocationList","buttonLocation","setDialogButtonTheme","dialogButtonThemeList","buttonTheme","TaskBarPreview","startButtonClass","ans","startButtonTheme","display","flexDirection","justifyContent","bottom","viewBox","fill","xmlns","gradientTransform","offset","d","stroke","strokeWidth","TaskBar","taskbarHeight","setTaskbarHeight","taskbarIconSize","setTaskbarIconSize","taskbarBkgr","setTaskbarBkgr","taskbarFontSize","setTaskbarFontSize","taskbarBackgroundFX","setTaskbarBackgroundFX","fx","StartPreview","mixBlendMode","class","transition","FcInfo","FcSettings","FaGear","MdOutlineRestartAlt","RiShutDownLine","Start","startIconColor","setStartIconColor","startMenuBkgr","setStartMenuBkgr","startMenuFontColor","setStartMenuFontColor","setStartButtonTheme","startButtonThemeList","TrayPreview","WiCloudy","Tray","weatherColor","setWeatherColor","weatherBkgr","setWeatherBkgr","weatherFontColor","setWeatherFontColor","clockColor","setClockColor","clockBkgr","setClockBkgr","clockFontColor","setClockFontColor","ContextMenuPreview","checkbox1","setCheckbox1","checkbox2","setCheckbox2","radio","setRadio","readOnly","ContextMenu","hoverColor","setHoverColor","padding","setPadding","Definitions","subMenu","setSubMenu","defPage","setDefPage","onSubmit","preventDefault","Scenario","Ocean","ref","useRef","gl","useThree","waterNormals","useLoader","THREE","WaterNormals","wrapS","wrapT","geom","useMemo","config","textureWidth","textureHeight","sunDirection","sunColor","waterColor","distortionScale","fog","format","encoding","useFrame","delta","current","material","uniforms","time","args","Math","PI","Desert","hillsNormals","HillsNormals","sandTexture","SandTexture","set","Plane","metalness","roughness","normalMap","normalScale","displacementMap","displacementScale","Canvas","dpr","window","devicePixelRatio","camera","attach","OrbitControls","Suspense","fallback","Sky","distance","rayleigh","exposure","Stars","radius","extend","Water","rgbToHsl","rgb","r","g","b","cmin","cmax","h","s","l","round","abs","toFixed","rgbaToHsla","rgba","a","parseInt","_ref","colorPickerRef","hueLumRef","saturationRef","alphaRef","colorSelectorPos","setColorSelectorPos","x","y","saturationSliderPos","setSaturationSliderPos","alphaSliderPos","setAlphaSliderPos","open","setOpen","hue","setHue","lightness","setLightness","saturation","setSaturation","setAlpha","focus","hslaColor","hex","length","exec","hexToRgba","i","start","end","push","hueLumRect","getBoundingClientRect","saturationRect","alphaRect","hslColor","hexToRgb","nameToHsl","ctx","clearRect","canvas","blockwidth","blockheight","j","fillStyle","fillRect","drawColorMap","getContext","handleHueLumMap","event","buttons","rect","clientX","clientY","floor","touchHueLumMap","touches","handleSaturationSlider","touchSaturationSlider","handleAlphaSlider","touchAlphaSlider","createPortal","tabIndex","onBlur","currentTarget","contains","relatedTarget","onMouseDown","onMouseMove","onTouchMove","onTouchStart","onTouchEnd","opacity","title","handleHueInput","handleLumInput","handleSaturationInput","handleAlphaInput","getElementById"],"sourceRoot":""}