{"version":3,"file":"static/js/664.51a9758b.chunk.js","mappings":"gJAEO,MAAMA,EAASA,KAClB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAChCC,iBAAiBC,MAAMC,iBAAiB,wBAK5C,OAJAC,EAAAA,EAAAA,YAAU,KACNF,KAAKG,MAAMC,YAAY,sBAAuBR,EAAW,GAC1D,CAACA,KAGAS,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPC,EAAAA,EAAAA,MAAA,UACIC,MAAOb,EACPc,SAAWC,GAAMd,EAAcc,EAAEC,OAAOH,OAAOF,SAAA,EAE/CF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,SAAUW,SAAC,WACxCF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,mBAAoBW,SAAC,qBAClDF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,aAAcW,SAAC,eAC5CF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,WAAYW,SAAC,aAC1CF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,WAAYW,SAAC,aAC1CF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,eAAgBW,SAAC,iBAC9CF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,UAAWW,SAAC,YACzCF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,YAAaW,SAAC,cAC3CF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,UAAWW,SAAC,YACzCF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,aAAcW,SAAC,eAC5CF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,iBAAkBW,SAAC,mBAChDF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,kBAAmBW,SAAC,oBACjDF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,uBAAwBW,SAAC,yBACtDF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEP,WAAY,qBAAsBW,SAAC,6BAGzD,E,kCCzBJ,MAAMM,EAAiBA,KAE1BR,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKM,UAAU,kBAAkBX,MAAO,CAAEY,OAAQ,GAAIR,SAAA,EACpDF,EAAAA,EAAAA,KAACW,EAAAA,IAAO,CAACF,UAAU,gBAAgB,gBAO9BG,EAAUA,KACrB,MAAMC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,KACvBC,EAAgBC,IAAqBxB,EAAAA,EAAAA,UAASoB,EAAWK,MAAMC,QACtE,IAAIxB,EAAOyB,SAASC,cAAc,SAClC,MAAOC,EAAkBC,IAAuB9B,EAAAA,EAAAA,UAC9CC,iBAAiBC,GAAMC,iBAAiB,wBAEnC4B,EAAkBC,IAAuBhC,EAAAA,EAAAA,UAC9CC,iBAAiBC,GAAMC,iBAAiB,wBAEnC8B,EAAiBC,IAAsBlC,EAAAA,EAAAA,UAC5CC,iBAAiBC,GAAMC,iBAAiB,uBAEnCgC,EAAqBC,IAA0BpC,EAAAA,EAAAA,UACpDC,iBAAiBC,GAAMC,iBAAiB,2BAEnCkC,EAAmBC,IAAwBtC,EAAAA,EAAAA,UAChDC,iBAAiBC,GAAMC,iBAAiB,yBAEnCoC,EAAiBC,IAAsBxC,EAAAA,EAAAA,UAC5CC,iBAAiBC,GAAMC,iBAAiB,qBAAqBsC,MAAM,GAAI,KAElEC,EAAiBC,IAAsB3C,EAAAA,EAAAA,UAC5CC,iBAAiBC,GAAMC,iBAAiB,qBAAqBsC,MAAM,GAAI,IAmDzE,OAnCArC,EAAAA,EAAAA,YAAU,KACRF,EAAKG,MAAMC,YAAY,qBAAsBuB,GAC7C3B,EAAKG,MAAMC,YAAY,qBAAsByB,GAC7C7B,EAAKG,MAAMC,YAAY,oBAAqB2B,GAC5C/B,EAAKG,MAAMC,YAAY,wBAAyB6B,GAChDjC,EAAKG,MAAMC,YAAY,sBAAuB+B,GAC9CnC,EAAKG,MAAMC,YAAY,oBAAqBiC,EAAkB,MAC9DrC,EAAKG,MAAMC,YAAY,oBAAqBoC,EAAkB,KAAK,GAClE,CAACb,EAAkBE,EAAkBE,EAAiBE,EAAqBE,EAAmBE,EAAiBG,KAElHtC,EAAAA,EAAAA,YAAU,KACwB,UAA5BgB,EAAWK,MAAMC,OACiB,UAAhCN,EAAWK,MAAMmB,MAAMC,MACzBf,EAAoBV,EAAWK,MAAMmB,MAAMA,OAC3CZ,EAAoB,SACqB,aAAhCZ,EAAWK,MAAMmB,MAAMC,OACa,WAAzCzB,EAAWK,MAAMmB,MAAME,SAASD,MAClCf,EAAoB,mBAAmBV,EAAWK,MAAMmB,MAAME,SAASC,cAAc3B,EAAWK,MAAMmB,MAAME,SAASE,WAAW5B,EAAWK,MAAMmB,MAAME,SAASG,WAChKjB,EAAoB,SAC8B,WAAzCZ,EAAWK,MAAMmB,MAAME,SAASD,OACzCf,EAAoB,mBAAmBV,EAAWK,MAAMmB,MAAME,SAASE,WAAW5B,EAAWK,MAAMmB,MAAME,SAASG,WAClHjB,EAAoB,UAGa,UAA5BZ,EAAWK,MAAMC,QACtBN,EAAWK,MAAMyB,MAAMC,MACzBrB,EAAoBV,EAAWK,MAAMmB,MAAMA,OAC3CZ,EAAoB,OAAOZ,EAAWK,MAAMyB,MAAMC,QAClDf,EAAuBhB,EAAWK,MAAMyB,MAAME,UAC9ClB,EAAmBd,EAAWK,MAAMyB,MAAMG,MAC1Cf,EAAqBlB,EAAWK,MAAMyB,MAAMI,QAEhD,GACC,CAAClC,EAAWK,SAGbf,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,CAAQ,eACNF,EAAAA,EAAAA,KAAA,OAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAQC,MAAOY,EAAgBX,SAAWC,GAAMW,EAAkBX,EAAEC,OAAOH,OAAOF,SAAA,EAChFF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,WAAUF,SAAC,wBAGX,UAAnBc,GACCb,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACES,UAC8B,UAA5BI,EAAWK,MAAMC,OACb,gCACA,gBAEN6B,QAASA,IAAMnC,EAAWoC,UAAU,SAAS/C,SAC9C,sBAGDF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,4BACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOf,EACP6B,SAAU5B,EACV6B,UAAU,QAIdpD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAEkB,UAAnBe,GACCb,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACES,UAC8B,UAA5BI,EAAWK,MAAMC,OACb,gCACA,gBAEN6B,QAASA,IAAMnC,EAAWoC,UAAU,SAAS/C,SAC9C,eAGDF,EAAAA,EAAAA,KAAA,SAAOqD,QAAQ,cAAanD,SAAC,oBAC7BF,EAAAA,EAAAA,KAAA,SACEsD,GAAG,cACHhB,KAAK,OACLiB,OAAO,UACPlD,SAAWC,IAlGFkD,KACnB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAUC,IACfhD,EAAWiD,SACTD,EAAYtD,OAAOwD,OACnBlD,EAAWK,MAAMyB,MAAME,SACvBhC,EAAWK,MAAMyB,MAAMG,KACvBjC,EAAWK,MAAMyB,MAAMI,OAAO,CACjC,EAyF4BiB,CAAY1D,EAAEC,OAAO0D,MAAM,GAAG,KACnDjE,EAAAA,EAAAA,KAAA,SAAOqD,QAAQ,gBAAenD,SAAC,gBAC/BC,EAAAA,EAAAA,MAAA,UAAQmD,GAAG,gBACTlD,MAAOS,EAAWK,MAAMyB,MAAME,SAC9BxC,SAAWC,IACTO,EAAWiD,SACTjD,EAAWK,MAAMyB,MAAMa,KACvBlD,EAAEC,OAAOH,MACTS,EAAWK,MAAMyB,MAAMG,KACvBjC,EAAWK,MAAMyB,MAAMI,QAEzBlB,EAAuBvB,EAAEC,OAAOH,MAAM,EACtCF,SAAA,EACFF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,MAAKF,SAAC,SACpBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,WAAUF,SAAC,cACzBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,YAAWF,SAAC,eAC1BF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,cAAaF,SAAC,iBAC5BF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,eAAcF,SAAC,kBAC7BF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,OAAMF,SAAC,UACrBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,cAExBF,EAAAA,EAAAA,KAAA,SAAOqD,QAAQ,YAAWnD,SAAC,YAC3BC,EAAAA,EAAAA,MAAA,UAAQmD,GAAG,YACTlD,MAAOS,EAAWK,MAAMyB,MAAMG,KAC9BzC,SAAWC,IACTO,EAAWiD,SACTjD,EAAWK,MAAMyB,MAAMa,KACvB3C,EAAWK,MAAMyB,MAAME,SACvBvC,EAAEC,OAAOH,MACTS,EAAWK,MAAMyB,MAAMI,QAEzBpB,EAAmBrB,EAAEC,OAAOH,MAAM,EAClCF,SAAA,EACFF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,OAAMF,SAAC,UACrBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,UAASF,SAAC,aACxBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,cAAaF,SAAC,gBAE9BF,EAAAA,EAAAA,KAAA,SAAOqD,QAAQ,cAAanD,SAAC,cAC7BC,EAAAA,EAAAA,MAAA,UAAQmD,GAAG,cACTlD,MAAOS,EAAWK,MAAMyB,MAAMI,OAC9B1C,SAAWC,IACTO,EAAWiD,SACTjD,EAAWK,MAAMyB,MAAMa,KACvB3C,EAAWK,MAAMyB,MAAME,SACvBhC,EAAWK,MAAMyB,MAAMG,KACvBxC,EAAEC,OAAOH,OAEX2B,EAAqBzB,EAAEC,OAAOH,MAAM,EACpCF,SAAA,EAEFF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,YAAWF,SAAC,eAC1BF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,WAAUF,SAAC,cACzBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,WAAUF,SAAC,oBAI7BF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,KAE6BD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACX,aAAnBe,GACCb,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACES,UAC8B,aAA5BI,EAAWK,MAAMC,OACb,gCACA,gBAEN6B,QAASA,IAAMnC,EAAWoC,UAAU,YAAY/C,SACjD,kBAGDC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UACAL,MAAO,CAACoE,OAAO,WACflB,QAASA,IAAMnC,EAAWsD,YAAY,MAAO,YAAatD,EAAWK,MAAgB,SAAO,IAAEkD,UAAUlE,SAAA,EAEtGF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,WACL+B,QAASxD,EAAWK,MAAgB,SAAO,IAAEkD,SAC7C/D,SAAUA,IAAMQ,EAAWsD,YAAY,MAAO,YAAatD,EAAWK,MAAgB,SAAO,IAAEkD,YAC/F,eAGHvD,EAAWK,MAAgB,SAAO,IAAEkD,WACnCjE,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EAAEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACAF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAI,OACJC,IAAI,IACJC,KAAK,QACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAEuD,YAC3CpE,SAAWC,GACTO,EAAWsD,YAAY,MAAO,cAAe7D,EAAEC,OAAOH,UAG1DJ,EAAAA,EAAAA,KAAA,SACEsC,KAAK,SACLgC,IAAI,OACJC,IAAI,IACJC,KAAK,QACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAEuD,YAC3CpE,SAAWC,GACTO,EAAWsD,YAAY,MAAO,cAAe7D,EAAEC,OAAOH,aAI1DD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAI,IACJC,IAAI,IACJC,KAAK,OACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAEwD,QAC3CrE,SAAWC,GACTO,EAAWsD,YAAY,MAAO,UAAW7D,EAAEC,OAAOH,UAGtDJ,EAAAA,EAAAA,KAAA,SACEsC,KAAK,SACLgC,IAAI,IACJC,IAAI,IACJC,KAAK,OACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAEwD,QAC3CrE,SAAWC,GACTO,EAAWsD,YAAY,MAAO,UAAW7D,EAAEC,OAAOH,aAIxDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,OACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAEyD,UAC3CtE,SAAWC,GACTO,EAAWsD,YAAY,MAAO,YAAa7D,EAAEC,OAAOH,UAGxDJ,EAAAA,EAAAA,KAAA,SACEsC,KAAK,SACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,OACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAEyD,UAC3CtE,SAAWC,GACTO,EAAWsD,YAAY,MAAO,YAAa7D,EAAEC,OAAOH,aAI1DD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,OACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAE0D,UAC3CvE,SAAWC,GACTO,EAAWsD,YAAY,MAAO,YAAa7D,EAAEC,OAAOH,UAGxDJ,EAAAA,EAAAA,KAAA,SACEsC,KAAK,SACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,OACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAE0D,UAC3CvE,SAAWC,GACTO,EAAWsD,YAAY,MAAO,YAAa7D,EAAEC,OAAOH,mBAMhED,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,mBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOxB,EAAWK,MAAgB,SAAgB,aAAEmB,MACpDc,SAAWd,GACTxB,EAAWsD,YAAY,eAAgB,QAAS9B,GAClDe,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,MACLpE,MAAOS,EAAWK,MAAgB,SAAgB,aAAE2D,UACpDxE,SAAWC,GACTO,EAAWsD,YAAY,eAAgB,YAAa7D,EAAEC,OAAOH,UAGjEJ,EAAAA,EAAAA,KAAA,SACEsC,KAAK,SACLgC,IAAI,IACJC,IAAI,KACJC,KAAK,MACLpE,MAAOS,EAAWK,MAAgB,SAAgB,aAAE2D,UACpDxE,SAAWC,GACTO,EAAWsD,YAAY,eAAgB,YAAa7D,EAAEC,OAAOH,gBAKrED,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,uBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACHF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOxB,EAAWK,MAAgB,SAAoB,iBAAEmB,MACxDc,SAAWd,GACTxB,EAAWsD,YAAY,mBAAoB,QAAS9B,GACtDe,UAAU,QAGlBjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAI,IACJC,IAAI,YACJC,KAAK,MACLpE,MAAOS,EAAWK,MAAgB,SAAoB,iBAAE2D,UACxDxE,SAAWC,GAAMO,EAAWsD,YAAY,mBAAoB,YAAa7D,EAAEC,OAAOH,UAEpFJ,EAAAA,EAAAA,KAAA,SACEsC,KAAK,SACLgC,IAAI,IACJC,IAAI,YACJC,KAAK,MACLpE,MAAOS,EAAWK,MAAgB,SAAoB,iBAAE2D,UACxDxE,SAAWC,GAAMO,EAAWsD,YAAY,mBAAoB,YAAa7D,EAAEC,OAAOH,gBAIxFD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UACAL,MAAO,CAACoE,OAAO,WACflB,QAASA,IAAMnC,EAAWsD,YAAY,QAAS,YAAatD,EAAWK,MAAgB,SAAS,MAAEkD,UAAUlE,SAAA,EAE1GF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,WACL+B,QAASxD,EAAWK,MAAgB,SAAS,MAAEkD,SAC/C/D,SAAWC,GAAMO,EAAWsD,YAAY,QAAS,YAAatD,EAAWK,MAAgB,SAAS,MAAEkD,YACpG,WAGHvD,EAAWK,MAAgB,SAAS,MAAEkD,WACrCpE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAI,IACJC,IAAI,SACJnE,MAAOS,EAAWK,MAAgB,SAAS,MAAE4D,MAC7CzE,SAAWC,GACTO,EAAWsD,YAAY,QAAS,QAAS7D,EAAEC,OAAOH,kBAM9DD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,UACAL,MAAO,CAACoE,OAAO,WACflB,QAASA,IAAMnC,EAAWsD,YAAY,MAAO,YAAatD,EAAWK,MAAgB,SAAO,IAAEkD,UAAUlE,SAAA,EACtGF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,WACL+B,QAASxD,EAAWK,MAAgB,SAAO,IAAEkD,SAC7C/D,SAAWC,GAAMO,EAAWsD,YAAY,MAAO,YAAatD,EAAWK,MAAgB,SAAO,IAAEkD,YAChG,SAGHvD,EAAWK,MAAgB,SAAO,IAAEkD,WACnCjE,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOxB,EAAWK,MAAgB,SAAO,IAAEmB,MAC3Cc,SAAWd,GAAUxB,EAAWsD,YAAY,MAAO,QAAS9B,GAC5De,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,WACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAI,IACJC,IAAI,OACJC,KAAK,IACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAE6D,KAC3C1E,SAAWC,GACTO,EAAWsD,YAAY,MAAO,OAAQ7D,EAAEC,OAAOH,UAGnDJ,EAAAA,EAAAA,KAAA,SACEsC,KAAK,SACLgC,IAAI,IACJC,IAAI,OACJC,KAAK,IACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAE6D,KAC3C1E,SAAWC,GACTO,EAAWsD,YAAY,MAAO,OAAQ7D,EAAEC,OAAOH,aAIrDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,UACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAI,IACJC,IAAI,OACJC,KAAK,IACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAE8D,IAC3C3E,SAAWC,GACTO,EAAWsD,YAAY,MAAO,MAAO7D,EAAEC,OAAOH,UAGlDJ,EAAAA,EAAAA,KAAA,SACEsC,KAAK,SACLgC,IAAI,IACJC,IAAI,OACJC,KAAK,IACLpE,MAAOS,EAAWK,MAAgB,SAAO,IAAE8D,IAC3C3E,SAAWC,GACTO,EAAWsD,YAAY,MAAO,MAAO7D,EAAEC,OAAOH,mBAM1DD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,UACPF,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,WACZ+B,QAASxD,EAAWK,MAAgB,SAAS,MAAEkD,SAC/C/D,SAAUA,IAAMQ,EAAWsD,YAAY,QAAS,YAAatD,EAAWK,MAAgB,SAAS,MAAEkD,gBAGrGjE,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,WACZ+B,QAASxD,EAAWK,MAAgB,SAAU,OAAEkD,SAChD/D,SAAUA,IAAMQ,EAAWsD,YAAY,SAAU,YAAatD,EAAWK,MAAgB,SAAU,OAAEkD,sBAM3GpE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,QAGJE,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,eACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,IACLC,KAAK,IACLpE,MAAO6E,OAAO9C,GACd9B,SAAWC,GAAM8B,EAAmB9B,EAAEC,OAAOH,aAGjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAO6E,OAAOjD,GACd3B,SAAWC,GAAM2B,EAAmB3B,EAAEC,OAAOH,iBAGlD,E,uBCxgBA,MAAM8E,EAAgBA,KAEzB/E,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,cACEF,MAAO,CACL+C,SAAU,WACVsC,IAAK,OACLC,KAAM,OACNC,MAAO,MACPC,OAAQ,QACRzE,WAAY,4BACZ0E,YAAa,oCAEf9E,UAAU,kBAAiBP,UAE3BC,EAAAA,EAAAA,MAAA,eACEL,MAAO,CACLuC,MAAO,iCACPxB,WAAY,mCACZX,SAAA,EACFF,EAAAA,EAAAA,KAACW,EAAAA,IAAO,KACRX,EAAAA,EAAAA,KAAA,MAAAE,SAAI,cACJF,EAAAA,EAAAA,KAAA,UAAAE,UACEF,EAAAA,EAAAA,KAACwF,EAAAA,IAAmB,CAAC/E,UAAU,uBAEjCT,EAAAA,EAAAA,KAAA,UAAAE,UACEF,EAAAA,EAAAA,KAACyF,EAAAA,IAAgB,CAAChF,UAAU,uBAE9BT,EAAAA,EAAAA,KAAA,UAAAE,UACEF,EAAAA,EAAAA,KAAC0F,EAAAA,IAAc,CAACjF,UAAU,qCAIhCT,EAAAA,EAAAA,KAAA,cACEF,MAAO,CACL+C,SAAU,WACVsC,IAAK,OACLC,KAAM,OACNC,MAAO,MACPC,OAAQ,QACRzE,WAAY,qBAEdJ,UAAU,MAAKP,UAEfC,EAAAA,EAAAA,MAAA,eACEL,MAAO,CACLuC,MAAO,yBACPxB,WAAY,2BACZX,SAAA,EACFF,EAAAA,EAAAA,KAACW,EAAAA,IAAO,KACRX,EAAAA,EAAAA,KAAA,MAAAE,SAAI,YACJF,EAAAA,EAAAA,KAAA,UAAAE,UACEF,EAAAA,EAAAA,KAACwF,EAAAA,IAAmB,OAEtBxF,EAAAA,EAAAA,KAAA,UAAAE,UACEF,EAAAA,EAAAA,KAACyF,EAAAA,IAAgB,OAEnBzF,EAAAA,EAAAA,KAAA,UAAQS,UAAU,kBAAiBP,UACjCF,EAAAA,EAAAA,KAAC0F,EAAAA,IAAc,YAIrBvF,EAAAA,EAAAA,MAAA,cACEL,MAAO,CACL+C,SAAU,WACVsC,IAAK,QACLC,KAAM,SACNlF,SAAA,EAEFF,EAAAA,EAAAA,KAAA,sBAAAE,SAAoB,YAGpBF,EAAAA,EAAAA,KAAA,mBAAAE,SAAiB,iBAGjBC,EAAAA,EAAAA,MAAA,sBAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,QACRF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRF,EAAAA,EAAAA,KAAA,UAAQS,UAAU,kBAAiBP,SAAC,mBAOjCyF,EAASA,KACpB,IAAIhG,EAAOyB,SAASC,cAAc,SAClC,MAAOuE,EAAUC,IAAepG,EAAAA,EAAAA,UAC9BC,iBAAiBC,GAAMC,iBAAiB,0BAA0BsC,MAAM,GAAI,KAEvE4D,EAAWC,IAAgBtG,EAAAA,EAAAA,UAChCC,iBAAiBC,GAAMC,iBAAiB,uBAEnCoG,EAAUC,IAAexG,EAAAA,EAAAA,UAC9BC,iBAAiBC,GAAMC,iBAAiB,kBAEnCsG,EAAgBC,IAAqB1G,EAAAA,EAAAA,UAC1CC,iBAAiBC,GAAMC,iBAAiB,wBAEnCwG,EAAcC,IAAmB5G,EAAAA,EAAAA,UACtCC,iBAAiBC,GAAMC,iBAAiB,wBAAwBsC,MAAM,GAAI,KAErEoE,EAAgBC,IAAqB9G,EAAAA,EAAAA,UAC1CC,iBAAiBC,GAAMC,iBAAiB,0BAA0BsC,MAAM,GAAI,KAEvEsE,EAAaC,IAAkBhH,EAAAA,EAAAA,UACpCC,iBAAiBC,GAAMC,iBAAiB,uBAAuBsC,MAAM,GAAI,KAEpEwE,EAAcC,IAAmBlH,EAAAA,EAAAA,UACtCC,iBAAiBC,GAAMC,iBAAiB,wBAAwBsC,MAAM,GAAI,KAErE0E,EAAYC,IAAiBpH,EAAAA,EAAAA,UAClCC,iBAAiBC,GAAMC,iBAAiB,wBAEnC2F,EAAauB,IAAkBrH,EAAAA,EAAAA,UACpCC,iBAAiBC,GAAMC,iBAAiB,yBAEnCmH,EAAeC,IAAoBvH,EAAAA,EAAAA,UACxCC,iBAAiBC,GAAMC,iBAAiB,yBAAyBsC,MAAM,GAAI,KAEtE+E,EAAeC,IAAoBzH,EAAAA,EAAAA,UACxCC,iBAAiBC,GAAMC,iBAAiB,yBAAyBsC,MAAM,GAAI,KAEtEiF,EAAYC,IAAiB3H,EAAAA,EAAAA,UAClCC,iBAAiBC,GAAMC,iBAAiB,sBAAsBsC,MAAM,GAAI,KAEnEmF,EAAcC,IAAmB7H,EAAAA,EAAAA,UACtCC,iBAAiBC,GAAMC,iBAAiB,wBAAwBsC,MAAM,GAAI,KAErEqF,EAAaC,IAAkB/H,EAAAA,EAAAA,UACpCC,iBAAiBC,GAAMC,iBAAiB,yBAEnC6H,EAAqBC,IAA0BjI,EAAAA,EAAAA,UACpDC,iBAAiBC,GAAMC,iBAAiB,iCAEnC+H,EAAwBC,IAA6BnI,EAAAA,EAAAA,UAC1DC,iBAAiBC,GAAMC,iBAAiB,gCAEnCiI,EAAmBC,IAAwBrI,EAAAA,EAAAA,UAChDC,iBAAiBC,GAAMC,iBAAiB,+BAEnCmI,EAAkBC,IAAuBvI,EAAAA,EAAAA,UAC9CC,iBAAiBC,GAAMC,iBAAiB,0BAEnCqI,EAAYC,IAAiBzI,EAAAA,EAAAA,UAClCC,iBAAiBC,GAAMC,iBAAiB,kBAEnCuI,EAAmBC,IAAwB3I,EAAAA,EAAAA,UAChDC,iBAAiBC,GAAMC,iBAAiB,yBAEnCyI,EAAmBC,IAAwB7I,EAAAA,EAAAA,UAChDC,iBAAiBC,GAAMC,iBAAiB,uBAAuBsC,MAAM,GAAI,KAEpEqG,EAAoBC,IAAyB/I,EAAAA,EAAAA,UAClDC,iBAAiBC,GAAMC,iBAAiB,wBAAwBsC,MAAM,GAAI,KAErEuG,EAAkBC,IAAuBjJ,EAAAA,EAAAA,UAC9CC,iBAAiBC,GAAMC,iBAAiB,wBAEnC+I,EAAqBC,IAA0BnJ,EAAAA,EAAAA,UACpDC,iBAAiBC,GAAMC,iBAAiB,2BAEnCiJ,GAAoBC,KAAyBrJ,EAAAA,EAAAA,UAClDC,iBAAiBC,GAAMC,iBAAiB,wBAAwBsC,MAAM,GAAI,KAErE6G,GAAkBC,KAAuBvJ,EAAAA,EAAAA,UAC9CC,iBAAiBC,GAAMC,iBAAiB,wBAEnCqJ,GAAsBC,KAA2BzJ,EAAAA,EAAAA,UACtDC,iBAAiBC,GAAMC,iBAAiB,0BAA0BsC,MAAM,GAAI,KAEvEiH,GAAuBC,KAA4B3J,EAAAA,EAAAA,UACxDC,iBAAiBC,GAAMC,iBAAiB,6BAEnCyJ,GAAkBC,KAAuB7J,EAAAA,EAAAA,UAC9CC,iBAAiBC,GAAMC,iBAAiB,wBAEnC2J,GAAuBC,KAA4B/J,EAAAA,EAAAA,UACxDC,iBAAiBC,GAAMC,iBAAiB,6BAEnC6J,GAAsBC,KAA2BjK,EAAAA,EAAAA,UACtDC,iBAAiBC,GAAMC,iBAAiB,0BAA0BsC,MAAM,GAAI,KAEvEyH,GAAyBC,KAA8BnK,EAAAA,EAAAA,UAC5DC,iBAAiBC,GAAMC,iBAAiB,+BAEnCiK,GAAyBC,KAA8BrK,EAAAA,EAAAA,UAC5DC,iBAAiBC,GAAMC,iBAAiB,6BAA6BsC,MAAM,GAAI,KAE1E6H,GAA0BC,KAA+BvK,EAAAA,EAAAA,UAC9DC,iBAAiBC,GAAMC,iBAAiB,8BAA8BsC,MAAM,GAAI,KAE3E+H,GAAwBC,KAA6BzK,EAAAA,EAAAA,UAC1DC,iBAAiBC,GAAMC,iBAAiB,6BAgF1C,OA9EAC,EAAAA,EAAAA,YAAU,KACRF,EAAKG,MAAMC,YAAY,yBAA0B6F,EAAW,MAC5DjG,EAAKG,MAAMC,YAAY,oBAAqB+F,GAC5CnG,EAAKG,MAAMC,YAAY,eAAgBiG,GACvCrG,EAAKG,MAAMC,YAAY,qBAAsBmG,GAC7CvG,EAAKG,MAAMC,YAAY,uBAAwBqG,EAAe,MAC9DzG,EAAKG,MAAMC,YACT,6BACA4H,GAEFhI,EAAKG,MAAMC,YAAY,yBAA0BuG,EAAiB,MAClE3G,EAAKG,MAAMC,YAAY,sBAAuByG,EAAc,MAC5D7G,EAAKG,MAAMC,YAAY,uBAAwB2G,EAAe,MAC9D/G,EAAKG,MAAMC,YAAY,qBAAsB6G,GAC7CjH,EAAKG,MAAMC,YAAY,sBAAuBwF,GAC9C5F,EAAKG,MAAMC,YAAY,8BAA+B0H,GACtD9H,EAAKG,MAAMC,YAAY,4BAA6B8H,GACpDlI,EAAKG,MAAMC,YAAY,uBAAwBgI,GAC/CpI,EAAKG,MAAMC,YAAY,eAAgBkI,GACvCtI,EAAKG,MAAMC,YAAY,sBAAuBoI,GAC9CxI,EAAKG,MAAMC,YAAY,sBAAuBsI,EAAoB,MAClE1I,EAAKG,MAAMC,YAAY,uBAAwBwI,EAAqB,MACpE5I,EAAKG,MAAMC,YAAY,qBAAsB0I,GAC7C9I,EAAKG,MAAMC,YAAY,wBAAyB4I,GAChDhJ,EAAKG,MAAMC,YAAY,uBAAwB8I,GAAqB,MACpElJ,EAAKG,MAAMC,YAAY,qBAAsBgJ,IAC7CpJ,EAAKG,MAAMC,YAAY,yBAA0BkJ,GAAuB,MACxEtJ,EAAKG,MAAMC,YAAY,0BAA2BoJ,IAClDxJ,EAAKG,MAAMC,YAAY,qBAAsBsJ,IAC7C1J,EAAKG,MAAMC,YAAY,0BAA2BwJ,IAClD5J,EAAKG,MAAMC,YAAY,yBAA0B0J,GAAuB,MACxE9J,EAAKG,MAAMC,YAAY,4BAA6B4J,IACpDhK,EAAKG,MAAMC,YAAY,4BAA6B8J,GAA0B,MAC9ElK,EAAKG,MAAMC,YAAY,6BAA8BgK,GAA2B,MAChFpK,EAAKG,MAAMC,YAAY,2BAA4BkK,IACnDtK,EAAKG,MAAMC,YAAY,wBAAyBgH,EAAgB,MAChEpH,EAAKG,MAAMC,YAAY,wBAAyBkH,EAAgB,MAChEtH,EAAKG,MAAMC,YAAY,qBAAsBoH,EAAa,MAC1DxH,EAAKG,MAAMC,YAAY,sBAAuBwH,GAC9C5H,EAAKG,MAAMC,YAAY,uBAAwBsH,EAAe,KAAK,GAClE,CACDzB,EACAE,EACAE,EACAE,EACAE,EACAE,EACAf,EACAiB,EACAE,EACAE,EACAG,EACAE,EACAE,EACAE,EACAE,EACAI,EACAE,EACAE,EACAN,EACAQ,EACAE,EACAE,EACAE,EACAE,EACAE,EACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,GACAE,MAGA9J,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,wBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,aACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAOgG,EACP/F,SAAWC,GAAM+F,EAAgB/F,EAAEC,OAAOH,aAG9CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAOkG,EACPjG,SAAWC,GAAMiG,EAAkBjG,EAAEC,OAAOH,aAGhDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAOwF,EACPvF,SAAWC,GAAMuF,EAAYvF,EAAEC,OAAOH,gBAI5CD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACLpE,MAAOoG,EACPnG,SAAWC,GAAMmG,EAAenG,EAAEC,OAAOH,aAG7CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACLpE,MAAOsG,EACPrG,SAAWC,GAAMqG,EAAgBrG,EAAEC,OAAOH,aAG9CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPC,EAAAA,EAAAA,MAAA,UACEC,MAAOwG,EACPvG,SAAWC,GAAMuG,EAAcvG,EAAEC,OAAOH,OAAOF,SAAA,EAE/CF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,qBAI7BC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAA,SACAsC,KAAK,SACLgC,KAAM,GACNC,IAAK,GACLC,KAAK,IACLpE,MAAO6G,EACP5G,SAAWC,GAAM4G,EAAiB5G,EAAEC,OAAOH,aAG7CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cACPF,EAAAA,EAAAA,KAAA,SACAsC,KAAK,SACLgC,KAAM,GACNC,IAAK,GACLC,KAAK,IACLpE,MAAO2G,EACP1G,SAAWC,GAAM0G,EAAiB1G,EAAEC,OAAOH,aAG7CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAA,SACAsC,KAAK,SACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACLpE,MAAOiH,EACPhH,SAAWC,GAAMgH,EAAgBhH,EAAEC,OAAOH,aAG5CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,UACPF,EAAAA,EAAAA,KAAA,SACAsC,KAAK,SACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACLpE,MAAO+G,EACP9G,SAAWC,GAAM8G,EAAc9G,EAAEC,OAAOH,aAG1CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,WACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOkF,EACPpE,SAAUqE,EACVpE,UAAU,WAIhBjD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,mBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO2D,EACP7C,SAAU8C,EACV7C,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gCACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO6D,EACP/C,SAAUgD,EACV/C,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,0BACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOyD,EACP3C,SAAU4C,EACV3C,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOkD,EACPpC,SAAU2D,EACV1D,UAAU,WAIhBjD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,qBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gCACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOsF,EACPxE,SAAUyE,EACVxE,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,0BACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOwF,EACP1E,SAAU2E,EACV1E,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO0F,EACP5E,SAAU6E,EACV5E,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOoF,EACPtE,SAAUuE,EACVtE,UAAU,cAKlBjD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,mBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO4F,EACP9E,SAAU+E,EACV9E,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,aACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO8F,EACPhF,SAAUiF,EACVhF,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACLpE,MAAOiI,EACPhI,SAAWC,GAAMgI,EAAqBhI,EAAEC,OAAOH,aAGnDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACLpE,MAAOmI,EACPlI,SAAWC,GAAMkI,EAAsBlI,EAAEC,OAAOH,aAGpDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPC,EAAAA,EAAAA,MAAA,UACEC,MAAOqI,EACPpI,SAAWC,GAAMoI,EAAoBpI,EAAEC,OAAOH,OAAOF,SAAA,EAErDF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,qBAI7BC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,aACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO0G,GACP5F,SAAU6F,GACV5F,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO8G,GACPhG,SAAUiG,GACVhG,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAO6I,GACP5I,SAAWC,GAAM4I,GAAwB5I,EAAEC,OAAOH,gBAIxDD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,UACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAOyI,GACPxI,SAAWC,GAAMwI,GAAsBxI,EAAEC,OAAOH,aAGpDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOsG,EACPxF,SAAUyF,EACVxF,UAAU,WAIhBjD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOgH,GACPlG,SAAUmG,GACVlG,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOkH,GACPpG,SAAUqG,GACVpG,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAOqJ,GACPpJ,SAAWC,GAAMoJ,GAAwBpJ,EAAEC,OAAOH,aAGtDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOsH,GACPxG,SAAUyG,GACVxG,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACLpE,MAAOyJ,GACPxJ,SAAWC,GAAMwJ,GAA2BxJ,EAAEC,OAAOH,aAGzDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACLpE,MAAO2J,GACP1J,SAAWC,GAAM0J,GAA4B1J,EAAEC,OAAOH,aAG1DD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPC,EAAAA,EAAAA,MAAA,UACEC,MAAO6J,GACP5J,SAAWC,GAAM4J,GAA0B5J,EAAEC,OAAOH,OAAOF,SAAA,EAE3DF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,yBAK9B,E,4CC7pBA,MAAMiK,EAAiBA,KAE1BnK,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OACEL,MAAO,CACL+C,SAAU,WACVuH,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAChBC,OAAQ,IACRnF,KAAM,IACNC,MAAO,OACPC,OAAQ,uBACRzE,WAAY,qBACZH,OAAQ,GACRR,SAAA,EAEFC,EAAAA,EAAAA,MAAA,gBAAAD,SAAA,EAEEF,EAAAA,EAAAA,KAAA,UAAQS,UAAU,oBAAmBP,UACnCF,EAAAA,EAAAA,KAACwK,EAAAA,IAAO,OAEVrK,EAAAA,EAAAA,MAAA,cAAYsK,MAAO,2BAA4B3K,MAAO,CAAEsF,KAAM,EAAGsF,WAAY,MAAOxK,SAAA,EAClFC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACW,EAAAA,IAAO,IACP,IAAI,kBAGTX,EAAAA,EAAAA,KAAA,MAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAC2K,EAAAA,IAAM,IACN,IAAI,kBAGT3K,EAAAA,EAAAA,KAAA,MAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAC4K,EAAAA,IAAU,IACV,IAAI,qBAIXzK,EAAAA,EAAAA,MAAA,OAAKL,MAAO,CAAE4K,WAAY,MAAOxK,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAC6K,EAAAA,IAAM,IAAG,eAGZ1K,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAC8K,EAAAA,IAAmB,IAAG,cAGzB3K,EAAAA,EAAAA,MAAA,UAAQM,UAAU,kBAAiBP,SAAA,EACjCF,EAAAA,EAAAA,KAAC+K,EAAAA,IAAc,IAAG,qBAM1B/K,EAAAA,EAAAA,KAAA,aAAAE,UACEF,EAAAA,EAAAA,KAAA,UAAAE,UACEF,EAAAA,EAAAA,KAACW,EAAAA,IAAO,SAGZX,EAAAA,EAAAA,KAAA,mBAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACgL,EAAAA,IAAQ,IAAG,iBAGhBhL,EAAAA,EAAAA,KAAA,qBACAA,EAAAA,EAAAA,KAAA,kBAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,CAAQ,SAENF,EAAAA,EAAAA,KAAA,SAAM,uBAQLiL,EAAUA,KACrB,IAAItL,EAAOyB,SAASC,cAAc,SAClC,MAAO6J,EAAeC,IAAoB1L,EAAAA,EAAAA,UACxCC,iBAAiBC,GAAMC,iBAAiB,mBAAmBsC,MAAM,GAAI,KAEhEkJ,EAAaC,IAAkB5L,EAAAA,EAAAA,UACpCC,iBAAiBC,GAAMC,iBAAiB,mBAEnC0L,EAAiBC,IAAsB9L,EAAAA,EAAAA,UAC5CC,iBAAiBC,GAAMC,iBAAiB,qBAAqBsC,MAAM,GAAI,KAElEsJ,EAAiBC,IAAsBhM,EAAAA,EAAAA,UAC5CC,iBAAiBC,GAAMC,iBAAiB,qBAAqBsC,MAAM,GAAI,KAElEwJ,EAAkBC,IAAuBlM,EAAAA,EAAAA,UAC9CC,iBAAiBC,GAAMC,iBAAiB,wBAEnCgM,EAAgBC,IAAqBpM,EAAAA,EAAAA,UAC1CC,iBAAiBC,GAAMC,iBAAiB,sBAEnCkM,EAAeC,IAAoBtM,EAAAA,EAAAA,UACxCC,iBAAiBC,GAAMC,iBAAiB,qBAEnCoM,EAAoBC,IAAyBxM,EAAAA,EAAAA,UAClDC,iBAAiBC,GAAMC,iBAAiB,0BAEnCsM,EAAcC,IAAmB1M,EAAAA,EAAAA,UACtCC,iBAAiBC,GAAMC,iBAAiB,2BAEnCwM,EAAaC,IAAkB5M,EAAAA,EAAAA,UACpCC,iBAAiBC,GAAMC,iBAAiB,mBAEnC0M,EAAkBC,IAAuB9M,EAAAA,EAAAA,UAC9CC,iBAAiBC,GAAMC,iBAAiB,wBAEnC4M,EAAYC,IAAiBhN,EAAAA,EAAAA,UAClCC,iBAAiBC,GAAMC,iBAAiB,yBAEnC8M,EAAWC,IAAgBlN,EAAAA,EAAAA,UAChCC,iBAAiBC,GAAMC,iBAAiB,iBAEnCgN,EAAgBC,IAAqBpN,EAAAA,EAAAA,UAC1CC,iBAAiBC,GAAMC,iBAAiB,qBAiC1C,OA/BAC,EAAAA,EAAAA,YAAU,KACRF,EAAKG,MAAMC,YAAY,kBAAmBmL,EAAgB,MAC1DvL,EAAKG,MAAMC,YAAY,gBAAiBqL,GACxCzL,EAAKG,MAAMC,YAAY,oBAAqBuL,EAAkB,MAC9D3L,EAAKG,MAAMC,YAAY,oBAAqByL,EAAkB,MAC9D7L,EAAKG,MAAMC,YAAY,qBAAsB2L,GAC7C/L,EAAKG,MAAMC,YAAY,kBAAmB+L,GAC1CnM,EAAKG,MAAMC,YAAY,uBAAwBiM,GAC/CrM,EAAKG,MAAMC,YAAY,mBAAoB6L,GAC3CjM,EAAKG,MAAMC,YAAY,wBAAyBmM,GAChDvM,EAAKG,MAAMC,YAAY,gBAAiBqM,GACxCzM,EAAKG,MAAMC,YAAY,qBAAsBuM,GAC7C3M,EAAKG,MAAMC,YAAY,sBAAuByM,GAC9C7M,EAAKG,MAAMC,YAAY,cAAe2M,GACtC/M,EAAKG,MAAMC,YAAY,mBAAoB6M,EAAe,GACzD,CACD1B,EACAE,EACAE,EACAE,EACAE,EACAI,EACAE,EACAJ,EACAM,EACAE,EACAE,EACAE,EACAE,EACAE,KAGAzM,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,aACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,aACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAO8K,EACP7K,SAAWC,GAAM6K,EAAiB7K,EAAEC,OAAOH,aAG/CD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAOkL,EACPjL,SAAWC,GAAMiL,EAAmBjL,EAAEC,OAAOH,aAGjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACEsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAOoL,EACPnL,SAAWC,GAAMmL,EAAmBnL,EAAEC,OAAOH,aAGjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO+I,EACPjI,SAAUkI,EACVjI,UAAU,WAIhBjD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,gBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO2J,EACP7I,SAAU8I,EACV7I,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOyJ,EACP3I,SAAU4I,EACV3I,UAAU,WAIhBjD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,aACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO6J,EACP/I,SAAUgJ,EACV/I,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO+J,EACPjJ,SAAUkJ,EACVjJ,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOiK,EACPnJ,SAAUoJ,EACVnJ,UAAU,WAIhBjD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,WACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOmK,EACPrJ,SAAUsJ,EACVrJ,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOqK,EACPvJ,SAAUwJ,EACVvJ,UAAU,QAGdjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,wBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOuK,EACPzJ,SAAU0J,EACVzJ,UAAU,eAKjB,EC7RM0J,EAAqBA,KAC9B,MAAOC,EAAWC,IAAgBvN,EAAAA,EAAAA,WAAS,IACpCwN,EAAWC,IAAgBzN,EAAAA,EAAAA,WAAS,IACpC0N,EAAOC,IAAY3N,EAAAA,EAAAA,UAAS,KACnC,OACIO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,gBAAcL,MAAO,CAAEsF,KAAM,EAAGD,IAAK,GAAIjF,SAAA,EACrCC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,YACLF,EAAAA,EAAAA,KAAA,eAEJG,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,yBACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,OAAAE,SAAK,oBAETF,EAAAA,EAAAA,KAAA,UACAG,EAAAA,EAAAA,MAAA,UAAQ6C,QAASA,IAAMgK,GAAcD,GAAW7M,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,gBACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,WAAW+B,QAAS0I,EAAWM,UAAQ,QAEvDlN,EAAAA,EAAAA,MAAA,UAAQ6C,QAASA,IAAMkK,GAAcD,GAAW/M,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,gBACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,WAAW+B,QAAS4I,EAAWI,UAAQ,QAEvDrN,EAAAA,EAAAA,KAAA,UACAG,EAAAA,EAAAA,MAAA,UAAQ6C,QAASA,IAAMoK,EAAS,KAAKlN,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,aACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,QAAQgL,KAAK,QAAQjJ,QAAmB,MAAV8I,EAAeE,UAAQ,QAErElN,EAAAA,EAAAA,MAAA,UAAQ6C,QAASA,IAAMoK,EAAS,KAAKlN,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,aACLF,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,QAAQgL,KAAK,QAAQjJ,QAAmB,MAAV8I,EAAeE,UAAQ,WAG1E,EAGEE,EAAcA,KACvB,IAAI5N,EAAOyB,SAASC,cAAc,SAClC,MAAOuE,EAAUC,IAAepG,EAAAA,EAAAA,UAC5BC,iBAAiBC,GAAMC,iBAAiB,yBAAyBsC,MAAM,GAAI,KAExE4D,EAAWC,IAAgBtG,EAAAA,EAAAA,UAC9BC,iBAAiBC,GAAMC,iBAAiB,4BAErCoG,EAAUC,IAAexG,EAAAA,EAAAA,UAC5BC,iBAAiBC,GAAMC,iBAAiB,uBAErC2F,EAAauB,IAAkBrH,EAAAA,EAAAA,UAClCC,iBAAiBC,GAAMC,iBAAiB,8BAErC4G,EAAaC,IAAkBhH,EAAAA,EAAAA,UAClCC,iBAAiBC,GAAMC,iBAAiB,4BAA4BsC,MAAM,GAAI,KAE3EwE,EAAcC,IAAmBlH,EAAAA,EAAAA,UACpCC,iBAAiBC,GAAMC,iBAAiB,6BAA6BsC,MAAM,GAAI,KAE5E0E,EAAYC,IAAiBpH,EAAAA,EAAAA,UAChCC,iBAAiBC,GAAMC,iBAAiB,4BAY5C,OATAC,EAAAA,EAAAA,YAAU,KACNF,EAAKG,MAAMC,YAAY,wBAAyB6F,EAAW,MAC3DjG,EAAKG,MAAMC,YAAY,yBAA0B+F,GACjDnG,EAAKG,MAAMC,YAAY,oBAAqBiG,GAC5CrG,EAAKG,MAAMC,YAAY,2BAA4BwF,GACnD5F,EAAKG,MAAMC,YAAY,2BAA4ByG,EAAc,MACjE7G,EAAKG,MAAMC,YAAY,4BAA6B2G,EAAe,MACnE/G,EAAKG,MAAMC,YAAY,0BAA2B6G,EAAW,GAC9D,CAAChB,EAAUE,EAAWE,EAAUT,EAAaiB,EAAaE,EAAcE,KAEvEzG,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,UACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOyD,EACP3C,SAAU4C,EACV3C,UAAU,QAGhBjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gBACPF,EAAAA,EAAAA,KAAA,SACIsC,KAAK,QACLgC,IAAK,GACLC,IAAK,GACLC,KAAK,IACLpE,MAAOwF,EACPvF,SAAWC,GAAMuF,EAAYvF,EAAEC,OAAOH,gBAIlDD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,gBACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAO2D,EACP7C,SAAU8C,EACV7C,UAAU,WAIpBjD,EAAAA,EAAAA,MAAA,YAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,YACRC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAACkD,EAAAA,EAAW,CACVb,MAAOkD,EACPpC,SAAU2D,EACV1D,UAAU,QAGhBjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPF,EAAAA,EAAAA,KAAA,SACIsC,KAAK,QACLgC,IAAK,EACLC,IAAK,EACLC,KAAK,IACLpE,MAAOoG,EACPnG,SAAWC,GAAMmG,EAAenG,EAAEC,OAAOH,aAGjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPF,EAAAA,EAAAA,KAAA,SACIsC,KAAK,QACLgC,IAAK,EACLC,IAAK,GACLC,KAAK,IACLpE,MAAOsG,EACPrG,SAAWC,GAAMqG,EAAgBrG,EAAEC,OAAOH,aAGlDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPC,EAAAA,EAAAA,MAAA,UAAQC,MAAOwG,EAAYvG,SAAWC,GAAMuG,EAAcvG,EAAEC,OAAOH,OAAOF,SAAA,EACtEF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,QAAOF,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQI,MAAM,SAAQF,SAAC,sBAIpC,E,aCtJI,SAASsN,IACtB,MAAOC,EAASC,IAAcjO,EAAAA,EAAAA,UAAS,UACjCoB,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,IAC9B,OACEZ,EAAAA,EAAAA,MAAA,sBAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,OACEgD,QAASA,IAAM0K,EAAW,UAC1BjN,UAAuB,WAAZgN,EAAuB,kBAAoB,GAAGvN,SAC1D,YAGDF,EAAAA,EAAAA,KAAA,OACEgD,QAASA,IAAM0K,EAAW,WAC1BjN,UAAuB,YAAZgN,EAAwB,kBAAoB,GAAGvN,SAC3D,aAGDF,EAAAA,EAAAA,KAAA,OACEgD,QAASA,IAAM0K,EAAW,SAC1BjN,UAAuB,UAAZgN,EAAsB,kBAAoB,GAAGvN,SACzD,aAGDF,EAAAA,EAAAA,KAAA,OACEgD,QAASA,IAAM0K,EAAW,UAC1BjN,UAAuB,WAAZgN,EAAuB,kBAAoB,GAAGvN,SAC1D,YAGDF,EAAAA,EAAAA,KAAA,OACEgD,QAASA,IAAM0K,EAAW,eAC1BjN,UAAuB,gBAAZgN,EAA4B,kBAAoB,GAAGvN,SAC/D,qBAIHC,EAAAA,EAAAA,MAAA,QAAMwN,SAAWrN,GAAMA,EAAEsN,iBAAiB1N,SAAA,EACxCC,EAAAA,EAAAA,MAAA,OAAKM,UAAU,aAAYP,SAAA,CACE,aAA1BW,EAAWK,MAAMC,QAAsBnB,EAAAA,EAAAA,KAAC6N,EAAAA,QAAQ,KAAM7N,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC1C,YAAZwN,GAAwBzN,EAAAA,EAAAA,KAACQ,EAAc,KAAMR,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACjC,UAAZwN,GAAsBzN,EAAAA,EAAAA,KAACmK,EAAc,KAAMnK,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC/B,WAAZwN,GAAuBzN,EAAAA,EAAAA,KAACkF,EAAa,KAAMlF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC/B,gBAAZwN,GAA4BzN,EAAAA,EAAAA,KAAC8M,EAAkB,KAAM9M,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,OAE3C,WAAZwN,GAAuBzN,EAAAA,EAAAA,KAACV,EAAM,KAAMU,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACxB,YAAZwN,GAAwBzN,EAAAA,EAAAA,KAACY,EAAO,KAAMZ,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAC1B,UAAZwN,GAAsBzN,EAAAA,EAAAA,KAACiL,EAAO,KAAMjL,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACxB,WAAZwN,GAAuBzN,EAAAA,EAAAA,KAAC2F,EAAM,KAAM3F,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACxB,gBAAZwN,GAA4BzN,EAAAA,EAAAA,KAACuN,EAAW,KAAMvN,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,KAC/CD,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,cAIR,C,yVCxDe,SAAS6N,IACtB,MAAMhN,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,IACxB+M,EAAQA,KACZ,MAAMC,GAAMC,EAAAA,EAAAA,UACNC,GAAKC,EAAAA,EAAAA,IAAUhN,GAAUA,EAAM+M,KAC/BE,GAAeC,EAAAA,EAAAA,GAAUC,EAAAA,cAAqBC,GACpDH,EAAaI,MAAQJ,EAAaK,MAAQH,EAAAA,eAC1C,MAAMI,GAAOC,EAAAA,EAAAA,UAAQ,IAAM,IAAIL,EAAAA,cAAoB,KAAM,OAAO,IAC1DM,GAASD,EAAAA,EAAAA,UACb,MACEE,aAAc,KACdC,cAAe,KACfV,eACAW,aAAc,IAAIT,EAAAA,QAClBU,SAAU,SACVC,WAAY,KACZC,gBAAiB,GACjBC,KAAK,EACLC,OAAQlB,EAAGmB,YAEb,CAACjB,IAKH,OAHAkB,EAAAA,EAAAA,IACE,CAACnO,EAAOoO,IAAWvB,EAAIwB,QAAQC,SAASC,SAASC,KAAKtP,OAASkP,KAE1DtP,EAAAA,EAAAA,KAAA,SAAO+N,IAAKA,EAAK4B,KAAM,CAAClB,EAAME,GAAS,cAAaiB,KAAKC,GAAK,GAAK,EAGtEC,EAASA,KACb,MAAM/B,GAAMC,EAAAA,EAAAA,UACN+B,GAAe3B,EAAAA,EAAAA,GAAUC,EAAAA,cAAqB2B,GACpDD,EAAaxB,MAAQwB,EAAavB,MAAQH,EAAAA,oBAC1C,MAAM4B,GAAc7B,EAAAA,EAAAA,GAAUC,EAAAA,cAAqB6B,GAGnD,OAFAD,EAAY1B,MAAQ0B,EAAYzB,MAAQH,EAAAA,eACxC4B,EAAYlN,OAAOoN,IAAI,IAAK,MACrBnQ,EAAAA,EAAAA,KAACoQ,EAAAA,GAAK,CAACrC,IAAKA,EAAKlL,SAAU,CAAC,GAAI,GAAI,GAAI8M,KAAM,CAAC,KAAM,KAAM,IAAK,KAAM,cAAaC,KAAKC,GAAK,EAAE3P,UACpGF,EAAAA,EAAAA,KAAA,wBACEqC,MAAM,QACNgO,UAAW,GACXC,UAAW,GACXC,IAAKN,EACLO,UAAWT,EACXU,YAAa,IAAIpC,EAAAA,QAAc,GAAK,IACpCqC,gBAAiBX,EACjBY,kBAAmB,MACf,EAGV,OACExQ,EAAAA,EAAAA,MAACyQ,EAAAA,GAAM,CACL9Q,MAAO,CACL+C,SAAU,WACVsC,IAAK,IACLC,KAAM,KAERyL,IAAKC,OAAOC,iBACZC,OAAQ,CAAEnO,SAAU,CAAC,EAAG,GAAI,IAAKkC,KAAM,GAAI7E,SAAA,CAE1CW,EAAWK,MAAgB,SAAO,IAAEkD,WACnCpE,EAAAA,EAAAA,KAAA,OACEiR,OAAO,MACP5O,MAAOxB,EAAWK,MAAgB,SAAO,IAAEmB,MAC3C0C,KAAMlE,EAAWK,MAAgB,SAAO,IAAE6D,KAC1CC,IAAKnE,EAAWK,MAAgB,SAAO,IAAE8D,OAE7ChF,EAAAA,EAAAA,KAACkR,EAAAA,EAAa,CAAC3Q,OAAQ,CAAC,EAAG,GAAI,MAC/BP,EAAAA,EAAAA,KAACmR,EAAAA,SAAQ,CAACC,SAAU,KAAKlR,SACtBW,EAAWK,MAAgB,SAAO,IAAEkD,WACnCpE,EAAAA,EAAAA,KAACqR,EAAAA,EAAG,CACFC,SAAU,KACV7M,YAAa5D,EAAWK,MAAgB,SAAO,IAAEuD,YACjDC,QAAS7D,EAAWK,MAAgB,SAAO,IAAEwD,QAC7C6M,SAAU1Q,EAAWK,MAAgB,SAAO,IAAE0D,UAC9CD,UAAW9D,EAAWK,MAAgB,SAAO,IAAEyD,UAC/C6M,SAAU3Q,EAAWK,MAAgB,SAAO,IAAEsQ,cAGpDxR,EAAAA,EAAAA,KAACmR,EAAAA,SAAQ,CAACC,SAAU,KAAKlR,SACtBW,EAAWK,MAAgB,SAAS,MAAEkD,WACrCpE,EAAAA,EAAAA,KAACyR,EAAAA,EAAK,CACJC,OAAQ,IACR5M,MAAOjE,EAAWK,MAAgB,SAAS,MAAE4D,UAGlDjE,EAAWK,MAAgB,SAAoB,iBAAEkD,WAChDpE,EAAAA,EAAAA,KAAA,cACEqC,MAAOxB,EAAWK,MAAgB,SAAoB,iBAAEmB,MACxDwC,UAAWhE,EAAWK,MAAgB,SAAoB,iBAAE2D,UAC5DhC,SAAU,CAAC,EAAG,KAAQ,QAEzBhC,EAAWK,MAAgB,SAAgB,aAAEkD,WAC5CpE,EAAAA,EAAAA,KAAA,gBACE6E,UAAWhE,EAAWK,MAAgB,SAAgB,aAAE2D,UACxDxC,MAAOxB,EAAWK,MAAgB,SAAgB,aAAEmB,SAExDrC,EAAAA,EAAAA,KAACmR,EAAAA,SAAQ,CAACC,SAAU,KAAKlR,SACtBW,EAAWK,MAAgB,SAAS,MAAEkD,WAAYpE,EAAAA,EAAAA,KAAC8N,EAAK,OAE3D9N,EAAAA,EAAAA,KAACmR,EAAAA,SAAQ,CAACC,SAAU,KAAKlR,SACtBW,EAAWK,MAAgB,SAAU,OAAEkD,WAAYpE,EAAAA,EAAAA,KAAC8P,EAAM,QAInE,EAzGA6B,EAAAA,EAAAA,GAAO,CAAEC,MAAM,K,0DCXA,SAASC,EAASC,GAC7B,IAAIC,EAAID,EAAI,GACRE,EAAIF,EAAI,GACRG,EAAIH,EAAI,GACZC,GAAK,IACLC,GAAK,IACLC,GAAK,IACL,IAAIC,EAAOtC,KAAKtL,IAAIyN,EAAGC,EAAGC,GACtBE,EAAOvC,KAAKrL,IAAIwN,EAAGC,EAAGC,GACtB3C,EAAQ6C,EAAOD,EACfE,EAAI,EACJC,EAAI,EACJC,GAAMH,EAAOD,GAAQ,EAyBzB,OAxBc,IAAV5C,GACA+C,EAAI,EACJD,EAAI,IAGAC,EADAC,GAAK,GACDhD,GAAS6C,EAAOD,GAEhB5C,GAAS,EAAI6C,EAAKD,GAEtBC,IAASJ,EACTK,GAAKJ,EAAIC,GAAK3C,EACP6C,IAASH,EAChBI,GAAMH,EAAIF,GAAKzC,EAAS,EAClB6C,IAASF,IACfG,GAAML,EAAIC,GAAK1C,EAAS,IAGhC8C,EAAIxC,KAAK2C,MAAU,GAAJH,GACXA,EAAI,IACJA,GAAK,KAETC,EAAIzC,KAAK4C,IAAQ,IAAJH,GAASI,QAAQ,GAC9BH,GAAS,IAAJA,GAAUG,QAAQ,GACb,CAACL,EAAGC,EAAI,IAAKC,EAAI,IAE/B,CCtCe,SAASI,EAAWC,GAC/B,IAAIZ,EAAIY,EAAK,GACTX,EAAIW,EAAK,GACTV,EAAIU,EAAK,GACTC,EAAID,EAAK,GACLZ,EAAIc,SAASF,EAAK,GAAI,IACtBX,EAAIa,SAASF,EAAK,GAAI,IACtBV,EAAIY,SAASF,EAAK,GAAI,IACtBC,EAAIC,SAASF,EAAK,GAAI,IAC1BZ,GAAK,IACLC,GAAK,IACLC,GAAK,IACL,IAAIC,EAAOtC,KAAKtL,IAAIyN,EAAGC,EAAGC,GACtBE,EAAOvC,KAAKrL,IAAIwN,EAAGC,EAAGC,GACtB3C,EAAQ6C,EAAOD,EACfE,EAAI,EACJC,EAAI,EACJC,GAAMH,EAAOD,GAAQ,EAyBzB,OAxBc,IAAV5C,GACA+C,EAAI,EACJD,EAAI,IAGAC,EADAC,GAAK,GACDhD,GAAS6C,EAAOD,GAEhB5C,GAAS,EAAI6C,EAAKD,GAEtBC,IAASJ,EACTK,GAAKJ,EAAIC,GAAK3C,EACP6C,IAASH,EAChBI,GAAMH,EAAIF,GAAKzC,EAAS,EAClB6C,IAASF,IACfG,GAAML,EAAIC,GAAK1C,EAAS,IAGhC8C,EAAIxC,KAAK2C,MAAU,GAAJH,GACXA,EAAI,IACJA,GAAK,KAETC,EAAIzC,KAAK4C,IAAQ,IAAJH,GAASI,QAAQ,GAC9BH,GAAS,IAAJA,GAAUG,QAAQ,GACZ,CAACL,EAAGC,EAAI,IAAKC,EAAI,IAAKM,EAErC,C,qBCrBW,SAAS1P,EAAW4P,GAAiC,IAAhC,MAAEzQ,EAAK,SAAEc,EAAQ,SAAEC,GAAU0P,EAC7D,MAAMC,GAAiB/E,EAAAA,EAAAA,QAAO,MACxBgF,GAAYhF,EAAAA,EAAAA,QAAO,MACnBiF,GAAgBjF,EAAAA,EAAAA,QAAO,MACvBkF,GAAWlF,EAAAA,EAAAA,QAAO,OACjBmF,EAAkBC,IAAuB3T,EAAAA,EAAAA,UAAS,CAAE4T,EAAG,EAAGC,EAAG,KAC7DC,EAAqBC,IAA0B/T,EAAAA,EAAAA,UAAS,IACxDgU,EAAgBC,IAAqBjU,EAAAA,EAAAA,UAAS,IAC9CkU,EAAMC,IAAWnU,EAAAA,EAAAA,WAAS,IAC1BoU,EAAKC,IAAUrU,EAAAA,EAAAA,UAAS,IACxBsU,EAAWC,IAAgBvU,EAAAA,EAAAA,UAAS,KACpCwU,EAAYC,IAAiBzU,EAAAA,EAAAA,UAAS,MACtC0U,EAAOC,IAAY3U,EAAAA,EAAAA,UAAS,MAGnCI,EAAAA,EAAAA,YAAU,KACF8T,GACAZ,EAAexD,QAAQ8E,OAC3B,GACD,CAACV,KAUJ9T,EAAAA,EAAAA,YAAU,KACN,GAAIwC,EAEA,GADAiS,QAAQC,IAAIlS,GACRe,EAAU,CACV,IAAIoR,EAAY,GAChB,GAAiB,MAAbnS,EAAM,GACNmS,EAAY9B,ECzDjB,SAAmB+B,GAC9B,IAAI1Q,EAYA,OAXe,IAAf0Q,EAAIC,OAEY,IADhB3Q,EAAS,wDAAwD4Q,KAAKF,IAC5D,KACN1Q,EAAO,GAAK,MAEK,IAAf0Q,EAAIC,OACV3Q,EAAS,wDAAwD4Q,KAAKF,GAClD,IAAfA,EAAIC,UACT3Q,EAAS,4CAA4C4Q,KAAKF,IACnD,GAAK,MAEL1Q,EACD,CACE8O,SAAS9O,EAAO,GAAI,IACpB8O,SAAS9O,EAAO,GAAI,IACpB8O,SAAS9O,EAAO,GAAI,IACpB8O,SAAS9O,EAAO,GAAI,IAAM,KAE5B,IACd,CDoC2C6Q,CAAUvS,SAC9B,GAA0B,SAAtBA,EAAMH,MAAM,EAAG,GACtBsS,EAAY9B,EAAWrQ,QACpB,GAA0B,SAAtBA,EAAMH,MAAM,EAAG,GACtB,IAAK,IAAI2S,EAAI,EAAGA,EAAIxS,EAAMqS,OAAQG,IAAK,CAGlB,MAAbxS,EAAMwS,GACNC,EAAQD,EAAI,EACQ,MAAbxS,EAAMwS,IACbE,EAAMF,EACNL,EAAUQ,KAAK3S,EAAMH,MAAM4S,EAAOC,KACd,MAAb1S,EAAMwS,KACbL,EAAUQ,KAAK3S,EAAMH,MAAM4S,EAAOD,IAClCC,EAAQD,EAAI,EAEpB,CAOJ,GALAP,QAAQC,IAAIC,GACZV,EAAO7O,OAAOuP,EAAU,KACxBN,EAAcjP,OAAOuP,EAAU,GAAGtS,MAAM,EAAGsS,EAAU,GAAGE,OAAS,KACjEV,EAAa/O,OAAOuP,EAAU,GAAGtS,MAAM,EAAGsS,EAAU,GAAGE,OAAS,KAChEN,EAASnP,OAAOuP,EAAU,KACtBb,EAAM,CACN,MAAMsB,EAAajC,EAAUzD,QAAQ2F,wBACrC9B,EAAoB,CAChBC,EAAGmB,EAAU,GAAK,IAAMS,EAAW5P,MACnCiO,GAAI,IAAMkB,EAAU,GAAGtS,MAAM,EAAGsS,EAAU,GAAGE,OAAS,IAAM,IAAMO,EAAW3P,SAEjF,MAAM6P,EAAiBlC,EAAc1D,QAAQ2F,wBAC7C1B,GAAyB,IAAMgB,EAAU,GAAGtS,MAAM,EAAGsS,EAAU,GAAGE,OAAS,IAAM,IAAOS,EAAe7P,QACvG,MAAM8P,EAAYlC,EAAS3D,QAAQ2F,wBACnCxB,EAAkBc,EAAU,GAAKY,EAAU/P,MAC/C,CACJ,KAAO,CACH,IAAIgQ,EAAW,GACf,GAAiB,MAAbhT,EAAM,GACNgT,EAAWxD,EE9FhB,SAAkB4C,GAC7B,IAAI1Q,EAMJ,OAJIA,EADc,IAAf0Q,EAAIC,OACM,4CAA4CC,KAAKF,GAEjD,4CAA4CE,KAAKF,IAGxD,CACK5B,SAAS9O,EAAO,GAAI,IACpB8O,SAAS9O,EAAO,GAAI,IACpB8O,SAAS9O,EAAO,GAAI,KAEzB,IACV,CFgFwCuR,CAASjT,SAC1B,GAA0B,QAAtBA,EAAMH,MAAM,EAAG,GACtBmT,EAAWxD,EAASxP,QACjB,GAA0B,QAAtBA,EAAMH,MAAM,EAAG,GACtB,IAAK,IAAI2S,EAAI,EAAGA,EAAIxS,EAAMqS,OAAQG,IAAK,CACnC,IAAIC,EACAC,EACa,MAAb1S,EAAMwS,GACNC,EAAQD,EAAI,EACQ,MAAbxS,EAAMwS,IACbE,EAAMF,EACNQ,EAASL,KAAK3S,EAAMH,MAAM4S,EAAOC,KACb,MAAb1S,EAAMwS,KACbQ,EAASL,KAAK3S,EAAMH,MAAM4S,EAAOD,IACjCC,EAAQD,EAAI,EAEpB,MAEAQ,EGhHL,SAAmB/H,GAC9B,OAAOA,GACH,IAAK,MAuCL,IAAK,SACD,MAAO,CAAC,EAAG,OAAQ,OAtCvB,IAAK,QA+BL,IAAK,OACD,MAAO,CAAC,IAAK,OAAQ,OA9BzB,IAAK,OAiCL,IAAK,OAIL,IAAK,OACD,MAAO,CAAC,IAAK,OAAQ,OApCzB,IAAK,SAqCL,IAAK,QACD,MAAO,CAAC,GAAI,OAAQ,OApCxB,IAAK,OA2BL,IAAK,OACD,MAAO,CAAC,IAAK,OAAQ,OA1BzB,IAAK,UACD,MAAO,CAAC,IAAK,OAAQ,OACzB,IAAK,QAiCL,QACI,MAAO,CAAC,EAAG,KAAM,MAhCrB,IAAK,QACD,MAAO,CAAC,EAAG,KAAM,QACrB,IAAK,OACL,IAAK,OACD,MAAO,CAAC,EAAG,KAAM,OACrB,IAAK,YACL,IAAK,YACD,MAAO,CAAC,EAAG,KAAM,OACrB,IAAK,WACL,IAAK,WACD,MAAO,CAAC,EAAG,KAAM,OACrB,IAAK,QACD,MAAO,CAAC,GAAI,MAAO,OACvB,IAAK,SACD,MAAO,CAAC,GAAI,OAAQ,OACxB,IAAK,SACD,MAAO,CAAC,IAAK,OAAQ,OACzB,IAAK,OACD,MAAO,CAAC,IAAK,OAAQ,OAgBjC,CH8D+BiI,CAAUlT,GAMzB,GAJAiS,QAAQC,IAAIc,GACZvB,EAAO7O,OAAOoQ,EAAS,KACvBnB,EAAcjP,OAAOoQ,EAAS,GAAGnT,MAAM,EAAGmT,EAAS,GAAGX,OAAS,KAC/DV,EAAa/O,OAAOoQ,EAAS,GAAGnT,MAAM,EAAGmT,EAAS,GAAGX,OAAS,KAC1Df,EAAM,CACN,MAAMsB,EAAajC,EAAUzD,QAAQ2F,wBACrC9B,EAAoB,CAChBC,EAAGgC,EAAS,GAAK,IAAMJ,EAAW5P,MAClCiO,GAAI,IAAM+B,EAAS,GAAGnT,MAAM,EAAGmT,EAAS,GAAGX,OAAS,IAAM,IAAMO,EAAW3P,SAE/E,MAAM6P,EAAiBlC,EAAc1D,QAAQ2F,wBAC7C1B,GAAyB,IAAM6B,EAAS,GAAGnT,MAAM,EAAGmT,EAAS,GAAGX,OAAS,IAAM,IAAOS,EAAe7P,OACzG,CACJ,CACJ,GACD,CAACqO,EAAMtR,EAAOe,KAgBjBvD,EAAAA,EAAAA,YAAU,KACN,GAAImT,EAAUzD,QAAS,CAdLiG,KAClBA,EAAIC,UAAU,EAAG,EAAGD,EAAIE,OAAOrQ,MAAOmQ,EAAIE,OAAOpQ,QACjD,IAAIqQ,EAAaH,EAAIE,OAAOrQ,MAAQ,IAChCuQ,EAAcJ,EAAIE,OAAOpQ,OAAS,IACtC,IAAK,IAAIuP,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAIgB,EAAI,EAAGA,EAAI,IAAKA,IACrBL,EAAIM,UAAY,OAAOjB,KAAKZ,MAAe,IAAM4B,MACjDL,EAAIO,SAASlB,EAAIc,EAAYE,EAAID,GAAcf,EAAI,GAAKc,GAAaE,EAAI,GAAKD,EAEtF,EAOII,CADuBhD,EAAUzD,QAAQ0G,WAAW,KAAM,CAAE9B,OAAO,IAEvE,IAED,CAACR,EAAMM,IAGV,MAAMiC,EAAmBC,IACrB,GAAsB,IAAlBA,EAAMC,QAAe,CACrB,MAAMC,EAAOrD,EAAUzD,QAAQ2F,wBAC/B,IAAI7B,EAAI8C,EAAMG,QAAUD,EAAKjR,KACzBkO,EAAI6C,EAAMI,QAAUF,EAAKlR,IACzBkO,GAAK,GAAKA,GAAKgD,EAAKhR,OAASiO,GAAK,GAAKA,GAAK+C,EAAK/Q,SACjD8N,EAAoB,CAAEC,IAAGC,MACzBQ,EAAOlE,KAAK4G,MAAM,IAAMnD,EAAIgD,EAAKhR,QACjC2O,EAAa,IAAMpE,KAAK4G,MAAM,IAAMlD,EAAI+C,EAAK/Q,SAErD,GAKEmR,EAA0BN,IAC5B,GAAsB,IAAlBA,EAAMC,QAAe,CACrB,MAAMC,EAAOpD,EAAc1D,QAAQ2F,wBACnC,IAAI7B,EAAI8C,EAAMG,QAAUD,EAAKjR,KACzBkO,EAAI6C,EAAMI,QAAUF,EAAKlR,IACzBkO,GAAK,GAAKA,GAAKgD,EAAKhR,OAASiO,GAAK,GAAKA,GAAK+C,EAAK/Q,SACjD4O,EAAc,IAAMtE,KAAK4G,MAAM,IAAMlD,EAAI+C,EAAK/Q,SAC9CkO,EAAuBF,GAE/B,GAIEoD,EAAqBpW,IACvB,GAAkB,IAAdA,EAAE8V,QAAe,CACjB,MAAMC,EAAOnD,EAAS3D,QAAQ2F,wBAC9B,IAAI7B,EAAI/S,EAAEgW,QAAUD,EAAKjR,KACrBkO,EAAIhT,EAAEiW,QAAUF,EAAKlR,IACrBkO,GAAK,GAAKA,GAAKgD,EAAKhR,OAASiO,GAAK,GAAKA,GAAK+C,EAAK/Q,SACjD8O,EAAUxE,KAAK4G,MAAM,IAAMnD,EAAIgD,EAAKhR,OAAU,KAC9CqO,EAAkBL,GAE1B,GA0BJ,OACIlT,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,uBAAqBgD,QAASA,IAAM4Q,GAASD,GAAMzT,UAC/CF,EAAAA,EAAAA,KAAA,UAAQF,MAAO,CAAEe,WAAYwB,OAEhCsR,IAAQgD,EAAAA,EAAAA,eACLxW,EAAAA,EAAAA,MAAA,uBACIyW,SAAS,IACT7I,IAAKgF,EACL8D,OAASvW,IAtLL6V,SAsLsB7V,GArL3BwW,cAAcC,SAASZ,EAAMa,gBACpCpD,GAAQ,EAoL6B,EAAA1T,SAAA,EAE7BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,iBAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAQiX,YAAc3W,GAAM4V,EAAgB5V,GAAI4W,YAAc5W,GAAM4V,EAAgB5V,GAAIyN,IAAKiF,EAAW3N,MAAM,MAAMC,OAAO,MACvHxF,MAAO,CAAEqX,QAAS/T,EAAW+Q,EAAQ,MAEzCnU,EAAAA,EAAAA,KAAA,gBACIF,MAAO,CACHqF,IAAKgO,EAAiBG,EACtBlO,KAAM+N,EAAiBE,EACvBxS,WACIuC,EACI,QAAQyQ,KAAOI,MAAeF,OAAeI,KAC7C,OAAON,KAAOI,MAAeF,OAEzCkD,YAAc3W,GAAM4V,EAAgB5V,GACpC4W,YAAc5W,GAAM4V,EAAgB5V,SAG5CH,EAAAA,EAAAA,MAAA,qBAAmBiX,MAAM,aAAYlX,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OACI+N,IAAKkF,EACLnT,MAAO,CACHe,WACI,6BAA6BgT,QAAUE,aAAqBF,UAAYE,QAEhFkD,YAAc3W,GAAMmW,EAAuBnW,GAC3C4W,YAAc5W,GAAMmW,EAAuBnW,MAE/CN,EAAAA,EAAAA,KAAA,gBACIF,MAAO,CACHqF,IAAKoO,EACL1S,WAAY,QAAQgT,KAAOI,MAAeF,OAAeI,MAE7D8C,YAAc3W,GAAMmW,EAAuBnW,GAC3C4W,YAAc5W,GAAMmW,EAAuBnW,WAItD8C,IACGjD,EAAAA,EAAAA,MAAA,gBAAciX,MAAM,QAAOlX,SAAA,EACvBF,EAAAA,EAAAA,KAAA,OACI+N,IAAKmF,EACLpT,MAAO,CACHe,WACI,+BAA+BgT,KAAOI,MAAeF,gBAAwBF,KAAOI,MAAeF,WAE3GkD,YAAc3W,GAAMoW,EAAkBpW,GACtC4W,YAAc5W,GAAMoW,EAAkBpW,MAE1CN,EAAAA,EAAAA,KAAA,gBACIF,MAAO,CACHsF,KAAMqO,EACN5S,WAAY,OAAOgT,KAAOI,MAAeF,OAAeI,MAE5D8C,YAAc3W,GAAMoW,EAAkBpW,GACtC4W,YAAc5W,GAAMoW,EAAkBpW,SAIlDH,EAAAA,EAAAA,MAAA,gBAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,OAEDF,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,SAASgC,IAAI,IAAIC,IAAI,MAAMnE,MAAOyT,EAC1CxT,SAAWC,GAlGfF,KACpB0T,EAAO1T,GACP,MAAMiW,EAAOrD,EAAUzD,QAAQ2F,wBAC/B9B,EAAoB,IAAKD,EAAkBE,EAAGjT,EAAQ,IAAMiW,EAAKhR,OAAQ,EA+FhCgS,CAAe/W,EAAEC,OAAOH,aAEjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,QAEDF,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,SAASgC,IAAI,IAAIC,IAAI,MAAMnE,MAAO2T,EAC1C1T,SAAWC,GAjGfF,KACpB4T,EAAa5T,GACb,MAAMiW,EAAOrD,EAAUzD,QAAQ2F,wBAC/B9B,EAAoB,IAAKD,EAAkBG,GAAI,IAAMlT,GAAS,IAAMiW,EAAK/Q,QAAS,EA8FzCgS,CAAehX,EAAEC,OAAOH,aAEjDD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,QAEDF,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,SAASgC,IAAI,IAAIC,IAAI,MAAMnE,MAAO6T,EAC1C5T,SAAWC,GAhGRF,KAC3B8T,EAAc9T,GACd,MAAMiW,EAAOpD,EAAc1D,QAAQ2F,wBACnC1B,GAAyB,IAAMpT,GAAS,IAAOiW,EAAK/Q,OAAO,EA6FlBiS,CAAsBjX,EAAEC,OAAOH,YAEvDgD,IACGjD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,SAEDF,EAAAA,EAAAA,KAAA,SAAOsC,KAAK,SAASgC,IAAI,IAAIC,IAAI,IAAIC,KAAK,OAAOpE,MAAO+T,EACpD9T,SAAWC,GAhGjBF,KACtBgU,EAAShU,GACT,MAAMiW,EAAOnD,EAAS3D,QAAQ2F,wBAC9BxB,EAAkBtT,EAAQiW,EAAKhR,MAAM,EA6FQmS,CAAiBlX,EAAEC,OAAOH,gBAI3DJ,EAAAA,EAAAA,KAAA,gBAAAE,UACIF,EAAAA,EAAAA,KAAA,UACIF,MAAO,CACHe,WAAYuC,EAAW,QAAQyQ,KAAOI,MAAeF,OAAeI,KAAW,OAAON,KAAOI,MAAeF,OAEhH/Q,QAASA,KAAmBG,EAAXC,EAAoB,QAAQyQ,KAAOI,MAAeF,OAAeI,KAAqB,OAAON,KAAOI,MAAeF,MAAc,EAAG7T,SACxJ,eAKPkB,SAASqW,eAAe,WAG1C,C","sources":["Apps/Definitions/Pages/Global.jsx","Apps/Definitions/Pages/Desktop.jsx","Apps/Definitions/Pages/Window.jsx","Apps/Definitions/Pages/Taskbar.jsx","Apps/Definitions/Pages/ContextMenu.jsx","Apps/Definitions/index.jsx","System/Desktop/Scenario.jsx","System/GlobalComponents/ColorPicker/Converters/rgbToHsl.js","System/GlobalComponents/ColorPicker/Converters/rgbaToHsla.js","System/GlobalComponents/ColorPicker/ColorPicker.jsx","System/GlobalComponents/ColorPicker/Converters/hexToRgba.js","System/GlobalComponents/ColorPicker/Converters/hexToRgb.js","System/GlobalComponents/ColorPicker/Converters/nameToHsl.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport const Global = () => {\r\n    const [fontFamily, setFontFamily] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--GeneralFontFamily\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--GeneralFontFamily\", fontFamily);\r\n    }, [fontFamily]);\r\n\r\n    return (\r\n        <>\r\n        <div>\r\n            <label>Font Family:</label>\r\n            <select\r\n                value={fontFamily}\r\n                onChange={(e) => setFontFamily(e.target.value)}\r\n            >\r\n                <option style={{ fontFamily: \"Arial\" }}>Arial</option>\r\n                <option style={{ fontFamily: \"Times New Roman\" }}>Times New Roman</option>\r\n                <option style={{ fontFamily: \"Monospace\" }}>Monospace</option>\r\n                <option style={{ fontFamily: \"Verdana\" }}>Verdana</option>\r\n                <option style={{ fontFamily: \"Georgia\" }}>Georgia</option>\r\n                <option style={{ fontFamily: \"Courier New\" }}>Courier New</option>\r\n                <option style={{ fontFamily: \"Tahoma\" }}>Tahoma</option>\r\n                <option style={{ fontFamily: \"Garamond\" }}>Garamond</option>\r\n                <option style={{ fontFamily: \"Impact\" }}>Impact</option>\r\n                <option style={{ fontFamily: \"Helvetica\" }}>Helvetica</option>\r\n                <option style={{ fontFamily: \"Comic Sans MS\" }}>Comic Sans MS</option>\r\n                <option style={{ fontFamily: \"Lucida Console\" }}>Lucida Console</option>\r\n                <option style={{ fontFamily: \"Lucida Sans Unicode\" }}>Lucida Sans Unicode</option>\r\n                <option style={{ fontFamily: \"Palatino Linotype\" }}>Palatino Linotype</option>\r\n            </select>\r\n            </div>\r\n        </>\r\n    )\r\n}","//Allows changing desktop shortcuts and background, relying on BackgroundContext\r\n\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { BackgroundContext } from \"../../../System/Desktop/BackgroundContext.js\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const DesktopPreview = () => {\r\n  return (\r\n    <>\r\n      <div className=\"desktopShortcut\" style={{ zIndex: 1 }}>\r\n        <FcGlobe className=\"desktopIcon\" />\r\n        Shortcut\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Desktop = () => {\r\n  const background = useContext(BackgroundContext);\r\n  const [backgroundMenu, setBackgroundMenu] = useState(background.state.active);\r\n  var root = document.querySelector(\":root\");\r\n  const [desktopBkgrColor, setDesktopBkgrColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrColor\"),\r\n  );\r\n  const [desktopBkgrImage, setDesktopBkgrImage] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrImage\"),\r\n  );\r\n  const [desktopBkgrSize, setDesktopBkgrSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrSize\"),\r\n  );\r\n  const [desktopBkgrPosition, setDesktopBkgrPosition] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrPosition\"),\r\n  );\r\n  const [desktopBkgrRepeat, setDesktopBkgrRepeat] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrRepeat\"),\r\n  );\r\n  const [desktopFontSize, setDesktopFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopFontSize\").slice(0, -2),\r\n  );\r\n  const [desktopIconSize, setDesktopIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopIconSize\").slice(0, -2),\r\n  );\r\n  //Upload Image\r\n  const uploadImage = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = (readerEvent) => {\r\n      background.setImage(\r\n        readerEvent.target.result,\r\n        background.state.image.position,\r\n        background.state.image.size,\r\n        background.state.image.repeat);\r\n    }\r\n  };\r\n\r\n  //Update styles\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrColor\", desktopBkgrColor);\r\n    root.style.setProperty(\"--DesktopBkgrImage\", desktopBkgrImage);\r\n    root.style.setProperty(\"--DesktopBkgrSize\", desktopBkgrSize);\r\n    root.style.setProperty(\"--DesktopBkgrPosition\", desktopBkgrPosition);\r\n    root.style.setProperty(\"--DesktopBkgrRepeat\", desktopBkgrRepeat);\r\n    root.style.setProperty(\"--DesktopFontSize\", desktopFontSize + \"px\");\r\n    root.style.setProperty(\"--DesktopIconSize\", desktopIconSize + \"px\");\r\n  }, [desktopBkgrColor, desktopBkgrImage, desktopBkgrSize, desktopBkgrPosition, desktopBkgrRepeat, desktopFontSize, desktopIconSize]);\r\n  //Update background context\r\n  useEffect(() => {\r\n    if (background.state.active === \"color\") {\r\n      if (background.state.color.type === \"color\") {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(\"none\");\r\n      } else if (background.state.color.type === \"gradient\") {\r\n        if (background.state.color.gradient.type === \"linear\") {\r\n          setDesktopBkgrColor(`linear-gradient(${background.state.color.gradient.degree}deg, ${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        } else if (background.state.color.gradient.type === \"radial\") {\r\n          setDesktopBkgrColor(`radial-gradient(${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        }\r\n      }\r\n    } else if (background.state.active === \"image\") {\r\n      if (background.state.image.url) {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(`url(${background.state.image.url})`);\r\n        setDesktopBkgrPosition(background.state.image.position);\r\n        setDesktopBkgrSize(background.state.image.size);\r\n        setDesktopBkgrRepeat(background.state.image.repeat);\r\n      }\r\n    }\r\n  }, [background.state]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Background:\r\n          <div>\r\n            <select value={backgroundMenu} onChange={(e) => setBackgroundMenu(e.target.value)}>\r\n              <option value=\"color\">Color</option>\r\n              <option value=\"image\">Image</option>\r\n              <option value=\"scenario\">3D Scenario</option>\r\n            </select>\r\n          </div></legend>\r\n        {backgroundMenu === \"color\" ? (\r\n          <>\r\n            <div\r\n              className={\r\n                background.state.active === \"color\"\r\n                  ? \"defMenuButton defMenuButtonON\"\r\n                  : \"defMenuButton\"\r\n              }\r\n              onClick={() => background.setActive(\"color\")}\r\n            >\r\n              Use Simple Color\r\n            </div>\r\n            <label>Set Background Color: </label>\r\n            <ColorPicker\r\n              color={desktopBkgrColor}\r\n              setColor={setDesktopBkgrColor}\r\n              useAlpha={false}\r\n            />\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"image\" ? (\r\n          <>\r\n            <div\r\n              className={\r\n                background.state.active === \"image\"\r\n                  ? \"defMenuButton defMenuButtonON\"\r\n                  : \"defMenuButton\"\r\n              }\r\n              onClick={() => background.setActive(\"image\")}\r\n            >\r\n              Use Image\r\n            </div>\r\n            <label htmlFor=\"imageUpload\">Upload Image: </label>\r\n            <input\r\n              id=\"imageUpload\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={(e) => { uploadImage(e.target.files[0]) }} />\r\n            <label htmlFor=\"imagePosition\">Position: </label>\r\n            <select id=\"imagePosition\"\r\n              value={background.state.image.position}\r\n              onChange={(e) => {\r\n                background.setImage(\r\n                  background.state.image.file,\r\n                  e.target.value,\r\n                  background.state.image.size,\r\n                  background.state.image.repeat\r\n                );\r\n                setDesktopBkgrPosition(e.target.value);\r\n              }}>\r\n              <option value=\"top\">Top</option>\r\n              <option value=\"left top\">Top Left</option>\r\n              <option value=\"right top\">Top Right</option>\r\n              <option value=\"center\">Center</option>\r\n              <option value=\"bottom\">Bottom</option>\r\n              <option value=\"left bottom\">Bottom Left</option>\r\n              <option value=\"right bottom\">Bottom Right</option>\r\n              <option value=\"left\">Left</option>\r\n              <option value=\"right\">Right</option>\r\n            </select>\r\n            <label htmlFor=\"imageSize\">Size: </label>\r\n            <select id=\"imageSize\"\r\n              value={background.state.image.size}\r\n              onChange={(e) => {\r\n                background.setImage(\r\n                  background.state.image.file,\r\n                  background.state.image.position,\r\n                  e.target.value,\r\n                  background.state.image.repeat\r\n                );\r\n                setDesktopBkgrSize(e.target.value);\r\n              }}>\r\n              <option value=\"auto\">Auto</option>\r\n              <option value=\"contain\">Contain</option>\r\n              <option value=\"cover\">Cover</option>\r\n              <option value=\"100vw 100vh\">Stretch</option>\r\n            </select>\r\n            <label htmlFor=\"imageRepeat\">Repeat: </label>\r\n            <select id=\"imageRepeat\"\r\n              value={background.state.image.repeat}\r\n              onChange={(e) => {\r\n                background.setImage(\r\n                  background.state.image.file,\r\n                  background.state.image.position,\r\n                  background.state.image.size,\r\n                  e.target.value\r\n                );\r\n                setDesktopBkgrRepeat(e.target.value);\r\n              }}\r\n            >\r\n              <option value=\"no-repeat\">No Repeat</option>\r\n              <option value=\"repeat\">Repeat</option>\r\n              <option value=\"repeat-x\">Repeat X</option>\r\n              <option value=\"repeat-y\">Repeat Y</option>\r\n            </select>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"Shader\" ? <></> : <></>}\r\n        {backgroundMenu === \"scenario\" ? (\r\n          <>\r\n            <div\r\n              className={\r\n                background.state.active === \"scenario\"\r\n                  ? \"defMenuButton defMenuButtonON\"\r\n                  : \"defMenuButton\"\r\n              }\r\n              onClick={() => background.setActive(\"scenario\")}\r\n            >\r\n              Use Scenario\r\n            </div>\r\n            <fieldset>\r\n              <legend\r\n              style={{cursor:\"pointer\"}}\r\n              onClick={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n              > \r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"sun\"].isActive}\r\n                  onChange={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n                />\r\n                Sun & Sky\r\n              </legend>\r\n              {background.state[\"scenario\"][\"sun\"].isActive &&\r\n                <><div>\r\n                  <label>Inclination:</label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                </div>\r\n                  <div>\r\n                    <label>Azimuth:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Turbidity:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Rayleight:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Ambient Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                <ColorPicker\r\n                  color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n                  setColor={(color) => \r\n                    background.setScenario(\"ambientLight\", \"color\", color)}\r\n                  useAlpha={false}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Directional Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                    <ColorPicker\r\n                      color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n                      setColor={(color) => \r\n                        background.setScenario(\"directionalLight\", \"color\", color)}\r\n                      useAlpha={false}\r\n                    />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend \r\n              style={{cursor:\"pointer\"}}\r\n              onClick={() => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"stars\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n                />\r\n                Stars\r\n              </legend>\r\n              {background.state[\"scenario\"][\"stars\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Star Count:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"100000\"\r\n                      value={background.state[\"scenario\"][\"stars\"].count}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"stars\", \"count\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend \r\n              style={{cursor:\"pointer\"}}\r\n              onClick={() => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"fog\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}\r\n                />\r\n                Fog\r\n              </legend>\r\n              {background.state[\"scenario\"][\"fog\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Color:</label>\r\n                    <ColorPicker\r\n                      color={background.state[\"scenario\"][\"fog\"].color}\r\n                      setColor={(color) => background.setScenario(\"fog\", \"color\", color)}\r\n                      useAlpha={false}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Near:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Far:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend> Terrain </legend>\r\n              <div>\r\n                <label>Sea:</label>\r\n                <input type=\"checkbox\" \r\n                checked={background.state[\"scenario\"][\"ocean\"].isActive} \r\n                onChange={() => background.setScenario(\"ocean\", \"isActive\", !background.state[\"scenario\"][\"ocean\"].isActive)}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Dunes:</label>\r\n                <input type=\"checkbox\" \r\n                checked={background.state[\"scenario\"][\"desert\"].isActive} \r\n                onChange={() => background.setScenario(\"desert\", \"isActive\", !background.state[\"scenario\"][\"desert\"].isActive)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Shortcuts</legend>\r\n        <div>\r\n          <label>Icon Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={36}\r\n            max={120}\r\n            step=\"1\"\r\n            value={Number(desktopIconSize)}\r\n            onChange={(e) => setDesktopIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={32}\r\n            step=\"1\"\r\n            value={Number(desktopFontSize)}\r\n            onChange={(e) => setDesktopFontSize(e.target.value)}\r\n          /></div>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","//Allows to change the style of individual tasks windows\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\nimport {\r\n  FaRegWindowMinimize,\r\n  FaWindowRestore,\r\n  FaWindowMaximize,\r\n} from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\n\r\nexport const WindowPreview = () => {\r\n  return (\r\n    <>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"10px\",\r\n          left: \"10px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          background: \"var(--WindowBkgrInactive)\",\r\n          borderColor: \"var(--WindowBorderColorInactive)\"\r\n        }}\r\n        className=\"app appInactive\"\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowFontColorInactive)\",\r\n            background: \"var(--WindowTopBarBkgrInactive)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Inactive</h1>\r\n          <button>\r\n            <FaRegWindowMinimize className=\"appTopBarButton\" />\r\n          </button>\r\n          <button>\r\n            <FaWindowMaximize className=\"appTopBarButton\" />\r\n          </button>\r\n          <button>\r\n            <AiOutlineClose className=\"appTopBarButton appClose\" />\r\n          </button>\r\n        </app-top-bar>\r\n      </app-window>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50px\",\r\n          left: \"60px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          background: \"var(--WindowBkgr)\"\r\n        }}\r\n        className=\"app\"\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowFontColor)\",\r\n            background: \"var(--WindowTopBarBkgr)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Active</h1>\r\n          <button>\r\n            <FaRegWindowMinimize />\r\n          </button>\r\n          <button>\r\n            <FaWindowMaximize />\r\n          </button>\r\n          <button className=\"buttonActiveRed\">\r\n            <AiOutlineClose />\r\n          </button>\r\n        </app-top-bar>\r\n      </app-window>\r\n      <app-dialog\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"100px\",\r\n          left: \"320px\",\r\n        }}\r\n      >\r\n        <app-dialog-top-bar>\r\n          Dialog\r\n        </app-dialog-top-bar>\r\n        <app-dialog-info>\r\n          Information\r\n        </app-dialog-info>\r\n        <app-dialog-actions>\r\n          <button>Ok</button>\r\n          <button>Cancel</button>\r\n          <button className=\"buttonActiveRed\">Close</button>\r\n        </app-dialog-actions>\r\n      </app-dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Window = () => {\r\n  var root = document.querySelector(\":root\");\r\n  const [fontSize, setFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontSize\").slice(0, -2),\r\n  );\r\n  const [fontColor, setFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColor\"),\r\n  );\r\n  const [bkgColor, setBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgr\"),\r\n  );\r\n  const [topbarBkgColor, setTopbarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgr\"),\r\n  );\r\n  const [topBarHeight, setTopBarHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarHeight\").slice(0, -2),\r\n  );\r\n  const [topBarIconSize, setTopBarIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarIconSize\").slice(0, -2),\r\n  );\r\n  const [borderWidth, setBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderWidth\").slice(0, -2),\r\n  );\r\n  const [borderRadius, setBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderRadius\").slice(0, -2),\r\n  );\r\n  const [borderType, setBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderType\"),\r\n  );\r\n  const [borderColor, setBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColor\"),\r\n  );\r\n  const [shadowXOffset, setShadowXOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowXOffset\").slice(0, -2),\r\n  );\r\n  const [shadowYOffset, setShadowYOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowYOffset\").slice(0, -2),\r\n  );\r\n  const [shadowBlur, setShadowBlur] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowBlur\").slice(0, -2),\r\n  );\r\n  const [shadowSpread, setShadowSpread] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowSpread\").slice(0, -2),\r\n  );\r\n  const [shadowColor, setShadowColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowColor\"),\r\n  );\r\n  const [inactiveBorderColor, setInactiveBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColorInactive\"),\r\n  );\r\n  const [inactiveTopBarBkgColor, setInactiveTopBarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgrInactive\"),\r\n  );\r\n  const [inactiveFontColor, setInactiveFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColorInactive\"),\r\n  );\r\n  const [inactiveBkgColor, setInactiveBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgrInactive\"),\r\n  );\r\n  const [dialogBkgr, setDialogBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBkgr\"),\r\n  );\r\n  const [dialogBorderColor, setDialogBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderColor\"),\r\n  );\r\n  const [dialogBorderWidth, setDialogBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderWidth\").slice(0, -2),\r\n  );\r\n  const [dialogBorderRadius, setDialogBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderRadius\").slice(0, -2),\r\n  );\r\n  const [dialogBorderType, setDialogBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderType\"),\r\n  );\r\n  const [dialogInfoFontColor, setDialogInfoFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontColor\"),\r\n  );\r\n  const [dialogInfoFontSize, setDialogInfoFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontSize\").slice(0, -2),\r\n  );\r\n  const [dialogTopBarBkgr, setDialogTopBarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarBkgr\"),\r\n  );\r\n  const [dialogTopBarFontSize, setDialogTopBarFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontSize\").slice(0, -2),\r\n  );\r\n  const [dialogTopBarFontColor, setDialogTopBarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontColor\"),\r\n  );\r\n  const [dialogButtonBkgr, setDialogButtonBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBkgr\"),\r\n  );\r\n  const [dialogButtonFontColor, setDialogButtonFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontColor\"),\r\n  );\r\n  const [dialogButtonFontSize, setDialogButtonFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontSize\").slice(0, -2),\r\n  );\r\n  const [dialogButtonBorderColor, setDialogButtonBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderColor\"),\r\n  );\r\n  const [dialogButtonBorderWidth, setDialogButtonBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderWidth\").slice(0, -2),\r\n  );\r\n  const [dialogButtonBorderRadius, setDialogButtonBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderRadius\").slice(0, -2),\r\n  );\r\n  const [dialogButtonBorderType, setDialogButtonBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderType\"),\r\n  )\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontSize\", fontSize + \"px\");\r\n    root.style.setProperty(\"--WindowFontColor\", fontColor);\r\n    root.style.setProperty(\"--WindowBkgr\", bkgColor);\r\n    root.style.setProperty(\"--WindowTopBarBkgr\", topbarBkgColor);\r\n    root.style.setProperty(\"--WindowTopBarHeight\", topBarHeight + \"px\");\r\n    root.style.setProperty(\r\n      \"--WindowTopBarBkgrInactive\",\r\n      inactiveTopBarBkgColor,\r\n    );\r\n    root.style.setProperty(\"--WindowTopBarIconSize\", topBarIconSize + \"px\");\r\n    root.style.setProperty(\"--WindowBorderWidth\", borderWidth + \"px\");\r\n    root.style.setProperty(\"--WindowBorderRadius\", borderRadius + \"px\");\r\n    root.style.setProperty(\"--WindowBorderType\", borderType);\r\n    root.style.setProperty(\"--WindowBorderColor\", borderColor);\r\n    root.style.setProperty(\"--WindowBorderColorInactive\", inactiveBorderColor);\r\n    root.style.setProperty(\"--WindowFontColorInactive\", inactiveFontColor);\r\n    root.style.setProperty(\"--WindowBkgrInactive\", inactiveBkgColor);\r\n    root.style.setProperty(\"--DialogBkgr\", dialogBkgr);\r\n    root.style.setProperty(\"--DialogBorderColor\", dialogBorderColor);\r\n    root.style.setProperty(\"--DialogBorderWidth\", dialogBorderWidth + \"px\");\r\n    root.style.setProperty(\"--DialogBorderRadius\", dialogBorderRadius + \"px\");\r\n    root.style.setProperty(\"--DialogBorderType\", dialogBorderType);\r\n    root.style.setProperty(\"--DialogInfoFontColor\", dialogInfoFontColor);\r\n    root.style.setProperty(\"--DialogInfoFontSize\", dialogInfoFontSize + \"px\");\r\n    root.style.setProperty(\"--DialogTopBarBkgr\", dialogTopBarBkgr);\r\n    root.style.setProperty(\"--DialogTopBarFontSize\", dialogTopBarFontSize + \"px\");\r\n    root.style.setProperty(\"--DialogTopBarFontColor\", dialogTopBarFontColor);\r\n    root.style.setProperty(\"--DialogButtonBkgr\", dialogButtonBkgr);\r\n    root.style.setProperty(\"--DialogButtonFontColor\", dialogButtonFontColor);\r\n    root.style.setProperty(\"--DialogButtonFontSize\", dialogButtonFontSize + \"px\");\r\n    root.style.setProperty(\"--DialogButtonBorderColor\", dialogButtonBorderColor);\r\n    root.style.setProperty(\"--DialogButtonBorderWidth\", dialogButtonBorderWidth + \"px\");\r\n    root.style.setProperty(\"--DialogButtonBorderRadius\", dialogButtonBorderRadius + \"px\");\r\n    root.style.setProperty(\"--DialogButtonBorderType\", dialogButtonBorderType);\r\n    root.style.setProperty(\"--WindowShadowXOffset\", shadowXOffset + \"px\");\r\n    root.style.setProperty(\"--WindowShadowYOffset\", shadowYOffset + \"px\");\r\n    root.style.setProperty(\"--WindowShadowBlur\", shadowBlur + \"px\");\r\n    root.style.setProperty(\"--WindowShadowColor\", shadowColor);\r\n    root.style.setProperty(\"--WindowShadowSpread\", shadowSpread + \"px\");\r\n  }, [\r\n    fontSize,\r\n    fontColor,\r\n    bkgColor,\r\n    topbarBkgColor,\r\n    topBarHeight,\r\n    topBarIconSize,\r\n    borderColor,\r\n    borderWidth,\r\n    borderRadius,\r\n    borderType,\r\n    shadowXOffset,\r\n    shadowYOffset,\r\n    shadowBlur,\r\n    shadowSpread,\r\n    shadowColor,\r\n    inactiveTopBarBkgColor,\r\n    inactiveFontColor,\r\n    inactiveBkgColor,\r\n    inactiveBorderColor,\r\n    dialogBkgr,\r\n    dialogBorderColor,\r\n    dialogBorderWidth,\r\n    dialogBorderRadius,\r\n    dialogBorderType,\r\n    dialogInfoFontColor,\r\n    dialogInfoFontSize,\r\n    dialogTopBarBkgr,\r\n    dialogTopBarFontSize,\r\n    dialogTopBarFontColor,\r\n    dialogButtonBkgr,\r\n    dialogButtonFontColor,\r\n    dialogButtonFontSize,\r\n    dialogButtonBorderColor,\r\n    dialogButtonBorderWidth,\r\n    dialogButtonBorderRadius,\r\n    dialogButtonBorderType,\r\n  ]);\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Window</legend>\r\n        <fieldset>\r\n          <legend>Top Bar Dimentions</legend>\r\n          <div>\r\n            <label>Height:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={20}\r\n              max={64}\r\n              step=\"1\"\r\n              value={topBarHeight}\r\n              onChange={(e) => setTopBarHeight(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Icon Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={16}\r\n              max={60}\r\n              step=\"1\"\r\n              value={topBarIconSize}\r\n              onChange={(e) => setTopBarIconSize(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={fontSize}\r\n              onChange={(e) => setFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Border Thickness:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={borderWidth}\r\n              onChange={(e) => setBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Radius:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={20}\r\n              step=\"1\"\r\n              value={borderRadius}\r\n              onChange={(e) => setBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Type:</label>\r\n            <select\r\n              value={borderType}\r\n              onChange={(e) => setBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Shadow</legend>\r\n          <div>\r\n            <label>Y-Offset</label>\r\n            <input\r\n            type=\"number\"\r\n            min={-50}\r\n            max={50}\r\n            step=\"1\"\r\n            value={shadowYOffset}\r\n            onChange={(e) => setShadowYOffset(e.target.value)}\r\n          />\r\n          </div>\r\n          <div>\r\n            <label>X-Offset</label>\r\n            <input\r\n            type=\"number\"\r\n            min={-50}\r\n            max={50}\r\n            step=\"1\"\r\n            value={shadowXOffset}\r\n            onChange={(e) => setShadowXOffset(e.target.value)}\r\n          />\r\n          </div>\r\n          <div>\r\n            <label>Spread</label>\r\n            <input\r\n            type=\"number\"\r\n            min={0}\r\n            max={50}\r\n            step=\"1\"\r\n            value={shadowSpread}\r\n            onChange={(e) => setShadowSpread(e.target.value)}\r\n          />\r\n          </div>\r\n          <div>\r\n            <label>Blur</label>\r\n            <input\r\n            type=\"number\"\r\n            min={0}\r\n            max={50}\r\n            step=\"1\"\r\n            value={shadowBlur}\r\n            onChange={(e) => setShadowBlur(e.target.value)}\r\n          />\r\n          </div>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={shadowColor}\r\n              setColor={setShadowColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Active Window</legend>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={bkgColor}\r\n              setColor={setBkgColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={topbarBkgColor}\r\n              setColor={setTopbarBkgColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={fontColor}\r\n              setColor={setFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={borderColor}\r\n              setColor={setBorderColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Inactive Window</legend>\r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveTopBarBkgColor}\r\n              setColor={setInactiveTopBarBkgColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={inactiveFontColor}\r\n              setColor={setInactiveFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBkgColor}\r\n              setColor={setInactiveBkgColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBorderColor}\r\n              setColor={setInactiveBorderColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Dialog Window</legend>\r\n        <div>\r\n          <label>Background Color: </label>\r\n          <ColorPicker\r\n            color={dialogBkgr}\r\n            setColor={setDialogBkgr}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Color: </label>\r\n            <ColorPicker\r\n              color={dialogBorderColor}\r\n              setColor={setDialogBorderColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Thickness: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogBorderWidth}\r\n              onChange={(e) => setDialogBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogBorderRadius}\r\n              onChange={(e) => setDialogBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Type: </label>\r\n            <select\r\n              value={dialogBorderType}\r\n              onChange={(e) => setDialogBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">Solid</option>\r\n              <option value=\"dashed\">Dashed</option>\r\n              <option value=\"dotted\">Dotted</option>\r\n              <option value=\"double\">Double</option>\r\n              <option value=\"groove\">Groove</option>\r\n              <option value=\"ridge\">Ridge</option>\r\n              <option value=\"inset\">Inset</option>\r\n              <option value=\"outset\">Outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Top Bar</legend>\r\n          <div>\r\n            <label>Background:</label>\r\n            <ColorPicker\r\n              color={dialogTopBarBkgr}\r\n              setColor={setDialogTopBarBkgr}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color:</label>\r\n            <ColorPicker\r\n              color={dialogTopBarFontColor}\r\n              setColor={setDialogTopBarFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={dialogTopBarFontSize}\r\n              onChange={(e) => setDialogTopBarFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Text</legend>\r\n          <div>\r\n            <label>Font Size: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={dialogInfoFontSize}\r\n              onChange={(e) => setDialogInfoFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color:</label>\r\n            <ColorPicker\r\n              color={dialogInfoFontColor}\r\n              setColor={setDialogInfoFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Button</legend>\r\n          <div>\r\n            <label>Background:</label>\r\n            <ColorPicker\r\n              color={dialogButtonBkgr}\r\n              setColor={setDialogButtonBkgr}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color:</label>\r\n            <ColorPicker\r\n              color={dialogButtonFontColor}\r\n              setColor={setDialogButtonFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={dialogButtonFontSize}\r\n              onChange={(e) => setDialogButtonFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color:</label>\r\n            <ColorPicker\r\n              color={dialogButtonBorderColor}\r\n              setColor={setDialogButtonBorderColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Width:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogButtonBorderWidth}\r\n              onChange={(e) => setDialogButtonBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Radius:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogButtonBorderRadius}\r\n              onChange={(e) => setDialogButtonBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Style:</label>\r\n            <select\r\n              value={dialogButtonBorderType}\r\n              onChange={(e) => setDialogButtonBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">Solid</option>\r\n              <option value=\"dashed\">Dashed</option>\r\n              <option value=\"dotted\">Dotted</option>\r\n              <option value=\"double\">Double</option>\r\n              <option value=\"groove\">Groove</option>\r\n              <option value=\"ridge\">Ridge</option>\r\n              <option value=\"inset\">Inset</option>\r\n              <option value=\"outset\">Outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n      </fieldset >\r\n    </>\r\n  );\r\n};\r\n","//Allows personalization of the taskbar style\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FaReact } from \"react-icons/fa\";\r\nimport { FaGear } from \"react-icons/fa6\";\r\nimport { MdOutlineRestartAlt } from \"react-icons/md\";\r\nimport { RiShutDownLine } from \"react-icons/ri\";\r\nimport { FcGlobe, FcInfo, FcSettings } from \"react-icons/fc\";\r\nimport { WiCloudy } from \"react-icons/wi\";\r\n\r\nexport const TaskbarPreview = () => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          background: \"var(--TaskbarBkgr)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <start-button\r\n        >\r\n          <button className=\"startButtonActive\">\r\n            <FaReact />\r\n          </button>\r\n          <start-list class={\"expandHeight expandWidth\"} style={{ left: 0, transition: \"0s\" }}>\r\n            <ul>\r\n              <li>\r\n                <button>\r\n                  <FcGlobe />\r\n                  {\" \"}Program 1\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcInfo />\r\n                  {\" \"}Program 2\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcSettings />\r\n                  {\" \"}Program 3\r\n                </button>\r\n              </li>\r\n            </ul>\r\n            <div style={{ transition: \"0s\" }}>\r\n              <button>\r\n                <FaGear />\r\n                Settings\r\n              </button>\r\n              <button>\r\n                <MdOutlineRestartAlt />\r\n                Refresh\r\n              </button>\r\n              <button className=\"buttonActiveRed\">\r\n                <RiShutDownLine />\r\n                Close\r\n              </button>\r\n            </div>\r\n          </start-list>\r\n        </start-button>\r\n        <live-apps>\r\n          <button>\r\n            <FcGlobe />\r\n          </button>\r\n        </live-apps>\r\n        <taskbar-weather>\r\n          <button>\r\n            <WiCloudy /> 20°C\r\n          </button>\r\n        </taskbar-weather>\r\n        <vertical-rect />\r\n        <task-bar-clock>\r\n          <button>\r\n            11:59\r\n            <br />\r\n            31/12/2000\r\n          </button>\r\n        </task-bar-clock>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport const Taskbar = () => {\r\n  var root = document.querySelector(\":root\");\r\n  const [taskbarHeight, setTaskbarHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHeight\").slice(0, -2),\r\n  );\r\n  const [taskbarBkgr, setTaskbarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarBkgr\"),\r\n  );\r\n  const [taskbarIconSize, setTaskbarIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarIconSize\").slice(0, -2),\r\n  );\r\n  const [taskbarFontSize, setTaskbarFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarFontSize\").slice(0, -2),\r\n  );\r\n  const [taskbarFontColor, setTaskbarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarFontColor\"),\r\n  );\r\n  const [startIconColor, setStartIconColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartIconColor\"),\r\n  );\r\n  const [startMenuBkgr, setStartMenuBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBkgr\"),\r\n  );\r\n  const [startMenuFontColor, setStartMenuFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuFontColor\"),\r\n  );\r\n  const [weatherColor, setWeatherColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarWeatherColor\"),\r\n  );\r\n  const [weatherBkgr, setWeatherBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WeatherBkgr\"),\r\n  );\r\n  const [weatherFontColor, setWeatherFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WeatherFontColor\"),\r\n  );\r\n  const [clockColor, setClockColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarClockColor\"),\r\n  );\r\n  const [clockBkgr, setClockBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--ClockBkgr\"),\r\n  );\r\n  const [clockFontColor, setClockFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--ClockFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHeight\", taskbarHeight + \"px\");\r\n    root.style.setProperty(\"--TaskbarBkgr\", taskbarBkgr);\r\n    root.style.setProperty(\"--TaskbarIconSize\", taskbarIconSize + \"px\");\r\n    root.style.setProperty(\"--TaskbarFontSize\", taskbarFontSize + \"px\");\r\n    root.style.setProperty(\"--TaskbarFontColor\", taskbarFontColor);\r\n    root.style.setProperty(\"--StartMenuBkgr\", startMenuBkgr);\r\n    root.style.setProperty(\"--StartMenuFontColor\", startMenuFontColor);\r\n    root.style.setProperty(\"--StartIconColor\", startIconColor);\r\n    root.style.setProperty(\"--TaskbarWeatherColor\", weatherColor);\r\n    root.style.setProperty(\"--WeatherBkgr\", weatherBkgr);\r\n    root.style.setProperty(\"--WeatherFontColor\", weatherFontColor);\r\n    root.style.setProperty(\"--TaskbarClockColor\", clockColor);\r\n    root.style.setProperty(\"--ClockBkgr\", clockBkgr);\r\n    root.style.setProperty(\"--ClockFontColor\", clockFontColor);\r\n  }, [\r\n    taskbarHeight,\r\n    taskbarBkgr,\r\n    taskbarIconSize,\r\n    taskbarFontSize,\r\n    taskbarFontColor,\r\n    startMenuBkgr,\r\n    startMenuFontColor,\r\n    startIconColor,\r\n    weatherColor,\r\n    weatherBkgr,\r\n    weatherFontColor,\r\n    clockColor,\r\n    clockBkgr,\r\n    clockFontColor,\r\n  ]);\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Taskbar</legend>\r\n        <div>\r\n          <label>Height:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={20}\r\n            max={60}\r\n            step=\"1\"\r\n            value={taskbarHeight}\r\n            onChange={(e) => setTaskbarHeight(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Icon Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={10}\r\n            max={60}\r\n            step=\"1\"\r\n            value={taskbarIconSize}\r\n            onChange={(e) => setTaskbarIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={10}\r\n            max={26}\r\n            step=\"1\"\r\n            value={taskbarFontSize}\r\n            onChange={(e) => setTaskbarFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={taskbarBkgr}\r\n            setColor={setTaskbarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Start Menu</legend>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={startMenuFontColor}\r\n            setColor={setStartMenuFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={startMenuBkgr}\r\n            setColor={setStartMenuBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Extras</legend>\r\n        <fieldset>\r\n          <legend>Weather</legend>\r\n          <div>\r\n            <label>Tray Color:</label>\r\n            <ColorPicker\r\n              color={weatherColor}\r\n              setColor={setWeatherColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Window Background:</label>\r\n            <ColorPicker\r\n              color={weatherBkgr}\r\n              setColor={setWeatherBkgr}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Window Font Color:</label>\r\n            <ColorPicker\r\n              color={weatherFontColor}\r\n              setColor={setWeatherFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Clock</legend>\r\n          <div>\r\n            <label>Tray Color:</label>\r\n            <ColorPicker\r\n              color={clockColor}\r\n              setColor={setClockColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Window Background:</label>\r\n            <ColorPicker\r\n              color={clockBkgr}\r\n              setColor={setClockBkgr}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Window Font Color:</label>\r\n            <ColorPicker\r\n              color={clockFontColor}\r\n              setColor={setClockFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","//Allows personalization of the Context Menu style\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const ContextMenuPreview = () => {\r\n    const [checkbox1, setCheckbox1] = useState(false);\r\n    const [checkbox2, setCheckbox2] = useState(false);\r\n    const [radio, setRadio] = useState(\"1\");\r\n    return (\r\n        <>\r\n            <context-menu style={{ left: 5, top: 5 }}>\r\n                <button>\r\n                    <div>Button</div>\r\n                    <span />\r\n                </button>\r\n                <button>\r\n                    <div>Button with Keybind</div>\r\n                    <span />\r\n                    <kbd>key1 + key2</kbd>\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setCheckbox1(!checkbox1)}>\r\n                    <div>Checkbox 1</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox1} readOnly />\r\n                </button>\r\n                <button onClick={() => setCheckbox2(!checkbox2)}>\r\n                    <div>Checkbox 2</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox2} readOnly />\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setRadio(\"1\")}>\r\n                    <div>Radio 1</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"1\"} readOnly />\r\n                </button>\r\n                <button onClick={() => setRadio(\"2\")}>\r\n                    <div>Radio 2</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"2\"} readOnly />\r\n                </button>\r\n            </context-menu>\r\n        </>\r\n    );\r\n};\r\nexport const ContextMenu = () => {\r\n    var root = document.querySelector(\":root\");\r\n    const [fontSize, setFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontSize\").slice(0, -2),\r\n    );\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontColor\"),\r\n    );\r\n    const [bkgColor, setBkgColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBkgr\"),\r\n    );\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderColor\"),\r\n    );\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderWidth\").slice(0, -2),\r\n    );\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderRadius\").slice(0, -2),\r\n    );\r\n    const [borderType, setBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderType\"),\r\n    );\r\n\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuFontSize\", fontSize + \"px\");\r\n        root.style.setProperty(\"--ContextMenuFontColor\", fontColor);\r\n        root.style.setProperty(\"--ContextMenuBkgr\", bkgColor);\r\n        root.style.setProperty(\"--ContextMenuBorderColor\", borderColor);\r\n        root.style.setProperty(\"--ContextMenuBorderWidth\", borderWidth + \"px\");\r\n        root.style.setProperty(\"--ContextMenuBorderRadius\", borderRadius + \"px\");\r\n        root.style.setProperty(\"--ContextMenuBorderType\", borderType);\r\n    }, [fontSize, fontColor, bkgColor, borderColor, borderWidth, borderRadius, borderType]);\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Font</legend>\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                      color={fontColor}\r\n                      setColor={setFontColor}\r\n                      useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Font Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={11}\r\n                        max={30}\r\n                        step=\"1\"\r\n                        value={fontSize}\r\n                        onChange={(e) => setFontSize(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background</legend>\r\n                <div>\r\n                    <label>Background Color:</label>\r\n                    <ColorPicker\r\n                      color={bkgColor}\r\n                      setColor={setBkgColor}\r\n                      useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                      color={borderColor}\r\n                      setColor={setBorderColor}\r\n                      useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};\r\n","// Definitions allows for user personalization of the app aspect and style. See individual components for reference.\r\n\r\nimport { useState, useContext } from \"react\";\r\nimport { Global } from \"./Pages/Global.jsx\";\r\nimport { DesktopPreview, Desktop } from \"./Pages/Desktop.jsx\";\r\nimport { WindowPreview, Window } from \"./Pages/Window.jsx\";\r\nimport { TaskbarPreview, Taskbar } from \"./Pages/Taskbar.jsx\";\r\nimport { ContextMenuPreview, ContextMenu } from \"./Pages/ContextMenu.jsx\";\r\nimport Scenario from \"../../System/Desktop/Scenario.jsx\";\r\nimport { BackgroundContext } from \"../../System/Desktop/BackgroundContext.js\";\r\nimport \"./style.css\";\r\n\r\nexport default function Definitions() {\r\n  const [defPage, setDefPage] = useState(\"Global\");\r\n  const background = useContext(BackgroundContext);\r\n  return (\r\n    <settings-container>\r\n      <nav>\r\n        <div\r\n          onClick={() => setDefPage(\"Global\")}\r\n          className={defPage === \"Global\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Global\r\n        </div>\r\n        <div\r\n          onClick={() => setDefPage(\"Desktop\")}\r\n          className={defPage === \"Desktop\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Desktop\r\n        </div>\r\n        <div\r\n          onClick={() => setDefPage(\"Start\")}\r\n          className={defPage === \"Start\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Taskbar\r\n        </div>\r\n        <div\r\n          onClick={() => setDefPage(\"Window\")}\r\n          className={defPage === \"Window\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Window\r\n        </div>\r\n        <div\r\n          onClick={() => setDefPage(\"ContextMenu\")}\r\n          className={defPage === \"ContextMenu\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Context Menu\r\n        </div>\r\n      </nav>\r\n      <form onSubmit={(e) => e.preventDefault()}>\r\n        <div className=\"defPreview\">\r\n          {background.state.active===\"scenario\" ? <Scenario /> : <></>}\r\n          {defPage === \"Desktop\" ? <DesktopPreview /> : <></>}\r\n          {defPage === \"Start\" ? <TaskbarPreview /> : <></>}\r\n          {defPage === \"Window\" ? <WindowPreview /> : <></>}\r\n          {defPage === \"ContextMenu\" ? <ContextMenuPreview /> : <></>}\r\n        </div>\r\n        {defPage === \"Global\" ? <Global /> : <></>}\r\n        {defPage === \"Desktop\" ? <Desktop /> : <></>}\r\n        {defPage === \"Start\" ? <Taskbar /> : <></>}\r\n        {defPage === \"Window\" ? <Window /> : <></>}\r\n        {defPage === \"ContextMenu\" ? <ContextMenu /> : <></>}\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n      </form>\r\n    </settings-container>\r\n  );\r\n};\r\n","import { Canvas } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\nimport { useRef, useMemo, useContext, Suspense } from \"react\";\r\nimport { BackgroundContext } from \"./BackgroundContext.js\";\r\nimport { OrbitControls, Plane, Stars, Sky } from \"@react-three/drei\";\r\nimport { extend, useFrame, useThree, useLoader } from \"@react-three/fiber\";\r\nimport { Water } from \"three-stdlib\";\r\nimport * as WaterNormals from \"./Textures/waternormals.jpeg\";\r\nimport * as HillsNormals from \"./Textures/DesertNormal.png\";\r\nimport * as SandTexture from \"./Textures/SandTexture1.jpg\";\r\n\r\nextend({ Water });\r\n\r\nexport default function Scenario() {\r\n  const background = useContext(BackgroundContext);\r\n  const Ocean = () => {\r\n    const ref = useRef();\r\n    const gl = useThree((state) => state.gl);\r\n    const waterNormals = useLoader(THREE.TextureLoader, WaterNormals.default);\r\n    waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping;\r\n    const geom = useMemo(() => new THREE.PlaneGeometry(1500, 1500), []);\r\n    const config = useMemo(\r\n      () => ({\r\n        textureWidth: 1036,\r\n        textureHeight: 1036,\r\n        waterNormals,\r\n        sunDirection: new THREE.Vector3(),\r\n        sunColor: 0xffffff,\r\n        waterColor: 0x001e0f,\r\n        distortionScale: 0.8,\r\n        fog: true,\r\n        format: gl.encoding,\r\n      }),\r\n      [waterNormals],\r\n    );\r\n    useFrame(\r\n      (state, delta) => (ref.current.material.uniforms.time.value += delta),\r\n    );\r\n    return <water ref={ref} args={[geom, config]} rotation-x={-Math.PI / 2} />;\r\n  };\r\n\r\n  const Desert = () => {\r\n    const ref = useRef();\r\n    const hillsNormals = useLoader(THREE.TextureLoader, HillsNormals.default);\r\n    hillsNormals.wrapS = hillsNormals.wrapT = THREE.ClampToEdgeWrapping;\r\n    const sandTexture = useLoader(THREE.TextureLoader, SandTexture.default);\r\n    sandTexture.wrapS = sandTexture.wrapT = THREE.RepeatWrapping;\r\n    sandTexture.repeat.set(100, 100);\r\n    return <Plane ref={ref} position={[0, -15, 0]} args={[1500, 1500, 150, 150]} rotation-x={-Math.PI / 2}>\r\n      <meshStandardMaterial\r\n        color=\"white\"\r\n        metalness={0.5}\r\n        roughness={0.8}\r\n        map={sandTexture}\r\n        normalMap={hillsNormals}\r\n        normalScale={new THREE.Vector2(0.8, 0.8)}\r\n        displacementMap={hillsNormals}\r\n        displacementScale={50} />\r\n    </Plane>;\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      style={{\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n      }}\r\n      dpr={window.devicePixelRatio}\r\n      camera={{ position: [0, 25, 10], near: 2 }}\r\n    >\r\n      {background.state[\"scenario\"][\"fog\"].isActive &&\r\n        <fog\r\n          attach=\"fog\"\r\n          color={background.state[\"scenario\"][\"fog\"].color}\r\n          near={background.state[\"scenario\"][\"fog\"].near}\r\n          far={background.state[\"scenario\"][\"fog\"].far}\r\n        />}\r\n      <OrbitControls target={[0, 25, 0]} />\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"sun\"].isActive &&\r\n          <Sky\r\n            distance={450000}\r\n            inclination={background.state[\"scenario\"][\"sun\"].inclination}\r\n            azimuth={background.state[\"scenario\"][\"sun\"].azimuth}\r\n            rayleigh={background.state[\"scenario\"][\"sun\"].rayleight}\r\n            turbidity={background.state[\"scenario\"][\"sun\"].turbidity}\r\n            exposure={background.state[\"scenario\"][\"sun\"].exposure}\r\n          />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"stars\"].isActive &&\r\n          <Stars\r\n            radius={440}\r\n            count={background.state[\"scenario\"][\"stars\"].count}\r\n          />}\r\n      </Suspense>\r\n      {background.state[\"scenario\"][\"directionalLight\"].isActive &&\r\n        <pointLight\r\n          color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n          intensity={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n          position={[0, 10000, -1500]}\r\n        />}\r\n      {background.state[\"scenario\"][\"ambientLight\"].isActive &&\r\n        <ambientLight\r\n          intensity={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n          color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n        />}\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"ocean\"].isActive && <Ocean />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"desert\"].isActive && <Desert />}\r\n      </Suspense>\r\n    </Canvas>\r\n  );\r\n};\r\n","export default function rgbToHsl(rgb) {\r\n    let r = rgb[0],\r\n        g = rgb[1],\r\n        b = rgb[2];\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n        cmax = Math.max(r, g, b),\r\n        delta = cmax - cmin,\r\n        h = 0,\r\n        s = 0,\r\n        l = ((cmax + cmin) / 2);\r\n    if (delta === 0) {\r\n        s = 0;\r\n        h = 0;\r\n    }else {\r\n        if (l <= 0.5) {\r\n            s = delta / (cmax + cmin);\r\n        } else {\r\n            s = delta / (2 - cmax-cmin);\r\n        };\r\n        if (cmax === r) {\r\n            h = (g - b) / delta;\r\n        } else if (cmax === g) {\r\n            h = ((b - r) / delta) + 2;\r\n        } else if(cmax === b) {\r\n            h = ((r - g) / delta) + 4;\r\n        }\r\n    }\r\n    h = Math.round(h * 60);\r\n    if (h < 0) {\r\n        h += 360;\r\n    }\r\n    s = Math.abs(s * 100).toFixed(0);\r\n    l = (l * 100 ).toFixed(0);\r\n    let hsl = [h, s + '%', l + '%'];\r\n    return hsl;\r\n}","export default function rgbaToHsla(rgba) {\r\n    var r = rgba[0],\r\n        g = rgba[1],\r\n        b = rgba[2],\r\n        a = rgba[3];\r\n        var r = parseInt(rgba[1], 16);\r\n        var g = parseInt(rgba[2], 16);\r\n        var b = parseInt(rgba[3], 16);\r\n        var a = parseInt(rgba[4], 16);\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n        let cmin = Math.min(r, g, b),\r\n            cmax = Math.max(r, g, b),\r\n            delta = cmax - cmin,\r\n            h = 0,\r\n            s = 0,\r\n            l = ((cmax + cmin) / 2);\r\n        if (delta === 0) {\r\n            s = 0;\r\n            h = 0;\r\n        }else {\r\n            if (l <= 0.5) {\r\n                s = delta / (cmax + cmin);\r\n            } else {\r\n                s = delta / (2 - cmax-cmin);\r\n            };\r\n            if (cmax === r) {\r\n                h = (g - b) / delta;\r\n            } else if (cmax === g) {\r\n                h = ((b - r) / delta) + 2;\r\n            } else if(cmax === b) {\r\n                h = ((r - g) / delta) + 4;\r\n            }\r\n        }\r\n        h = Math.round(h * 60);\r\n        if (h < 0) {\r\n            h += 360;\r\n        }\r\n        s = Math.abs(s * 100).toFixed(0);\r\n        l = (l * 100 ).toFixed(0);\r\n        let hsla = [h, s + '%', l + '%', a];\r\n        return hsla;\r\n    }","/*\r\nCustom color picker to replace default color picker from input[type=\"color\"],\r\nallowing for the use of alpha channel. The color picker is open on click,\r\nand closes on blur. \r\nThe color preview is set on color change, and applied when confirmed, by use \r\nof the callback function setColor, which is passed as props.\r\nThe return value is always in hsl or hsla format.\r\nThe alpha channel is used only if the useAlpha prop is true.\r\n\r\nTODO: \r\nAdd support for gradients,\r\nAdd support for color values RGB, RGBA, hex, and hex with alpha\r\n*/\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport hexToRgb from \"./Converters/hexToRgb\";\r\nimport hexToRgba from \"./Converters/hexToRgba\";\r\nimport rgbToHsl from \"./Converters/rgbToHsl\";\r\nimport rgbaToHsla from \"./Converters/rgbaToHsla\";\r\nimport nameToHsl from \"./Converters/nameToHsl\";\r\nimport \"../styles.css\";\r\n\r\nexport default function ColorPicker({ color, setColor, useAlpha }) {\r\n    const colorPickerRef = useRef(null);\r\n    const hueLumRef = useRef(null);\r\n    const saturationRef = useRef(null);\r\n    const alphaRef = useRef(null);\r\n    const [colorSelectorPos, setColorSelectorPos] = useState({ x: 0, y: 0 });\r\n    const [saturationSliderPos, setSaturationSliderPos] = useState(0);\r\n    const [alphaSliderPos, setAlphaSliderPos] = useState(0);\r\n    const [open, setOpen] = useState(false);\r\n    const [hue, setHue] = useState(0);\r\n    const [lightness, setLightness] = useState(50);\r\n    const [saturation, setSaturation] = useState(100);\r\n    const [alpha, setAlpha] = useState(100);\r\n\r\n    // Focus color picker when open, allowing its closing on blur\r\n    useEffect(() => {\r\n        if (open) {\r\n            colorPickerRef.current.focus();\r\n        }\r\n    }, [open]);\r\n\r\n    // Closes color picker on blur\r\n    const handleBlur = (event) => {\r\n        if (!event.currentTarget.contains(event.relatedTarget)) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    // Set displayed color based on current hue, saturation, and lightness, and uptades slider positions\r\n    useEffect(() => {\r\n        if (color) {\r\n            console.log(color);\r\n            if (useAlpha) {\r\n                let hslaColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslaColor = rgbaToHsla(hexToRgba(color));\r\n                } else if (color.slice(0, 4) === \"rgba\") {\r\n                    hslaColor = rgbaToHsla(color);\r\n                } else if (color.slice(0, 4) === \"hsla\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslaColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslaColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                }\r\n                console.log(hslaColor);\r\n                setHue(Number(hslaColor[0]));\r\n                setSaturation(Number(hslaColor[1].slice(0, hslaColor[1].length - 1)));\r\n                setLightness(Number(hslaColor[2].slice(0, hslaColor[2].length - 1)));\r\n                setAlpha(Number(hslaColor[3]));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslaColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslaColor[2].slice(0, hslaColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslaColor[1].slice(0, hslaColor[1].length - 1)) / 100) * saturationRect.height);\r\n                    const alphaRect = alphaRef.current.getBoundingClientRect();\r\n                    setAlphaSliderPos(hslaColor[3] * alphaRect.width);\r\n                }\r\n            } else {\r\n                let hslColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslColor = rgbToHsl(hexToRgb(color));\r\n                } else if (color.slice(0, 3) === \"rgb\") {\r\n                    hslColor = rgbToHsl(color);\r\n                } else if (color.slice(0, 3) === \"hsl\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                }else{\r\n                    hslColor = nameToHsl(color);\r\n                }\r\n                console.log(hslColor);\r\n                setHue(Number(hslColor[1]));\r\n                setSaturation(Number(hslColor[1].slice(0, hslColor[1].length - 1)));\r\n                setLightness(Number(hslColor[2].slice(0, hslColor[2].length - 1)));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslColor[2].slice(0, hslColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslColor[1].slice(0, hslColor[1].length - 1)) / 100) * saturationRect.height);\r\n                }\r\n            }\r\n        }\r\n    }, [open, color, useAlpha])\r\n\r\n    // Draw color map for hue on the x axis and lightness on the y axis, for the current saturation value\r\n    const drawColorMap = (ctx) => {\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        let blockwidth = ctx.canvas.width / 360;\r\n        let blockheight = ctx.canvas.height / 100;\r\n        for (let i = 0; i < 360; i++) {\r\n            for (let j = 0; j < 100; j++) {\r\n                ctx.fillStyle = `hsl(${i},${saturation}%,${100 - j}%)`;\r\n                ctx.fillRect(i * blockwidth, j * blockheight, (i + 1) * blockwidth, (j + 1) * blockheight);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates color map when saturation changes\r\n    useEffect(() => {\r\n        if (hueLumRef.current) {\r\n            const ctxColorPicker = hueLumRef.current.getContext(\"2d\", { alpha: false });\r\n            drawColorMap(ctxColorPicker);\r\n        }\r\n\r\n    }, [open, saturation]);\r\n\r\n    //Updates hue and luminance map slider positions when mouse moves, as well as their respective values\r\n    const handleHueLumMap = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = hueLumRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setColorSelectorPos({ x, y });\r\n                setHue(Math.floor(360 * x / rect.width));\r\n                setLightness(100 - Math.floor(100 * y / rect.height));\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    //Updates saturation slider position when mouse moves, as well as its value\r\n    const handleSaturationSlider = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = saturationRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setSaturation(100 - Math.floor(100 * y / rect.height));\r\n                setSaturationSliderPos(y);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates alpha slider position when mouse moves, as well as its value\r\n    const handleAlphaSlider = (e) => {\r\n        if (e.buttons !== 0) {\r\n            const rect = alphaRef.current.getBoundingClientRect();\r\n            let x = e.clientX - rect.left;\r\n            let y = e.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setAlpha((Math.floor(100 * x / rect.width)) / 100);\r\n                setAlphaSliderPos(x);\r\n            }\r\n        }\r\n    };\r\n    const handleHueInput = (value) => {\r\n        setHue(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, x: value / 360 * rect.width });\r\n    };\r\n\r\n    const handleLumInput = (value) => {\r\n        setLightness(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, y: (100 - value) / 100 * rect.height });\r\n    };\r\n\r\n    const handleSaturationInput = (value) => {\r\n        setSaturation(value);\r\n        const rect = saturationRef.current.getBoundingClientRect();\r\n        setSaturationSliderPos(((100 - value) / 100) * rect.height);\r\n    };\r\n\r\n    const handleAlphaInput = (value) => {\r\n        setAlpha(value);\r\n        const rect = alphaRef.current.getBoundingClientRect();\r\n        setAlphaSliderPos(value * rect.width);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <color-picker-button onClick={() => setOpen(!open)} >\r\n                <button style={{ background: color }} />\r\n            </color-picker-button>\r\n            {open && createPortal(\r\n                <color-picker-window\r\n                    tabIndex=\"0\"\r\n                    ref={colorPickerRef}\r\n                    onBlur={(e) => handleBlur(e)}\r\n                >\r\n                    <div>\r\n                        <hue-light-map>\r\n                            <canvas onMouseDown={(e) => handleHueLumMap(e)} onMouseMove={(e) => handleHueLumMap(e)} ref={hueLumRef} width=\"180\" height=\"180\"\r\n                                style={{ opacity: useAlpha ? alpha : 1 }}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: colorSelectorPos.y,\r\n                                    left: colorSelectorPos.x,\r\n                                    background:\r\n                                        useAlpha ?\r\n                                            `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` :\r\n                                            `hsl(${hue},${saturation}%,${lightness}%)`\r\n                                }}\r\n                                onMouseDown={(e) => handleHueLumMap(e)}\r\n                                onMouseMove={(e) => handleHueLumMap(e)}\r\n                            />\r\n                        </hue-light-map>\r\n                        <saturation-slider title=\"Saturation\">\r\n                            <div\r\n                                ref={saturationRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(0deg, hsl(${hue},0%,${lightness}%), hsla(${hue},100%,${lightness}%))`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: saturationSliderPos,\r\n                                    background: `hsla(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                            />\r\n                        </saturation-slider>\r\n                    </div>\r\n                    {useAlpha &&\r\n                        <alpha-slider title=\"Alpha\">\r\n                            <div\r\n                                ref={alphaRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(90deg, hsla(${hue},${saturation}%,${lightness}%, 0), hsla(${hue},${saturation}%,${lightness}%, 1))`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    left: alphaSliderPos,\r\n                                    background: `hsl(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                            />\r\n                        </alpha-slider>\r\n                    }\r\n                    <color-inputs>\r\n                        <div>\r\n                            Hue\r\n                            <input type=\"number\" min=\"0\" max=\"360\" value={hue}\r\n                                onChange={(e) => handleHueInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Lum.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={lightness}\r\n                                onChange={(e) => handleLumInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Sat.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={saturation}\r\n                                onChange={(e) => handleSaturationInput(e.target.value)} />\r\n                        </div>\r\n                        {useAlpha &&\r\n                            <div>\r\n                                Alpha\r\n                                <input type=\"number\" min=\"0\" max=\"1\" step=\"0.01\" value={alpha}\r\n                                    onChange={(e) => handleAlphaInput(e.target.value)} />\r\n                            </div>\r\n                        }\r\n                    </color-inputs>\r\n                    <color-button >\r\n                        <button\r\n                            style={{\r\n                                background: useAlpha ? `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` : `hsl(${hue},${saturation}%,${lightness}%)`\r\n                            }}\r\n                            onClick={() => { useAlpha ? setColor(`hsla(${hue},${saturation}%,${lightness}%, ${alpha})`) : setColor(`hsl(${hue},${saturation}%,${lightness}%)`) }}\r\n                        >\r\n                            Apply\r\n                        </button>\r\n                    </color-button>\r\n                </color-picker-window>\r\n                , document.getElementById(\"root\"))}\r\n        </>\r\n    );\r\n}","export default function hexToRgba(hex) {\r\n    var result;\r\n    if (hex.length === 5) {\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n        if(result[4] == 0){\r\n            result[4] = 'ff';\r\n        }\r\n    } else if(hex.length === 9) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }else if(hex.length === 8) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        result[4] = 'ff';\r\n    }\r\n        return result\r\n            ? [\r\n                parseInt(result[1], 16),\r\n                parseInt(result[2], 16),\r\n                parseInt(result[3], 16),\r\n                parseInt(result[4], 16) / 255,\r\n            ]\r\n            : null;\r\n}","export default function hexToRgb(hex) {\r\n    var result;\r\n    if(hex.length === 4){\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n    }else{\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }\r\n    return result\r\n        ? [\r\n               parseInt(result[1], 16),\r\n               parseInt(result[2], 16),\r\n               parseInt(result[3], 16),\r\n          ]\r\n        : null;\r\n}","export default function nameToHsl(name) {\r\n    switch(name){\r\n        case \"red\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"green\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"blue\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"yellow\":\r\n            return [60, \"100%\", \"50%\"];\r\n        case \"cyan\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"magenta\":\r\n            return [300, \"100%\", \"50%\"];\r\n        case \"black\":\r\n            return [0, \"0%\", \"0%\"];\r\n        case \"white\":\r\n            return [0, \"0%\", \"100%\"];\r\n        case \"gray\":\r\n        case \"grey\":\r\n            return [0, \"0%\", \"50%\"];\r\n        case \"lightgray\":\r\n        case \"lightgrey\":\r\n            return [0, \"0%\", \"75%\"];\r\n        case \"darkgray\":\r\n        case \"darkgrey\":\r\n            return [0, \"0%\", \"25%\"];\r\n        case \"brown\":\r\n            return [30, \"50%\", \"50%\"];\r\n        case \"orange\":\r\n            return [30, \"100%\", \"50%\"];\r\n        case \"purple\":\r\n            return [270, \"100%\", \"50%\"];\r\n        case \"pink\":\r\n            return [330, \"100%\", \"50%\"];\r\n        case \"lime\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"teal\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"aqua\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"maroon\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"navy\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"olive\":\r\n            return [60, \"100%\", \"50%\"];\r\n        default:\r\n            return [0, \"0%\", \"0%\"];\r\n    }\r\n}"],"names":["Global","fontFamily","setFontFamily","useState","getComputedStyle","root","getPropertyValue","useEffect","style","setProperty","_jsx","_Fragment","children","_jsxs","value","onChange","e","target","DesktopPreview","className","zIndex","FcGlobe","Desktop","background","useContext","BackgroundContext","backgroundMenu","setBackgroundMenu","state","active","document","querySelector","desktopBkgrColor","setDesktopBkgrColor","desktopBkgrImage","setDesktopBkgrImage","desktopBkgrSize","setDesktopBkgrSize","desktopBkgrPosition","setDesktopBkgrPosition","desktopBkgrRepeat","setDesktopBkgrRepeat","desktopFontSize","setDesktopFontSize","slice","desktopIconSize","setDesktopIconSize","color","type","gradient","degree","color1","color2","image","url","position","size","repeat","onClick","setActive","ColorPicker","setColor","useAlpha","htmlFor","id","accept","file","reader","FileReader","readAsDataURL","onload","readerEvent","setImage","result","uploadImage","files","cursor","setScenario","isActive","checked","min","max","step","inclination","azimuth","turbidity","rayleight","intensity","count","near","far","Number","WindowPreview","top","left","width","height","borderColor","FaRegWindowMinimize","FaWindowMaximize","AiOutlineClose","Window","fontSize","setFontSize","fontColor","setFontColor","bkgColor","setBkgColor","topbarBkgColor","setTopbarBkgColor","topBarHeight","setTopBarHeight","topBarIconSize","setTopBarIconSize","borderWidth","setBorderWidth","borderRadius","setBorderRadius","borderType","setBorderType","setBorderColor","shadowXOffset","setShadowXOffset","shadowYOffset","setShadowYOffset","shadowBlur","setShadowBlur","shadowSpread","setShadowSpread","shadowColor","setShadowColor","inactiveBorderColor","setInactiveBorderColor","inactiveTopBarBkgColor","setInactiveTopBarBkgColor","inactiveFontColor","setInactiveFontColor","inactiveBkgColor","setInactiveBkgColor","dialogBkgr","setDialogBkgr","dialogBorderColor","setDialogBorderColor","dialogBorderWidth","setDialogBorderWidth","dialogBorderRadius","setDialogBorderRadius","dialogBorderType","setDialogBorderType","dialogInfoFontColor","setDialogInfoFontColor","dialogInfoFontSize","setDialogInfoFontSize","dialogTopBarBkgr","setDialogTopBarBkgr","dialogTopBarFontSize","setDialogTopBarFontSize","dialogTopBarFontColor","setDialogTopBarFontColor","dialogButtonBkgr","setDialogButtonBkgr","dialogButtonFontColor","setDialogButtonFontColor","dialogButtonFontSize","setDialogButtonFontSize","dialogButtonBorderColor","setDialogButtonBorderColor","dialogButtonBorderWidth","setDialogButtonBorderWidth","dialogButtonBorderRadius","setDialogButtonBorderRadius","dialogButtonBorderType","setDialogButtonBorderType","TaskbarPreview","display","flexDirection","justifyContent","bottom","FaReact","class","transition","FcInfo","FcSettings","FaGear","MdOutlineRestartAlt","RiShutDownLine","WiCloudy","Taskbar","taskbarHeight","setTaskbarHeight","taskbarBkgr","setTaskbarBkgr","taskbarIconSize","setTaskbarIconSize","taskbarFontSize","setTaskbarFontSize","taskbarFontColor","setTaskbarFontColor","startIconColor","setStartIconColor","startMenuBkgr","setStartMenuBkgr","startMenuFontColor","setStartMenuFontColor","weatherColor","setWeatherColor","weatherBkgr","setWeatherBkgr","weatherFontColor","setWeatherFontColor","clockColor","setClockColor","clockBkgr","setClockBkgr","clockFontColor","setClockFontColor","ContextMenuPreview","checkbox1","setCheckbox1","checkbox2","setCheckbox2","radio","setRadio","readOnly","name","ContextMenu","Definitions","defPage","setDefPage","onSubmit","preventDefault","Scenario","Ocean","ref","useRef","gl","useThree","waterNormals","useLoader","THREE","WaterNormals","wrapS","wrapT","geom","useMemo","config","textureWidth","textureHeight","sunDirection","sunColor","waterColor","distortionScale","fog","format","encoding","useFrame","delta","current","material","uniforms","time","args","Math","PI","Desert","hillsNormals","HillsNormals","sandTexture","SandTexture","set","Plane","metalness","roughness","map","normalMap","normalScale","displacementMap","displacementScale","Canvas","dpr","window","devicePixelRatio","camera","attach","OrbitControls","Suspense","fallback","Sky","distance","rayleigh","exposure","Stars","radius","extend","Water","rgbToHsl","rgb","r","g","b","cmin","cmax","h","s","l","round","abs","toFixed","rgbaToHsla","rgba","a","parseInt","_ref","colorPickerRef","hueLumRef","saturationRef","alphaRef","colorSelectorPos","setColorSelectorPos","x","y","saturationSliderPos","setSaturationSliderPos","alphaSliderPos","setAlphaSliderPos","open","setOpen","hue","setHue","lightness","setLightness","saturation","setSaturation","alpha","setAlpha","focus","console","log","hslaColor","hex","length","exec","hexToRgba","i","start","end","push","hueLumRect","getBoundingClientRect","saturationRect","alphaRect","hslColor","hexToRgb","nameToHsl","ctx","clearRect","canvas","blockwidth","blockheight","j","fillStyle","fillRect","drawColorMap","getContext","handleHueLumMap","event","buttons","rect","clientX","clientY","floor","handleSaturationSlider","handleAlphaSlider","createPortal","tabIndex","onBlur","currentTarget","contains","relatedTarget","onMouseDown","onMouseMove","opacity","title","handleHueInput","handleLumInput","handleSaturationInput","handleAlphaInput","getElementById"],"sourceRoot":""}