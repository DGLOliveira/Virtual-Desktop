{"version":3,"file":"static/js/945.2b1d7e8f.chunk.js","mappings":"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","sources":["Apps/Gyroscope/index.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\nimport { useGLTF, OrthographicCamera } from \"@react-three/drei\";\r\nimport GyroscopeObject from \"./Assets/Gyroscope.glb\";\r\nimport \"./style.css\";\r\nexport default function Gyroscope() {\r\n    const [state, setState] = useState(\"ready\");\r\n    const [angles, setAngles] = useState({\r\n        heading: 0,\r\n        pitch: 0,\r\n        roll: 0,\r\n        screenOrientationType: screen.orientation.type,\r\n        screenOrientationAngle: screen.orientation.angle\r\n    });\r\n    var sensor = null;\r\n    const SENSOR_UPDATE_FREQUENCY = 4; //keep value low to avoid battery drain\r\n\r\n    //3D model of Gyroscope\r\n    const Gyro = () => {\r\n        const object = useGLTF(GyroscopeObject);\r\n        const ref = useRef();\r\n        let externalGimbal, internalGimbal, axis, rotor;\r\n        object.scene.children.forEach((child) => {\r\n            child.name === \"External_Gimbal\" ? (externalGimbal = child) : null;\r\n            child.name === \"Internal_Gimbal\" ? (internalGimbal = child) : null;\r\n            child.name === \"Axis\" ? (axis = child) : null;\r\n        })\r\n        let accDelta = 0;\r\n        //Animates 3D model\r\n        //Sensor quaternion values cannot be used directly, they must be converted to euler angles in order to use their individual angles\r\n        //Note that euler angles must be converted back to quaternion in order to prevent Gimbal lock\r\n        useFrame((state, delta) => {\r\n            if (state === \"running\") {\r\n                accDelta += delta * 10;\r\n            }\r\n            if (externalGimbal !== undefined && internalGimbal !== undefined && axis !== undefined) {\r\n                let alpha = angles.roll + Math.PI;\r\n                let beta = angles.pitch + Math.PI / 2 + accDelta;\r\n                let gama = accDelta;\r\n                externalGimbal.quaternion.w = Math.cos(alpha / 2);\r\n                externalGimbal.quaternion.y = Math.sin(alpha / 2);\r\n                externalGimbal.quaternion.x = 0;\r\n                externalGimbal.quaternion.z = 0;\r\n                internalGimbal.quaternion.w = Math.cos(alpha / 2) * Math.cos(beta / 2);\r\n                internalGimbal.quaternion.y = Math.sin(alpha / 2) * Math.cos(beta / 2);\r\n                internalGimbal.quaternion.x = Math.cos(alpha / 2) * Math.sin(beta / 2);\r\n                internalGimbal.quaternion.z = - Math.sin(alpha / 2) * Math.sin(beta / 2);\r\n                axis.quaternion.w = Math.cos(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.cos(gama / 2) + Math.sin(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.sin(gama / 2);\r\n                axis.quaternion.y = Math.sin(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.cos(gama / 2) - Math.cos(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.sin(gama / 2);\r\n                axis.quaternion.x = Math.cos(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.cos(gama / 2) + Math.sin(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.sin(gama / 2);\r\n                axis.quaternion.z = Math.cos(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.sin(gama / 2) - Math.sin(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.cos(gama / 2);\r\n            }\r\n        })\r\n        return <primitive ref={ref} object={object.scene} scale={1.6} />\r\n    }\r\n\r\n    //converts quaternion to angles in radians\r\n    function quaternionToAngles(x, y, z, w) {\r\n        const heading = Math.atan2(2 * (x * y + z * w), 1 - 2 * (y * y + z * z));\r\n        const pitch = Math.asin(2 * (x * z - w * y));\r\n        const roll = Math.atan2(2 * (x * w + y * z), 1 - 2 * (x * x + y * y));\r\n        return {\r\n            heading: heading,\r\n            pitch: pitch,\r\n            roll: roll,\r\n        };\r\n    };\r\n\r\n    //runs gyroscope\r\n    const runGyroscope = () => {\r\n        const options = { frequency: SENSOR_UPDATE_FREQUENCY, referenceFrame: \"device\" };\r\n        sensor = new RelativeOrientationSensor(options);\r\n        sensor.start();\r\n        console.log(\"gyroscope started\");\r\n        sensor.onreading = () => {\r\n            let newAngles = quaternionToAngles(\r\n                sensor.quaternion[0],\r\n                sensor.quaternion[1],\r\n                sensor.quaternion[2],\r\n                sensor.quaternion[3]\r\n            );\r\n            let newOrientationType = screen.orientation.type;\r\n            let newOrientationAngle = screen.orientation.angle;\r\n            setAngles({...newAngles, newOrientationType, newOrientationAngle});\r\n            console.log(angles);\r\n        }\r\n    };\r\n\r\n    //state machine\r\n    useEffect(() => {\r\n        if (state === \"start\") {\r\n            if (\"AbsoluteOrientationSensor\" in window) {\r\n                Promise.all([\r\n                    navigator.permissions.query({ name: \"gyroscope\" }),\r\n                    navigator.permissions.query({ name: \"accelerometer\" })\r\n                ]).then((results) => {\r\n                    if (results.every((result) => result.state === \"granted\")) {\r\n                        setState(\"running\");\r\n                    } else {\r\n                        setState(\"not allowed\");\r\n                    }\r\n                });\r\n            } else {\r\n                setState(\"not supported\");\r\n            }\r\n\r\n        }\r\n        if (state === \"running\") {\r\n            runGyroscope();\r\n        }\r\n    }, [state]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (sensor) {\r\n                sensor.stop();\r\n            }\r\n        }\r\n    },[]);\r\n\r\n    return (<>\r\n        <Canvas>\r\n            <ambientLight intensity={1} />\r\n            <pointLight position={[-10, -10, 10]} intensity={500} />\r\n            <Gyro />\r\n            <OrthographicCamera makeDefault={true} zoom={50} position={[0, 0, 10]} />\r\n        </Canvas>\r\n        {state === \"ready\" &&\r\n            <button className=\"gyroscopeStartButton\" onClick={() => setState('start')}>\r\n                Start\r\n            </button>\r\n        }\r\n        {state === \"not supported\" &&\r\n            <div className=\"gyroscopeWarning\">\r\n                This feature is not supported on your device and/or browser\r\n            </div>\r\n        }\r\n        {state === \"not allowed\" &&\r\n            <div className=\"gyroscopeWarning\">\r\n                This feature does not have permission to access your device sensors\r\n            </div>\r\n        }\r\n    </>);\r\n}"],"names":["Gyroscope","state","setState","useState","angles","setAngles","heading","pitch","roll","screenOrientationType","screen","orientation","type","screenOrientationAngle","angle","sensor","Gyro","object","useGLTF","GyroscopeObject","ref","useRef","externalGimbal","internalGimbal","axis","scene","children","forEach","child","name","accDelta","useFrame","delta","undefined","alpha","Math","PI","beta","gama","quaternion","w","cos","y","sin","x","z","_jsx","scale","runGyroscope","RelativeOrientationSensor","frequency","referenceFrame","start","console","log","onreading","newAngles","atan2","asin","newOrientationType","newOrientationAngle","useEffect","window","Promise","all","navigator","permissions","query","then","results","every","result","stop","_jsxs","_Fragment","Canvas","intensity","position","OrthographicCamera","makeDefault","zoom","className","onClick"],"sourceRoot":""}