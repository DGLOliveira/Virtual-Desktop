{"version":3,"file":"static/js/308.a3d47f98.chunk.js","mappings":"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","sources":["Apps/Gyroscope/Components/Gyro.jsx","Apps/Gyroscope/index.jsx"],"sourcesContent":["import { useGLTF } from \"@react-three/drei\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport GyroscopeObject from \"../Assets/Gyroscope.glb\";\r\nexport default function Gyro({ state, angles }) {\r\n    const object = useGLTF(GyroscopeObject);\r\n    let externalGimbal, internalGimbal, axis, rotor;\r\n    object.scene.children.forEach((child) => {\r\n        child.name === \"External_Gimbal\" ? (externalGimbal = child) : null;\r\n        child.name === \"Internal_Gimbal\" ? (internalGimbal = child) : null;\r\n        child.name === \"Axis\" ? (axis = child) : null;\r\n    })\r\n    let accDelta = 0;\r\n    //Animates 3D model\r\n    //Sensor quaternion values cannot be used directly, they must be converted to euler angles in order to use their individual angles\r\n    //Note that euler angles must be converted back to quaternion in order to prevent Gimbal lock\r\n    useFrame((stt, delta) => {\r\n        if (state === \"running\") {\r\n            accDelta += delta * 10;\r\n        }\r\n        if (externalGimbal !== undefined && internalGimbal !== undefined && axis !== undefined) {\r\n            let alpha, beta;\r\n            let gama = accDelta;\r\n            if (angles.screenOrientationAngle === 90) {\r\n                alpha = -angles.roll + Math.PI;\r\n                beta = angles.pitch + Math.PI / 2;\r\n            } else if (angles.screenOrientationAngle === 270) {\r\n                alpha = angles.roll - Math.PI;\r\n                beta = -angles.pitch + Math.PI / 2;\r\n            } else if (angles.screenOrientationAngle === 0) {\r\n                alpha = angles.pitch + Math.PI;\r\n                beta = angles.roll + Math.PI / 2;\r\n            } else {\r\n                alpha = angles.pitch + Math.PI;\r\n                beta = -angles.roll + Math.PI / 2;\r\n            }\r\n            externalGimbal.quaternion.w = Math.cos(alpha / 2);\r\n            externalGimbal.quaternion.y = Math.sin(alpha / 2);\r\n            externalGimbal.quaternion.x = 0;\r\n            externalGimbal.quaternion.z = 0;\r\n            internalGimbal.quaternion.w = Math.cos(alpha / 2) * Math.cos(beta / 2);\r\n            internalGimbal.quaternion.y = Math.sin(alpha / 2) * Math.cos(beta / 2);\r\n            internalGimbal.quaternion.x = Math.cos(alpha / 2) * Math.sin(beta / 2);\r\n            internalGimbal.quaternion.z = - Math.sin(alpha / 2) * Math.sin(beta / 2);\r\n            axis.quaternion.w = Math.cos(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.cos(gama / 2) + Math.sin(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.sin(gama / 2);\r\n            axis.quaternion.y = Math.sin(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.cos(gama / 2) - Math.cos(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.sin(gama / 2);\r\n            axis.quaternion.x = Math.cos(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.cos(gama / 2) + Math.sin(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.sin(gama / 2);\r\n            axis.quaternion.z = Math.cos(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.sin(gama / 2) - Math.sin(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.cos(gama / 2);\r\n        }\r\n    })\r\n    return <primitive object={object.scene} scale={1.6} />\r\n}","import { useState, useEffect, Suspense } from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { OrthographicCamera } from \"@react-three/drei\";\r\nimport Gyro from \"./Components/Gyro.jsx\";\r\nimport \"./style.css\";\r\n\r\nexport default function Gyroscope() {\r\n    const [state, setState] = useState(\"ready\");\r\n    const [angles, setAngles] = useState({\r\n        heading: 0,\r\n        pitch: 0,\r\n        roll: 0,\r\n        screenOrientationAngle: screen.orientation.angle\r\n    });\r\n    var sensor = null;\r\n    var zoom = 50;\r\n    const SENSOR_UPDATE_FREQUENCY = 4; //keep value low to avoid battery drain\r\n\r\n    //3D model of Gyroscope\r\n\r\n    //converts quaternion to angles in radians\r\n    function quaternionToAngles(x, y, z, w) {\r\n        const heading = Math.atan2(2 * (x * y + z * w), 1 - 2 * (y * y + z * z));\r\n        const pitch = Math.asin(2 * (x * z - w * y));\r\n        const roll = Math.atan2(2 * (x * w + y * z), 1 - 2 * (x * x + y * y));\r\n        return {\r\n            heading: heading,\r\n            pitch: pitch,\r\n            roll: roll,\r\n        };\r\n    };\r\n\r\n    //runs gyroscope\r\n    const runGyroscope = () => {\r\n        const options = { frequency: SENSOR_UPDATE_FREQUENCY, referenceFrame: \"device\" };\r\n        sensor = new RelativeOrientationSensor(options);\r\n        sensor.start();\r\n        console.log(\"gyroscope started\");\r\n        sensor.onreading = () => {\r\n            let newAngles = quaternionToAngles(\r\n                sensor.quaternion[0],\r\n                sensor.quaternion[1],\r\n                sensor.quaternion[2],\r\n                sensor.quaternion[3]\r\n            );\r\n            let newOrientationAngle = screen.orientation.angle;\r\n            setAngles({ ...newAngles, screenOrientationAngle: newOrientationAngle });\r\n        }\r\n    };\r\n\r\n    //state machine\r\n    useEffect(() => {\r\n        if (state === \"start\") {\r\n            if (\"AbsoluteOrientationSensor\" in window) {\r\n                Promise.all([\r\n                    navigator.permissions.query({ name: \"gyroscope\" }),\r\n                    navigator.permissions.query({ name: \"accelerometer\" })\r\n                ]).then((results) => {\r\n                    if (results.every((result) => result.state === \"granted\")) {\r\n                        setState(\"running\");\r\n                    } else {\r\n                        setState(\"not allowed\");\r\n                    }\r\n                });\r\n            } else {\r\n                setState(\"not supported\");\r\n            }\r\n\r\n        }\r\n        if (state === \"running\") {\r\n            runGyroscope();\r\n        }\r\n    }, [state]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (sensor) {\r\n                sensor.stop();\r\n                console.log(\"stopped sensor\");\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    return (<>\r\n        <Canvas\r\n            id=\"gyroscopeCanvas\"\r\n        >\r\n            <ambientLight intensity={1} />\r\n            <pointLight position={[-10, -10, 10]} intensity={500} />\r\n            <Suspense fallback={null}>\r\n                <Gyro state={state} angles={angles} />\r\n            </Suspense>\r\n            <OrthographicCamera makeDefault={true} zoom={zoom} position={[0, 0, 10]} />\r\n        </Canvas>\r\n        {state === \"ready\" &&\r\n            <button className=\"gyroscopeStartButton\" onClick={() => setState('start')}>\r\n                Start\r\n            </button>\r\n        }\r\n        {state === \"not supported\" &&\r\n            <div className=\"gyroscopeWarning\">\r\n                This feature is not supported on your device and/or browser\r\n            </div>\r\n        }\r\n        {state === \"not allowed\" &&\r\n            <div className=\"gyroscopeWarning\">\r\n                This feature does not have permission to access your device sensors\r\n            </div>\r\n        }\r\n    </>);\r\n}"],"names":["Gyro","_ref","state","angles","object","useGLTF","GyroscopeObject","externalGimbal","internalGimbal","axis","scene","children","forEach","child","name","accDelta","useFrame","stt","delta","undefined","alpha","beta","gama","screenOrientationAngle","roll","Math","PI","pitch","quaternion","w","cos","y","sin","x","z","_jsx","scale","Gyroscope","setState","useState","setAngles","heading","screen","orientation","angle","sensor","runGyroscope","RelativeOrientationSensor","frequency","referenceFrame","start","console","log","onreading","newAngles","atan2","asin","newOrientationAngle","useEffect","window","Promise","all","navigator","permissions","query","then","results","every","result","stop","_jsxs","_Fragment","Canvas","id","intensity","position","Suspense","fallback","OrthographicCamera","makeDefault","zoom","className","onClick"],"sourceRoot":""}