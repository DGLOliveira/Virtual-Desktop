{"version":3,"file":"static/js/682.5dfbf154.chunk.js","mappings":"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,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE9D,EAAG,CACC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1D,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MAKhEI,EAAgB,CAClBzK,GAAI,GACJoB,EAAG,GACHC,EAAG,IACHE,MAAO,EACPmJ,KAAM,OACNC,UAAU,EACVC,QAAS,EACTV,WAAY,EACZ5I,EAAG,GACH6E,EAAG,GACH1F,MAAO,QACPoK,SAAU,IACVR,QAAS,CACL,EAAG,CACC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MAIlCS,EAAe,CACjB9K,GAAI,EACJoB,EAAG,GACHC,EAAG,GACH6I,WAAY,EACZ5I,EAAG,GACH6E,EAAG,GACH1F,MAAO,OACP4J,QAAS,CACL,EAAG,CACC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MAIlCU,EAAsB,CACxB/K,GAAI,SACJoB,EAAG,GACHC,EAAG,GACH8E,EAAG,EACH7E,EAAG,EACHC,MAAO,EACPd,MAAO,QACPyJ,WAAY,EACZC,aAAc,EACdE,QAAS,CACL,EAAG,CACC,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAER,EAAG,CACC,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,MAIVW,EAAuB,CACzBhL,GAAI,UACJoB,EAAG,GACHC,EAAG,GACH6I,WAAY,EACZC,aAAc,EACd7I,EAAG,EACH6E,EAAG,EACH5E,MAAO,EACPd,MAAO,SACP4J,QAAS,CACL,EAAG,CACC,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,MAKD,SAASY,EAAatM,GAAqD,IAApD,SAAEC,EAAQ,WAAEmD,EAAU,UAAEC,EAAS,aAAEnD,GAAcF,EAEnF,MAAMsD,GAAYC,EAAAA,EAAAA,QAAO,OAClB8B,EAAOC,IAAYhF,EAAAA,EAAAA,UAAS,IAC5BiM,EAAOC,IAAYlM,EAAAA,EAAAA,UAAS,IAC5BmM,EAAOC,IAAYpM,EAAAA,EAAAA,UAAS,IAC5B+D,EAAYC,IAAiBhE,EAAAA,EAAAA,UAAS,IACtCqM,EAASC,IAActM,EAAAA,EAAAA,UAAS,IAChCuM,EAAgBC,IAAqBxM,EAAAA,EAAAA,UAAS,CACjDoB,MAAO,EACPY,KAAM,MAEHyK,EAAUC,IAAe1M,EAAAA,EAAAA,UAAS,KAClC2M,EAASC,IAAc5M,EAAAA,EAAAA,UAAS,KAChC6M,EAAYC,IAAiB9M,EAAAA,EAAAA,UAAS,IACvC+M,EAAoB,IAG1B,IAAKC,EAAQC,IAAajN,EAAAA,EAAAA,UAASO,OAAO8D,OAAOmH,KAC5CvG,EAAMC,IAAWlF,EAAAA,EAAAA,UAAS,GAC/B,MAAOmF,EAAWC,IAAgBpF,EAAAA,EAAAA,UAAS,IAI3CK,EAAAA,EAAAA,YAAU,KACN,GAAIV,EAAS0F,MACT,OAAQtC,GACJ,IAAK,OACDnD,EAAa,SACb,MACJ,IAAK,QACDA,EAAa,QACb,MACJ,IAAK,MACL,IAAK,MACL,IAAK,QACDA,EAAa,WAKzB,GACD,CAACD,KAEJU,EAAAA,EAAAA,YAAU,KACY,SAAd0C,IAEIpD,EAAS2F,OACR3F,EAAS4F,OACVyH,EAAO7K,EAAI6K,EAAO3K,EAAI2K,EAAO3K,EAE7B2K,EAAO7K,EAAI6K,EAAO7K,EAAI6K,EAAO1K,MAE7B3C,EAAS4F,QACR5F,EAAS2F,MACV0H,EAAO7K,EAAI6K,EAAO3K,EAAIJ,EAEtB+K,EAAO7K,EAAI6K,EAAO7K,EAAI6K,EAAO1K,MACtB3C,EAAS2F,MAAQ3F,EAAS4F,MAEjCyH,EAAOvB,KAAO,OACN9L,EAAS2F,MAAS3F,EAAS4F,QACnCyH,EAAOvB,KAAO,SAEd9L,EAASe,IAAMf,EAASgB,MAED,IAAnBqM,EAAOrB,UACPqB,EAAOtB,UAAW,GAI9B,GACD,CAAC/L,EAAUoE,KAEd1D,EAAAA,EAAAA,YAAU,KACNsK,QAAQC,IAAI7H,GACM,YAAdA,EACAmC,EAAQ,GACa,SAAdnC,EACPqC,EAAaI,YAAYC,OACJ,UAAd1C,GACO,QAAdA,GACc,QAAdA,IACAmC,EAAQD,EAAOO,YAAYC,MAAQN,GACnCF,GAAQO,YAAYC,MAAQN,EAChC,GACD,CAACpC,IAGJ,MAAM+G,EAAanI,IACfA,EAAIC,UAAY,QAChBD,EAAIE,SAAS,EAAG,EAAGF,EAAIgE,OAAO3E,MAAOW,EAAIgE,OAAO1E,OAAO,EAErDiM,EAAaA,CAACvL,EAAKwL,MACF,IAAfA,EAAOhC,IACPxJ,EAAIC,UAAY,QAEhBD,EAAIC,UAAYuL,EAAO3L,MAE3B,IAAK,IAAIwE,EAAI,EAAGA,EAAImH,EAAO/B,QAAQ+B,EAAOlC,YAAYxK,OAAQuF,IAC1D,IAAK,IAAIoH,EAAI,EAAGA,EAAID,EAAO/B,QAAQ+B,EAAOlC,YAAYjF,GAAGvF,OAAQ2M,IACb,IAA5CD,EAAO/B,QAAQ+B,EAAOlC,YAAYjF,GAAGoH,IACrCzL,EAAIE,SAASsL,EAAOhL,EAAIiL,EAAGD,EAAO/K,EAAI4D,EAAG,EAAG,GAIpDmH,EAAO/B,QAAQ3K,OAAS,IACpB0M,EAAOlC,WAAakC,EAAO/B,QAAQ3K,OAAS,EAC5C0M,EAAOlC,aAEPkC,EAAOlC,WAAa,EAE5B,EAuEEoC,EAAe3F,IACjB,IAAK,IAAI1B,EAAI,EAAGA,EAAIyG,EAAShM,OAAQuF,IACjCkH,EAAWxF,EAAS+E,EAASzG,IAEjC,IAAK,IAAIA,EAAI,EAAGA,EAAI2G,EAAQlM,OAAQuF,IAChCkH,EAAWxF,EAASiF,EAAQ3G,IAEhCkH,EAAWxF,EAASsF,GA5EArL,KACpB,IAAI2L,EAAW,EACXC,EAAa,EACbC,EAAY,EAChB,GAAIX,EAAWpM,OAAS,EACpB,IAAK,IAAIuF,EAAI,EAAGA,EAAI6G,EAAWpM,OAAQuF,IAAK,CACpC6G,EAAW7G,GAAGyH,OAASV,mBACvBO,EAAWlH,KAAK8B,MAA8B,IAAvB2E,EAAW7G,GAAGyH,MAAY,oBAC1CZ,EAAW7G,GAAGyH,OAASV,IAAwB,GACtDO,EAAW,IACXC,EAAanH,KAAK8B,MAAsD,KAA/C2E,EAAW7G,GAAGyH,MAAQV,oBAA4B,sBAE3EO,EAAW,IACXC,EAAa,IACbC,EAAYpH,KAAK8B,MAA0D,KAAnD2E,EAAW7G,GAAGyH,MAAQV,IAAwB,GAAQ,qBAElFpL,EAAIC,UAAY,OAAS0L,EAAW,IAAMC,EAAa,IAAMC,EAAY,IACzE,IAAIE,EAAS,EAAIb,EAAW7G,GAAGyH,OAASV,EAAoBF,EAAW7G,GAAGyH,OACtEE,EAASd,EAAW7G,GAAG3D,EAAI,EAAIqL,EAAS,GAC5C/L,EAAIE,SAASgL,EAAW7G,GAAG7D,EAAa,EAATwL,EAAa,EAAGd,EAAW7G,GAAG5D,EAAa,EAATuL,EAAa,EAAG,EAAG,GACpFhM,EAAIE,SAASgL,EAAW7G,GAAG7D,EAAa,EAATwL,EAAa,EAAGd,EAAW7G,GAAG5D,EAAa,EAATuL,EAAa,EAAG,EAAG,GACpFhM,EAAIE,SAASgL,EAAW7G,GAAG7D,EAAa,EAATwL,EAAa,EAAGd,EAAW7G,GAAG5D,EAAa,EAATuL,EAAa,EAAG,EAAG,GACpFhM,EAAIE,SAASgL,EAAW7G,GAAG7D,EAAa,EAATwL,EAAa,EAAGd,EAAW7G,GAAG5D,EAAa,EAATuL,EAAa,EAAG,EAAG,GACpFhM,EAAIE,SAASgL,EAAW7G,GAAG7D,EAAIwL,EAAQd,EAAW7G,GAAG5D,EAAG,EAAG,GAC3DT,EAAIE,SAASgL,EAAW7G,GAAG7D,EAAIwL,EAAQd,EAAW7G,GAAG5D,EAAG,EAAG,GAC3DT,EAAIE,SAASgL,EAAW7G,GAAG7D,EAAG0K,EAAW7G,GAAG5D,EAAIuL,EAAQ,EAAG,GAC3DhM,EAAIE,SAASgL,EAAW7G,GAAG7D,EAAG0K,EAAW7G,GAAG5D,EAAIuL,EAAQ,EAAG,EAC/D,CAEJ,EAgDAC,CAAelG,EAAQ,EAGrBmG,EAAaA,KACf,IAAIC,EAAa,CAAC,EACdC,EAAc,GACdC,EAAoB,CAAE5M,MAAO,EAAGY,KAAM,IAC1C,IAAK,IAAIgE,EAAI,EAAGA,EAAI9C,EAAKiJ,GAAO/E,OAAO3G,OAAQuF,IAC3C,IAAK,IAAIoH,EAAI,EAAGA,EAAIlK,EAAKiJ,GAAO/E,OAAOpB,GAAGvF,OAAQ2M,IAC9C,OAAQlK,EAAKiJ,GAAO/E,OAAOpB,GAAGoH,IAC1B,KAAK,EACDU,EAAavN,OAAO8D,OAAOyG,GAC3BgD,EAAW3L,EAAIiL,EAAIvC,EAAY,IAC/BiD,EAAW1L,EAAI,GAAK4D,EAAI6E,EAAY,IACpCiD,EAAW/C,IAAM/E,EACjB+H,EAAYE,KAAKH,QACiBjE,IAA9BmE,EAAkBhM,KAAKgE,IACvBgI,EAAkBhM,KAAKiM,KAAK,SAEhC,MACJ,KAAK,EACDH,EAAavN,OAAO8D,OAAOgH,GAC3ByC,EAAW3L,EAAIiL,EAAIvC,EAAY,IAC/BiD,EAAW1L,EAAI,GAAK4D,EAAI6E,EAAY,IACpCiD,EAAW/C,IAAM/E,EACjB+H,EAAYE,KAAKH,QACiBjE,IAA9BmE,EAAkBhM,KAAKgE,IACvBgI,EAAkBhM,KAAKiM,KAAK,SAEhC,MACJ,KAAK,EACDH,EAAavN,OAAO8D,OAAOiH,GAC3BwC,EAAW3L,EAAIiL,EAAIvC,EAAY,IAC/BiD,EAAW1L,EAAI,GAAK4D,EAAI6E,EAAY,IACpCiD,EAAW/C,IAAM/E,EACjB+H,EAAYE,KAAKH,QACiBjE,IAA9BmE,EAAkBhM,KAAKgE,IACvBgI,EAAkBhM,KAAKiM,KAAK,SAEhC,MACJ,KAAK,EACDH,EAAavN,OAAO8D,OAAOwH,GAC3BiC,EAAW3L,EAAIiL,EAAIvC,EAAY,IAC/BiD,EAAW1L,EAAI,EAAI4D,EAAI6E,EAAY,IACnCkD,EAAYE,KAAKH,GAQjCxB,EAAWpJ,EAAKiJ,GAAO+B,SACvBxB,EAAYqB,GACZvB,EAAkBwB,EAAkB,EAiElCG,EAAmBC,IACrB,IAAIC,EAAe,CACflM,EAAGiM,EAAOjM,EAAIiM,EAAO/L,EAAI,EAAI,EAC7BD,EAAGgM,EAAOhM,EAAIgM,EAAOlH,EAAI,EAAI,EAC7B7E,EAAG+L,EAAO/L,EACV6E,EAAGkH,EAAOlH,EACVuG,MAAOV,GAEXF,EAAWoB,KAAKI,GAChBvB,EAAcD,EAAW,EAsCvByB,EAAcC,IACZ9B,EAAS8B,GAAcvD,KAAO,EAAI,GAClCyB,EAAS8B,GAAcvD,KAAOyB,EAAS8B,GAAcvD,KAAO,EAC5DyB,EAAS8B,GAAcpD,KAAM,EAC7BnG,EAASD,EAAQ,GACjBgD,YAAW,KACP0E,EAAS8B,GAAcpD,KAAM,CAAK,GACnC,CAAC6B,EAAOpB,SAAW,MAEtBuC,EAAgB1B,EAAS8B,IACS,IAA9B9B,EAAS8B,GAAcxN,IACvBuL,EAAWD,EAAU,GACrBrH,EAASD,EAAQ,KAEjBC,EAASD,EAAQ,KAErB0H,EAAS+B,OAAOD,EAAc,IAElC7B,EAAYD,EAAS,EAEnBgC,EAAYC,IACdP,EAAgB1B,EAASiC,GAAY,EAInCC,GAAkBC,IACpB,IAAIC,GAAW,EACf,IAAK,IAAI7I,EAAI,EAAGA,EAAIyG,EAAShM,OAAQuF,IACD,WAA5B2G,EAAQiC,GAAa7N,GACjB4L,EAAQiC,GAAazM,EAAIsK,EAASzG,GAAG7D,GACrCwK,EAAQiC,GAAazM,EAAIsK,EAASzG,GAAG7D,EAAIsK,EAASzG,GAAG3D,GACrDsK,EAAQiC,GAAaxM,EAAIqK,EAASzG,GAAG5D,GACrCuK,EAAQiC,GAAaxM,EAAIqK,EAASzG,GAAG5D,EAAIqK,EAASzG,GAAGkB,IACrD2H,GAAW,EACY,IAAnBpC,EAASzG,GAAGjF,GACZ0N,EAASzI,GAETsI,EAAWtI,IAIf2G,EAAQiC,GAAazM,EAAI6K,EAAO7K,GAChCwK,EAAQiC,GAAazM,EAAI6K,EAAO7K,EAAI6K,EAAO3K,GAC3CsK,EAAQiC,GAAaxM,EAAI4K,EAAO5K,EAAI4K,EAAO9F,GAC3CyF,EAAQiC,GAAaxM,EAAI4K,EAAO5K,GAChCyM,GAAW,EApDnB5C,EAAQ,GAAK,GACbC,EAASD,EAAQ,GACjBkC,EAAgBnB,IAEhBpN,EAAa,QAkDE+M,EAAQiC,GAAazM,EAAIsK,EAASzG,GAAG7D,GAC5CwK,EAAQiC,GAAazM,EAAIsK,EAASzG,GAAG7D,EAAIsK,EAASzG,GAAG3D,GACrDsK,EAAQiC,GAAaxM,EAAIqK,EAASzG,GAAG5D,EAAIqK,EAASzG,GAAGkB,GACrDyF,EAAQiC,GAAaxM,EAAIqK,EAASzG,GAAG5D,GAClB,IAAnBqK,EAASzG,GAAGjF,KACZ8N,GAAW,EACXJ,EAASzI,IAIrB,OAAO6I,CAAQ,EAyCbC,GAAeA,KACZ/K,EAAahC,GAAc,KAAOA,KAAe,GAhKhCgN,MACtB,IAAIC,EAAYzO,OAAO8D,OAAOkH,GACnBnF,KAAKiC,SACL,IACP2G,EAAU7M,EAAI,EACd6M,EAAU1M,MAxRG,IA0Rb0M,EAAU7M,EAAIF,EAAO+M,EAAU3M,EAC/B2M,EAAU1M,OA3RG,GA6RjB0M,EAAU5M,EAAI,EACdqK,EAASwB,KAAKe,GACdtC,EAAYD,EAAS,EAqJjBsC,GAxIeE,MACnB,IAAIC,EAAY,CAAC,GACO,IAApBlC,EAAOtB,UACY,IAAnBsB,EAAOrB,UACPuD,EAAY3O,OAAO8D,OAAOyH,GAC1BoD,EAAU/M,EAAI6K,EAAO7K,EAAI,EAAI6K,EAAO3K,EAAI,EACxC6M,EAAU9M,EAAI4K,EAAO5K,EACrBuK,EAAQsB,KAAKiB,GACblC,EAAOrB,QAAUqB,EAAOpB,SACxB7D,YAAW,KACPiF,EAAOrB,QAAU,CAAC,GACnB,CAACqB,EAAOpB,WACXgB,EAAWD,GACXK,EAAOtB,UAAW,EACtB,EA4HAuD,GA1HoBE,MACpB,IAAID,EAAY,CAAC,EACbE,EAAShJ,KAAKiC,SACdgH,EAAiBjJ,KAAK8B,MAAM9B,KAAKiC,SAAWgE,GAC5C+C,EAAS,MACTF,EAAY3O,OAAO8D,OAAO0H,GAC1BmD,EAAU/M,EAAIsK,EAAS4C,GAAgBlN,EAAI6K,EAAO3K,EAAI,EACtD6M,EAAU9M,EAAIqK,EAAS4C,GAAgBjN,EACvCuK,EAAQsB,KAAKiB,GACbtC,EAAWD,GACf,EAiHAwC,GA5CkBG,MAClB,IAAIC,EAAW,GACf,GAAI5C,EAAQlM,OAAS,EAAG,CAEpB,IAAK,IAAIuF,EAAI,EAAGA,EAAI2G,EAAQlM,OAAQuF,IAC3B2I,GAAe3I,KACM,WAAlB2G,EAAQ3G,GAAGjF,GACP4L,EAAQ3G,GAAG5D,EAAI,IACfuK,EAAQ3G,GAAG5D,GAAKuK,EAAQ3G,GAAG1D,MACvBqK,EAAQ3G,GAAGiF,WAAa0B,EAAQ3G,GAAGkF,aACnCyB,EAAQ3G,GAAGiF,WAAa0B,EAAQ3G,GAAGiF,WAAa,EAEhD0B,EAAQ3G,GAAGiF,WAAa,EAE5BsE,EAAStB,KAAKtB,EAAQ3G,KAGtB2G,EAAQ3G,GAAG5D,EAAIJ,IACf2K,EAAQ3G,GAAG5D,GAAKuK,EAAQ3G,GAAG1D,MAC3BiN,EAAStB,KAAKtB,EAAQ3G,MAKtC4G,EAAW2C,EACf,GAoBAD,GAlBqBE,MACrB,GAAI3C,EAAWpM,OAAS,EAAG,CACvB,IAAK,IAAIuF,EAAI,EAAGA,EAAI6G,EAAWpM,OAAQuF,IAC/B6G,EAAW7G,GAAGyH,MAAQ1L,EAAY,EAClC8K,EAAW7G,GAAGyH,MAAQZ,EAAW7G,GAAGyH,MAAQ1L,EAE5C8K,EAAW2B,OAAOxI,EAAG,GAG7B8G,EAAcD,EAClB,GASA2C,GAvNgBC,MAIhB,OAHIlD,EAAenL,OAASiL,IACxBE,EAAenL,MAAQ,GAEnBmL,EAAevK,KAAKyK,EAASF,EAAenL,OAAO2J,MACvD,IAAK,OACG0B,EAASF,EAAenL,OAAOe,EAAI,EACnCsK,EAASF,EAAenL,OAAOe,EAAIsK,EAASF,EAAenL,OAAOe,EAzO7D,GA4OLoK,EAAevK,KAAKyK,EAASF,EAAenL,OAAO2J,KAAO,QAC1D0B,EAASF,EAAenL,OAAOe,EAAIsK,EAASF,EAAenL,OAAOe,EA7O7D,GA+OT,MACJ,IAAK,QACGsK,EAASF,EAAenL,OAAOe,EAAIsK,EAASF,EAAenL,OAAOiB,EAAIJ,EAAO,EAC7EwK,EAASF,EAAenL,OAAOe,EAAIsK,EAASF,EAAenL,OAAOe,EAlP7D,EAqPLoK,EAAevK,KAAKyK,EAASF,EAAenL,OAAO2J,KAAO,OAMlE0B,EAASF,EAAenL,OAAO6J,WAAawB,EAASF,EAAenL,OAAO8J,aAC3EuB,EAASF,EAAenL,OAAO6J,WAAawB,EAASF,EAAenL,OAAO6J,WAAa,EAExFwB,EAASF,EAAenL,OAAO6J,WAAa,EAEhDsB,EAAenL,QAEf,IAAK,IAAI4E,EAAI,EAAGA,EAAIyG,EAAShM,OAAQuF,IACV,IAAnByG,EAASzG,GAAGjF,KACR0L,EAASzG,GAAG7D,EAAIsK,EAASzG,GAAG3D,EAAI,GAAKoK,EAASzG,GAAG7D,EAAIF,GACrDwK,EAASzG,GAAG7D,EAAIsK,EAASzG,GAAG7D,EAAIsK,EAASzG,GAAG1D,MACxCmK,EAASzG,GAAGiF,WAAawB,EAASzG,GAAGkF,aACrCuB,EAASzG,GAAGiF,WAAawB,EAASzG,GAAGiF,WAAa,EAElDwB,EAASzG,GAAGiF,WAAa,GAG7BwB,EAAS+B,OAAOxI,EAAG,IAI/B0G,EAAYD,GACZD,EAAkBD,EAAe,EAyKjCkD,EAAa,EA6EjB,OAzEApP,EAAAA,EAAAA,YAAU,KACN,MACMqH,EADS1E,EAAU2E,QACFC,WAAW,MAClC,IAAIC,EACJ,OAAQ9E,GACJ,IAAK,OACGkJ,GAAS,GAAKI,EAAU,GACxBvC,EAAUpC,GACVhG,EAAoBgG,EAASA,EAAQ/B,OAAO3E,MAAO0G,EAAQ/B,OAAO1E,QAClE6N,KACAzB,EAAY3F,GA3SC7B,EA4SWgF,EA5SC/E,EA4SU+E,GA5S3BlJ,EA4SO+F,GA3SvB9F,UAAY,MAChBD,EAAIgF,KAAO,iBACXhF,EAAIiF,SAAS,QAAUqF,EAAOpG,EAAa,EAAG7D,EAAO8D,EAAc,EAAG,KA0S1DiC,YAAW,KACP/D,EAAcD,EAAa,EAAE,GAC9B,CAAChC,KAECkK,EAAQ,EACbrM,EAAa,OAEI,IAAZyM,GACLzM,EAAa,OAEjB,MACJ,IAAK,QAzUSoI,EAACrG,EAAKkE,EAAYC,KACpCnE,EAAIC,UAAY,MAChBD,EAAIgF,KAAO,iBACXhF,EAAIiF,SAAS,SAAU,EAAIf,EAAY,EAAIC,EAAa,IAAI,EAuUpDkC,CAAcN,EAASmD,EAAWA,GAClCnJ,EAAoBgG,EAASA,EAAQ/B,OAAO3E,MAAO0G,EAAQ/B,OAAO1E,QAClE,MACJ,IAAK,MACD6I,EAAUpC,GAzUFY,EAAC3G,EAAKkE,EAAYC,KAClCgE,EAAUnI,GACVA,EAAIC,UAAY,MAChBD,EAAIgF,KAAO,iBACXhF,EAAIiF,SAAS,UAAW,EAAIf,EAAY,EAAIC,EAAa,KACzDnE,EAAIgF,KAAO,iBACXhF,EAAIiF,SAAS,UAAY7B,EAAO,GAAKc,EAAY,EAAIC,EAAa,KAClEnE,EAAIiF,SAAS,SAAWR,KAAK8B,MAAOjD,EAAO,KAAO,GAAKY,EAAY,EAAIC,EAAa,KACpFnE,EAAIiF,SAAS,UAAYqF,EAAO,GAAKpG,EAAY,GAAKC,EAAa,KACnEnE,EAAIgF,KAAO,iBACXhF,EAAIiF,SAAS,wBAAyB,EAAIf,EAAY,GAAKC,EAAa,IAAI,EAgUpEwC,CAAYZ,EAASmD,EAAWA,GAChCnJ,EAAoBgG,EAASA,EAAQ/B,OAAO3E,MAAO0G,EAAQ/B,OAAO1E,QAClE,MACJ,IAAK,MACD6I,EAAUpC,GA7VDO,EAACtG,EAAKkE,EAAYC,KACnCnE,EAAIC,UAAY,MAChBD,EAAIgF,KAAO,iBACXhF,EAAIiF,SAAS,YAAa,EAAIf,EAAY,EAAIC,EAAa,KAC3DnE,EAAIgF,KAAO,iBACXhF,EAAIiF,SAAS,UAAY7B,EAAO,GAAKc,EAAY,EAAIC,EAAa,KAClEnE,EAAIiF,SAAS,SAAWR,KAAK8B,MAAMjD,EAAO,KAAO,GAAKY,EAAY,GAAKC,EAAa,KACpFnE,EAAIgF,KAAO,iBACXhF,EAAIiF,SAAS,wBAAyB,EAAIf,EAAY,GAAKC,EAAa,IAAI,EAsVpEmC,CAAaP,EAASmD,EAAWA,GACjCnJ,EAAoBgG,EAASA,EAAQ/B,OAAO3E,MAAO0G,EAAQ/B,OAAO1E,QAClE,MACJ,IAAK,QACDmL,EAAS,GACTpH,EAAS,GACTkH,EAAS,GACTY,EAAc,IACdF,EAAW,IACXiB,IACAZ,EAAU1M,OAAO8D,OAAOmH,IACxBxH,EAAc,GACd8F,EAAUpC,GAhXAI,EAACnG,EAAKkE,EAAYC,KACpCgE,EAAUnI,GACVA,EAAIC,UAAY,UAChBD,EAAIgF,KAAO,iBACXhF,EAAIiF,SAAS,sBAAuB,IAAMf,EAAY,EAAIC,EAAa,IAAI,EA6WnEgC,CAAcJ,EAASmD,EAAWA,GAClCnJ,EAAoBgG,EAASA,EAAQ/B,OAAO3E,MAAO0G,EAAQ/B,OAAO1E,QAClE,MACJ,IAAK,UACDmL,EAAS,GACTpH,EAAS,GACTkH,EAAS,GACTY,EAAc,IACdF,EAAW,IACXiB,IACAZ,EAAU1M,OAAO8D,OAAOmH,IACxBxH,EAAc,GACdpE,EAAa,QA5VF8P,IAAC/N,EAAKkE,EAAYC,EAiWrC,MAAMyC,EAASA,KACXV,EAAmBW,OAAOC,sBAAsBF,EAAO,EAG3D,OADAA,IACO,KACHC,OAAOE,qBAAqBb,EAAiB,CAChD,GACF,CAAC9E,EAAWgB,KAERnD,EAAAA,EAAAA,KAAA,UAAQ+H,IAAK3F,EAAWhC,MAAO,IAAKC,OAAQ,IAC/C2H,aAAeC,GAAMA,EAAEC,iBACvBC,YAAcF,GAAMA,EAAEC,iBACtBE,WAAaH,GAAMA,EAAEC,iBACrBG,cAAgBJ,GAAMA,EAAEC,kBAEhC,CCpzBO,MAAM6G,EAAeA,CAACC,EAAQC,EAAWC,EAAWC,EAAcC,KACrE,OAAQJ,GACJ,IAAK,WACDI,EAAKC,sBAAsBD,EAAKE,mBAChCL,GAAU,GACV,MACJ,IAAK,eACqB,SAAnBG,EAAKjN,UACJiN,EAAKpQ,aAAa,SACM,UAAnBoQ,EAAKjN,WACViN,EAAKpQ,aAAa,QAEtBiQ,GAAU,GACV,MACJ,IAAK,MACDG,EAAKpQ,aAAa,WAClBiQ,GAAU,GACV,MACJ,IAAK,sBACDG,EAAKG,iBAAiBH,EAAKI,cAC3BP,GAAU,GACV,MAEJ,KAAK,EACD,MACJ,QACIA,GAAU,GAElB,EC5BSQ,EAAgBA,CAACC,EAASC,EAAYP,KA+C/C,GAAgB,OAAZM,EACAC,EA9CmB,CACnB,KAAQ,CACJ,WAAY,CACR,OAAU,MACV,QAAW,QACX,UAAY,GAEhB,eAAgB,CACZ,OAAU,eACV,QAAW,IACX,UAAY,GAEhB,WAAa,CAAC,EACd,SAAY,CACR,OAAU,WACV,UAAY,GAEhB,WAAa,CAAC,EACd,MAAS,CACL,OAAU,QACV,QAAW,eACX,UAAY,IAGpB,KAAQ,CACJ,uBAAwB,CACpB,OAAU,sBACV,UAAY,EACZ,UAAY,IAGpB,KAAQ,CACJ,KAAQ,CACJ,OAAU,OACV,QAAW,KACX,UAAY,EACZ,MAAS,mBAEb,MAAS,CACL,OAAU,QACV,UAAY,EACZ,MAAS,0BAOhB,CAsBDA,EArBqB,IACdD,EACK,KAAQ,IACDA,EAAc,KACjB,WAAY,IACLA,EAAc,KAAE,YACnB,UAAaN,EAAKQ,YAEtB,eAAgB,IACTF,EAAc,KAAE,gBACnB,UAAaN,EAAKQ,aAG1B,KAAQ,IACDF,EAAc,KACjB,uBAAwB,IACjBA,EAAc,KAAE,wBACnB,SAAYN,EAAKI,gBAKzC,GCxESK,EAAgB/Q,IAAuF,IAAtF,kBAAEwQ,EAAiB,qBAAED,EAAoB,aAAEF,EAAY,SAAEW,EAAQ,YAAEC,GAAajR,EAC1G,MAAOkR,EAAaC,IAAkB7Q,EAAAA,EAAAA,UAAS8Q,gBAAgBJ,KACxDK,EAAcC,IAAmBhR,EAAAA,EAAAA,UAAS,KAC1CiR,EAAQC,IAAalR,EAAAA,EAAAA,UAAS,GA0C/BmR,GACFrQ,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CACKN,OAAOC,KAAKoQ,GAAa1P,KAAKkQ,IAC3BtQ,EAAAA,EAAAA,MAAA,OAAeQ,MAAO,CAAE+P,QAAS,OAAQC,cAAe,MAAOtQ,MAAO,OAAQuQ,WAAY,OAAQ1Q,SAAA,EAC9FD,EAAAA,EAAAA,KAAA,OAAKU,MAAO,CAAEN,MAAO,OAAQC,OAAO,OAAQoQ,QAAS,OAAQG,eAAgB,QAASC,WAAY,SAAUC,UAAW,UAAW7Q,UAACC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAIuQ,EAAI,SAC1IR,EAAYQ,GAAK5Q,KAAKU,KAAI,CAACyQ,EAASvQ,KACjCR,EAAAA,EAAAA,KAAA,UAEIU,MAAO,CAAEN,MAAO,OAAQC,OAAO,OAAQ2Q,OAAQ,qBAC/CC,cAAgBhJ,GAdlBiJ,EAACV,EAAKhQ,KACxBwP,EAAYQ,GAAK5Q,KAAKgO,OAAOpN,EAAO,GACpCyP,EAAeD,GACfM,EAAUD,EAAS,EAAE,EAWqBa,CAAcV,EAAKhQ,GACzCK,QAASA,IAhCXsQ,EAACX,EAAKhQ,KACxB4P,EAAgB,oBACG,IAAIgB,SAAQ,CAACC,EAASC,KACrCC,SAASC,iBAAiB,WAAYvJ,GAAMoJ,EAAQpJ,EAAEuI,OACtDrJ,YAAW,KACPoK,SAASE,oBAAoB,WAAYxJ,GAAMoJ,EAAQpJ,EAAEuI,OACzDc,EAAO,UAAU,GAClB,IAAM,IAEFI,MAAMC,IACb3B,EAAYQ,GAAK5Q,KAAKY,GAASmR,EAC/B1B,EAAeD,GACfI,EAAgB,GAAG,IACpBwB,OAAOC,IACNzB,EAAgByB,EAAM,GACxB,EAiBiCV,CAAcX,EAAKhQ,GAAOP,SAC3C8Q,GAJOvQ,MAMbR,EAAAA,EAAAA,KAAA,OAAKU,MAAO,CAAE+P,QAAS,OAAQC,cAAe,UAAWzQ,SACpD+P,EAAYQ,GAAK5Q,KAAKC,OAAS,IAC5BG,EAAAA,EAAAA,KAAA,UAAQa,QAASA,IAtDlB2P,KACnBJ,EAAgB,oBACG,IAAIgB,SAAQ,CAACC,EAASC,KACrCC,SAASC,iBAAiB,WAAYvJ,GAAMoJ,EAAQpJ,EAAEuI,OACtDrJ,YAAW,KACPoK,SAASE,oBAAoB,WAAYxJ,GAAMoJ,EAAQpJ,EAAEuI,OACzDc,EAAO,UAAU,GAClB,IAAM,IAEFI,MAAMC,IACb3B,EAAYQ,GAAK5Q,KAAKoQ,EAAYQ,GAAK5Q,KAAKC,QAAU8R,EACtD1B,EAAeD,GACfI,EAAgB,GAAG,IACpBwB,OAAOC,IACNzB,EAAgByB,EAAM,GACxB,EAuCyCC,CAActB,GAAKvQ,SAAC,UAZ7CuQ,KAgBbL,KAGH4B,EAAU,CACZC,QAASA,KACLjC,EAAYC,GACZX,GAAqB,GACrBF,EAAa,KAAK,EAEtB8C,MAAOA,KACHhC,EAAeH,GACfQ,EAAUD,EAAS,EAAE,EAEzB6B,OAAQA,KACJjC,EAAeH,GACfT,GAAqB,GACrBF,EAAa,KAAK,GAQ1B,OALA1P,EAAAA,EAAAA,YAAU,KACF6P,GACAH,EAAa,CAAEgD,MAjFT,WAiFuB5B,KAAMA,EAAMwB,QAASA,GACtD,GACD,CAACzC,EAAmBU,EAAaG,EAAcE,KAC3CrQ,EAAAA,EAAAA,KAAAoS,EAAAA,SAAA,GAAK,ECvED,SAASC,EAAOC,GAC7B,MAAMpQ,EAAaoQ,EAAMpQ,WACnB8M,EAASsD,EAAMtD,OACfC,EAAYqD,EAAMrD,UAClBC,EAAYoD,EAAMpD,UAClBC,EAAemD,EAAMnD,aACrBO,EAAU4C,EAAM5C,QAChBC,EAAa2C,EAAM3C,WACnB4C,EAAcD,EAAMC,YAEpBC,GAAkBnQ,EAAAA,EAAAA,WACjByN,EAAUC,IAAe3Q,EAAAA,EAAAA,UAAS,CACvCU,GAAI,CAAEF,KAAM,CAAC,IAAK,IAAK,WAAY6S,QAAQ,GAC3C/S,KAAM,CAAEE,KAAM,CAAC,IAAK,IAAK,aAAc6S,QAAQ,GAC/C/N,KAAM,CAAE9E,KAAM,CAAC,IAAK,IAAK,aAAc6S,QAAQ,GAC/C9N,MAAO,CAAE/E,KAAM,CAAC,IAAK,IAAK,cAAe6S,QAAQ,GACjD1S,IAAK,CAAEH,KAAM,CAAC,KAAM6S,QAAQ,GAC5BC,IAAK,CAAE9S,KAAM,CAAC,KAAM6S,QAAQ,GAC5BhO,MAAO,CAAE7E,KAAM,CAAC,IAAK,IAAK,SAAU6S,QAAQ,GAC5CE,MAAO,CAAE/S,KAAM,CAAC,UAAW6S,QAAQ,KAE/B1T,ECrCO,SAAkBmD,EAAY4N,GAE3C,IAAK8C,EAASC,IAAczT,EAAAA,EAAAA,UAAS,CACnCU,IAAI,EACJJ,MAAM,EACNgF,MAAM,EACNC,OAAO,EACP5E,KAAK,EACL2S,KAAK,EACLjO,OAAO,EACPkO,OAAO,IAET,MAAMG,GAAcC,EAAAA,EAAAA,cAClB,CAACvC,EAAKwC,KACJ,MAAMC,EAAWtT,OAAOC,KAAKkQ,GAC7B,IAAK,IAAI1K,EAAI,EAAGA,EAAI6N,EAASpT,OAAQuF,IAAK,CACxC,IAAI8N,EAAepD,EAASmD,EAAS7N,IAAIxF,KACzC,IAAK,IAAI4M,EAAI,EAAGA,EAAI0G,EAAarT,OAAQ2M,IACnC0G,EAAa1G,KAAOgE,GACtBqC,GAAYM,IAAC,IAAWA,EAAG,CAACF,EAAS7N,IAAK4N,KAGhD,IAEF,CAAClD,IAGGsD,GAAiBL,EAAAA,EAAAA,cACpBM,IACCP,EAAYO,EAAM7C,KAAK,EAAK,GAE9B,CAACsC,IAEGQ,GAAmBP,EAAAA,EAAAA,cACtBM,IACCP,EAAYO,EAAM7C,KAAK,EAAM,GAE/B,CAACsC,IAuBH,OApBArT,EAAAA,EAAAA,YAAU,KACR8R,SAASC,iBAAiB,UAAW4B,GAC9B,KACL7B,SAASE,oBAAoB,UAAW2B,EAAe,IAExD,CAACA,KAEJ3T,EAAAA,EAAAA,YAAU,KACR8R,SAASC,iBAAiB,QAAS8B,GAC5B,KACL/B,SAASE,oBAAoB,QAAS6B,EAAiB,IAExD,CAACA,KAEJ7T,EAAAA,EAAAA,YAAU,KACHyC,GACH2Q,EAAW,IAAKD,EAASnO,OAAO,GAClC,GACC,CAACvC,IAEG0Q,CACT,CDxBmBW,CAASrR,EAAY4N,IAC/B3N,EAAWnD,IAAgBI,EAAAA,EAAAA,UAAS,UACpCwQ,EAAY3Q,IAAiBG,EAAAA,EAAAA,UAAS,SACtCoU,EAAYC,IAAiBrU,EAAAA,EAAAA,UAAS,IACtCsU,EAAgBC,IAAqBvU,EAAAA,EAAAA,WAAS,IAC9CoQ,EAAcD,IAAmBnQ,EAAAA,EAAAA,WAAS,IAC1CkQ,EAAmBD,IAAwBjQ,EAAAA,EAAAA,WAAS,GACrDwU,EAAqBA,CAACpD,EAAKwC,EAAOa,KACtCtC,SAASuC,cAAc,IAAIC,cAAcf,EAAO,CAAExC,IAAKV,EAASU,GAAK5Q,KAAK,GAAIiU,OAAQA,IAAW,EAG7FG,EAAmBA,CAACX,EAAO7F,KACZ,eAAf6F,EAAMY,KACRlV,EAASyO,IAAU,EAEG,aAAf6F,EAAMY,MAGS,gBAAfZ,EAAMY,KAFblV,EAASyO,IAAU,EAKG,cAAf6F,EAAMY,MACbtU,OAAOuU,OAAOb,EAAMc,SAASC,SAASpS,IACpC,IAAIpC,EAAO,GACPyU,EAAWrS,EAAEsS,QAAbD,EAAyBrS,EAAEuS,QAC3BC,EAAgB,CAClB1U,GAAIyR,SAASkD,eAAe,kBAAkBC,wBAC9ChV,KAAM6R,SAASkD,eAAe,oBAAoBC,wBAClDhQ,KAAM6M,SAASkD,eAAe,oBAAoBC,wBAClD/P,MAAO4M,SAASkD,eAAe,qBAAqBC,wBACpD3U,IAAKwR,SAASkD,eAAe,iBAAiBC,wBAC9ChC,IAAKnB,SAASkD,eAAe,iBAAiBC,yBAEhD/U,OAAOC,KAAK4U,GAAeJ,SAAS5D,IAC9B6D,GAASG,EAAchE,GAAKjP,GAAK8S,GAASG,EAAchE,GAAKjP,EAAIiT,EAAchE,GAAKpQ,OAASiU,GAASG,EAAchE,GAAKhP,GAAK6S,GAASG,EAAchE,GAAKhP,EAAIgT,EAAchE,GAAKnQ,QACnLT,EAAKyN,KAAKmD,EACZ,IAEF7Q,OAAOC,KAAKkQ,GAAUsE,SAAS5D,IACzB5Q,EAAK+U,SAASnE,GAChBzR,EAASyR,IAAO,EAEhBzR,EAASyR,IAAO,CAClB,GACA,GAEN,EA4DF,OApCA/Q,EAAAA,EAAAA,YAAU,KAENkU,EADgB,SAAdxR,EAIJ,GACC,CAACA,KAEJ1C,EAAAA,EAAAA,YAAU,KACLV,EAAS4T,QACV1T,EAAc,QACdD,EAAa,SACf,GACA,CAACD,EAAS4T,SAEZlT,EAAAA,EAAAA,YAAU,KASRsP,EAAaC,EAAQC,EAAWC,EAAWC,EAR9B,CACXhN,UAAWA,EACXnD,aAAcA,EACdwQ,aAAcA,EACdD,gBAAiBA,EACjBD,kBAAmBA,EACnBD,qBAAsBA,GAEsC,GAC7D,CAACL,KAEJvP,EAAAA,EAAAA,YAAU,KAMRgQ,EAAcC,EAASC,EALV,CACXxN,UAAWA,EACXqN,aAAcA,EACdI,WAAYA,GAE0B,GACvC,CAACzN,EAAWyN,EAAYJ,KAGzBtP,EAAAA,EAAAA,MAAA,OAAKC,GAAG,kBAAiBF,SAAA,EACvBD,EAAAA,EAAAA,KAAA,OACEG,GAAG,wBACHO,MAAO,CAAEkU,UAAW,SAASpB,MAC7BzL,IAAKyK,EACLvB,cAAgBhJ,GA/DI4M,EAACxB,EAAO7F,KAChC,IAAIsH,EAAU,CAAC,EAEf,GADAzB,EAAMnL,iBACS,WAAXsF,EACFsH,EAAU,CACR,KAAQ,CAAE9F,OAAQA,KAAQO,GAAgB,EAAM,SAE7C,GAAe,WAAX/B,GACU,SAAfoC,EAAuB,CACzB,IAAImF,EAA0B,SAAd5S,EAAuB,QAAU,OACjD2S,EAAU,CACR,aAAc,CAAE9F,OAAQA,KAAQhQ,EAAa+V,EAAU,GACvD,WAAY,CAAE/F,OAAQA,KAAQhQ,EAAa,UAAU,GAEzD,CAEFuT,EAAYyC,UACZzC,EAAY0C,YAAY5B,EAAMiB,QAASjB,EAAMkB,SAC7ChC,EAAY2C,WAAWJ,EAAQ,EA6CLD,CAAkB5M,EAAG,UAAUhI,SAErC,SAAf2P,GACC5P,EAAAA,EAAAA,KAACnB,EAAQ,CAACE,SAAUA,EAAUE,cAAeA,EAAeD,aAAcA,EAAcwU,WAAYA,IACrF,UAAf5D,GACE5P,EAAAA,EAAAA,KAACmV,EAAK,CAACpW,SAAUA,EAAUmD,WAAYA,EAAYC,UAAWA,EAAWnD,aAAcA,EAAcwU,WAAYA,IAElG,aAAf5D,GACE5P,EAAAA,EAAAA,KAACiC,EAAQ,CAAClD,SAAUA,EAAUmD,WAAYA,EAAYC,UAAWA,EAAWnD,aAAcA,EAAcwU,WAAYA,IAErG,mBAAf5D,GACE5P,EAAAA,EAAAA,KAACoL,EAAa,CAACrM,SAAUA,EAAUmD,WAAYA,EAAYC,UAAWA,EAAWnD,aAAcA,EAAcwU,WAAYA,KAEzHxT,EAAAA,EAAAA,KAAAoS,EAAAA,SAAA,MAGT5C,IACCtP,EAAAA,EAAAA,MAAAkS,EAAAA,SAAA,CAAAnS,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAKC,GAAG,qBAAoBF,SAAA,EAC1BD,EAAAA,EAAAA,KAAA,OACEG,GAAG,qBACHiV,UAAU,+BACVvU,QAASA,KAAU2S,EAAa,GAAIC,EAAcD,EAAa,GAAI,EAAGvT,UAEtED,EAAAA,EAAAA,KAACqV,EAAAA,IAAQ,OAEXrV,EAAAA,EAAAA,KAAA,OACEG,GAAG,sBACHiV,UAAU,+BACVvU,QAASA,KAAU2S,EAAa,IAAMC,EAAcD,EAAa,GAAI,EAAGvT,UAExED,EAAAA,EAAAA,KAACsV,EAAAA,IAAS,UAGdpV,EAAAA,EAAAA,MAAA,OAAKC,GAAG,sBAAqBF,SAAA,EAC3BD,EAAAA,EAAAA,KAAA,OACEG,GAAG,oBACHiV,UAAU,+BACVvU,QAASA,KAAQ5B,EAAc,QAASD,EAAa,QAAQ,EAAIiB,UAEjED,EAAAA,EAAAA,KAACuV,EAAAA,IAAW,OAEdvV,EAAAA,EAAAA,KAAA,OACEG,GAAG,mBACHiV,UAAU,+BACVvU,QAASA,KACP+S,EAAmB,QAAS,WAAW,GACvCzM,YAAW,IAAMyM,EAAmB,QAAS,SAAS,IAAQ,GAAG,EACjE3T,SAEDyT,GAAiB1T,EAAAA,EAAAA,KAACwV,EAAAA,IAAc,KAAMxV,EAAAA,EAAAA,KAACyV,EAAAA,IAAW,UAGvDvV,EAAAA,EAAAA,MAAA,OAAKC,GAAG,sBAAqBF,SAAA,EAC3BD,EAAAA,EAAAA,KAAA,OACEG,GAAG,mBACHiV,UAAWrW,EAAS2F,KAAO,8BAAgC,+BAC3DgR,YAAaA,IAAM9B,EAAmB,OAAQ,WAAW,GACzD+B,UAAWA,IAAM/B,EAAmB,OAAQ,SAAS,GACrD5L,aAAeC,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,OAAO,EACpEE,YAAcF,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,OAAO,EACnEG,WAAaH,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,OAAO,EAClEI,cAAgBJ,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,OAAO,EAAEhI,UAEvED,EAAAA,EAAAA,KAAC4V,EAAAA,IAAW,OAEd1V,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,OACEG,GAAG,iBACHiV,UAAWrW,EAASe,GAAK,8BAAgC,+BACzD4V,YAAaA,IAAM9B,EAAmB,KAAM,WAAW,GACvD+B,UAAWA,IAAM/B,EAAmB,KAAM,SAAS,GACnD5L,aAAeC,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,KAAK,EAClEE,YAAcF,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,KAAK,EACjEG,WAAaH,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,KAAK,EAChEI,cAAgBJ,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,KAAK,EAAEhI,UAErED,EAAAA,EAAAA,KAAC6V,EAAAA,IAAS,OAEZ7V,EAAAA,EAAAA,KAAA,OACEG,GAAG,mBACHiV,UAAWrW,EAASW,KAAO,8BAAgC,+BAC3DgW,YAAaA,IAAM9B,EAAmB,OAAQ,WAAW,GACzD+B,UAAWA,IAAM/B,EAAmB,OAAQ,SAAS,GACrD5L,aAAeC,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,OAAO,EACpEE,YAAcF,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,OAAO,EACnEG,WAAaH,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,OAAO,EAClEI,cAAgBJ,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,OAAO,EAAEhI,UAEvED,EAAAA,EAAAA,KAAC8V,EAAAA,IAAW,UAGhB9V,EAAAA,EAAAA,KAAA,OACEG,GAAG,oBACHiV,UAAWrW,EAAS4F,MAAQ,8BAAgC,+BAC5D+Q,YAAaA,IAAM9B,EAAmB,QAAS,WAAW,GAC1D+B,UAAWA,IAAM/B,EAAmB,QAAS,SAAS,GACtD5L,aAAeC,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,QAAQ,EACrEE,YAAcF,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,QAAQ,EACpEG,WAAaH,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,QAAQ,EACnEI,cAAgBJ,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,QAAQ,EAAEhI,UAExED,EAAAA,EAAAA,KAAC+V,EAAAA,IAAY,UAGjB7V,EAAAA,EAAAA,MAAA,OAAKC,GAAG,qBAAoBF,SAAA,EAC1BD,EAAAA,EAAAA,KAAA,OAAKG,GAAG,gBACNiV,UAAWrW,EAASgB,IAAM,8BAAgC,+BAC1D2V,YAAaA,IAAM9B,EAAmB,MAAO,WAAW,GACxD+B,UAAWA,IAAM/B,EAAmB,MAAO,SAAS,GACpD5L,aAAeC,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,MAAM,EACnEE,YAAcF,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,MAAM,EAClEG,WAAaH,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,MAAM,EACjEI,cAAgBJ,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,MAAM,EAAEhI,SACvE,OACDD,EAAAA,EAAAA,KAAA,OAAKG,GAAG,gBACNiV,UAAWrW,EAAS2T,IAAM,8BAAgC,+BAC1DgD,YAAaA,IAAM9B,EAAmB,MAAO,WAAW,GACxD+B,UAAWA,IAAM/B,EAAmB,MAAO,SAAS,GACpD5L,aAAeC,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,MAAM,EACnEE,YAAcF,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,MAAM,EAClEG,WAAaH,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,MAAM,EACjEI,cAAgBJ,IAAOA,EAAEC,iBAAiB8L,EAAiB/L,EAAG,MAAM,EAAEhI,SACvE,aAIPD,EAAAA,EAAAA,KAAC6P,EAAa,CACZP,kBAAmBA,EACnBD,qBAAsBA,EACtBF,aAAcA,EACdW,SAAUA,EACVC,YAAaA,MAIrB,C","sources":["Apps/Arcade/Components/MainMenu.js","Apps/Arcade/Handlers/handleCanvasBorders.js","Apps/Arcade/Games/Breakout/Breakout.js","Apps/Arcade/Games/Snake/Snake.js","Apps/Arcade/Games/Space Invaders/SpaceInvaders.js","Apps/Arcade/Handlers/handleAction.js","Apps/Arcade/Handlers/handleTopMenu.js","Apps/Arcade/Components/KeybindDialog.jsx","Apps/Arcade/index.jsx","Apps/Arcade/Controls/Keyboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport SnakeSplash from \"../Games/Snake/SnakeSplash.png\";\r\nimport BreakoutSplash from \"../Games/Breakout/BreakoutSplash.png\";\r\nimport SpaceInvadersSplash from \"../Games/Space Invaders/SpaceInvadersSplash.png\";\r\n\r\nexport default function MainMenu({ controls, setGameState, setGameChoice }) {\r\n    const [currentSelection, setCurrentSelection] = useState(0);\r\n    const gamelist = {\r\n        \"Snake\": SnakeSplash,\r\n        \"Breakout\": BreakoutSplash,\r\n        \"Space Invaders\": SpaceInvadersSplash\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(controls.down && currentSelection < Object.keys(gamelist).length - 1) {\r\n            setCurrentSelection(currentSelection + 1);\r\n        }else if(controls.up && currentSelection > 0) {\r\n            setCurrentSelection(currentSelection - 1);\r\n        }else if(controls.one) {\r\n            setGameState(\"Start\");\r\n            setGameChoice(Object.keys(gamelist)[currentSelection]);\r\n        }\r\n    }, [controls]);\r\n\r\n    return (\r\n        <div>\r\n        <object id=\"arcadeMainMenu\" width={600} height={400}>\r\n            <div id=\"arcadeSplashScreen\">\r\n                {Object.keys(gamelist).map((name, index) => (\r\n                    index === currentSelection &&\r\n                    <img key={index} src={gamelist[name]}></img>\r\n                ))}\r\n            </div>\r\n            <div id=\"arcadeGameList\">\r\n                {Object.keys(gamelist).map((name, index) => (\r\n                    <div \r\n                    key={index}\r\n                    style={index === currentSelection ? {background: \"deepskyblue\", color: \"black\"} : {background: \"black\", color: \"white\"}}\r\n                    onClick={() => setCurrentSelection(index)}>\r\n                        {name}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </object>\r\n        </div>\r\n        );\r\n}","export const handleCanvasBorders = (ctx, width, height) => {\r\n    ctx.fillStyle = \"silver\";\r\n    ctx.fillRect(0, 0, width, 1);\r\n    ctx.fillRect(0, 0, 1, height);\r\n    ctx.fillRect(width - 1, 0, 1, height);\r\n    ctx.fillRect(0, height - 1, width, 1);\r\n} ","import React, { useState, useRef, useEffect } from \"react\";\r\nimport LevelsJSON from \"./Breakout_Maps.json\";\r\nimport { handleCanvasBorders } from \"../../Handlers/handleCanvasBorders.js\";\r\n\r\nconst frequency = 60; //Hertz\r\nconst frameRate = 1000 / frequency; // frames / milisecond\r\nconst rows = 30;\r\nconst cols = 30;\r\nconst defaultPlayerBar = {\r\n  x: 12,\r\n  y: 27,\r\n  w: 6,\r\n  speed: 0.25,\r\n};\r\nconst defaultBall = {\r\n  x: 15,\r\n  y: 50,\r\n  r: 0.5,\r\n  dirX: 0.25,\r\n  dirY: -0.25,\r\n};\r\nconst defaultFirework = {\r\n  x: 15,\r\n  y: 52,\r\n  r: 0.25,\r\n  dirX: 0,\r\n  dirY: -0.25,\r\n  t: -5,\r\n  color: \"\",\r\n};\r\nexport default function Breakout({ controls, isSelected, gameState, setGameState }) {\r\n  const canvasRef = useRef(null);\r\n  const [Maps, setMaps] = useState(JSON.parse(JSON.stringify(LevelsJSON))); //Only way to deep copy nested objects without external dependency\r\n  const [gameLevel, setGameLevel] = useState(0);\r\n  const [currLevel, setCurrLevel] = useState(Maps[gameLevel]);\r\n  const [levelHealth, setLevelHealth] = useState(currLevel.Bars);\r\n  const [frameCount, setFrameCount] = useState(0);\r\n  const [winFrameCount, setWinFrameCount] = useState(0);\r\n  let [playerBar, setPlayerBar] = useState(Object.create(defaultPlayerBar));\r\n  let [ball, setBall] = useState(Object.create(defaultBall));\r\n  let [firework1] = useState(Object.create(defaultFirework));\r\n  firework1.color = \"blue\";\r\n  let [firework2] = useState(Object.create(defaultFirework));\r\n  firework2.color = \"green\";\r\n  let [firework3] = useState(Object.create(defaultFirework));\r\n  firework3.color = \"red\";\r\n  let [firework4] = useState(Object.create(defaultFirework));\r\n  firework4.color = \"yellow\";\r\n  let [firework5] = useState(Object.create(defaultFirework));\r\n  firework5.color = \"cyan\";\r\n  let [firework6] = useState(Object.create(defaultFirework));\r\n  firework6.color = \"magenta\";\r\n  let [firework7] = useState(Object.create(defaultFirework));\r\n  firework7.color = \"white\";\r\n  let [score, setScore] = useState(0);\r\n  let [time, setTime] = useState(0);\r\n  const [startTime, setStartTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (controls.pause) {\r\n      if (gameState === \"Play\") {\r\n        setGameState(\"Pause\");\r\n      } else if (gameState === \"Pause\") {\r\n        setGameState(\"Play\");\r\n      } else if (\r\n        gameState === \"Win\" ||\r\n        gameState === \"End\" ||\r\n        gameState === \"Start\"\r\n      ) {\r\n        setGameState(\"Restart\");\r\n      }\r\n    }\r\n  }, [controls]);\r\n\r\n  useEffect(() => {\r\n    if (gameState === \"Play\" || \"Win\") {\r\n      if (\r\n        controls.left &&\r\n        !controls.right &&\r\n        playerBar.x + playerBar.w > playerBar.w\r\n      ) {\r\n        playerBar.x = playerBar.x - playerBar.speed;\r\n      }\r\n      if (\r\n        controls.right &&\r\n        !controls.left &&\r\n        playerBar.x + playerBar.w < cols\r\n      ) {\r\n        playerBar.x = playerBar.x + playerBar.speed;\r\n      }\r\n    }\r\n  }, [controls, frameCount]);\r\n\r\n  useEffect(() => {\r\n    if (gameState === \"Restart\") {\r\n      setTime(0);\r\n    } else if (gameState === \"Play\") {\r\n      setStartTime(performance.now());\r\n    } else if (gameState === \"Pause\" ||\r\n      gameState === \"End\" ||\r\n      gameState === \"Win\" ||\r\n      gameState === \"LevelUp\") {\r\n      setTime(time + performance.now() - startTime);\r\n      time += performance.now() - startTime;\r\n    }\r\n  }, [gameState]);\r\n\r\n  const clearDraws = (ctx) => {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  };\r\n  const drawStartGame = (ctx, blockWidth, blockHeight) => {\r\n    clearDraws(ctx);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"24px monospace\";\r\n    ctx.fillText(\"Press Play to Start\", 2.5 * blockWidth, 15 * blockHeight, 500);\r\n  };\r\n\r\n  const drawGameOver = (ctx, blockWidth, blockHeight) => {\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    ctx.fillText(\"Game Over\", 5 * blockWidth, 9 * blockHeight, 500);\r\n    ctx.font = \"16px monospace\";\r\n    ctx.fillText(\"Score: \" + score, 11 * blockWidth, 13 * blockHeight, 500);\r\n    ctx.fillText(\"Time: \" + Math.floor(time / 1000), 11 * blockWidth, 17 * blockHeight, 500);\r\n    ctx.fillText(\"Level: \" + (gameLevel+1), 11 * blockWidth, 21 * blockHeight, 500);\r\n    ctx.font = \"12px monospace\";\r\n    ctx.fillText(\"Press Play to Restart\", 8 * blockWidth, 26 * blockHeight, 500);\r\n  };\r\n  const drawPauseGame = (ctx, blockWidth, blockHeight) => {\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    ctx.fillText(\"Paused\", 8 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n  const handleFireworks = (ctx, blockWidth, blockHeight) => {\r\n    let currFirework;\r\n    for (let i = 0; i <= 6; i++) {\r\n      switch (i) {\r\n        case 0:\r\n          currFirework = firework1;\r\n          break;\r\n        case 1:\r\n          currFirework = firework2;\r\n          break;\r\n        case 2:\r\n          currFirework = firework3;\r\n          break;\r\n        case 3:\r\n          currFirework = firework4;\r\n          break;\r\n        case 4:\r\n          currFirework = firework5;\r\n          break;\r\n        case 5:\r\n          currFirework = firework6;\r\n          break;\r\n        case 6:\r\n          currFirework = firework7;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      if (currFirework.t <= -5) {\r\n        currFirework.t = Math.floor(Math.random() * 4) + 1;\r\n        currFirework.x = playerBar.x + playerBar.w / 2;\r\n        currFirework.y = 52;\r\n        currFirework.dirX = (Math.random() - 0.5) / 8;\r\n        currFirework.dirY = -0.25;\r\n      } else if (currFirework.t > 3) {\r\n        currFirework.t = currFirework.t - 1 / frequency;\r\n      } else if (currFirework.t > 0) {\r\n        currFirework.x = currFirework.x + currFirework.dirX;\r\n        currFirework.y = currFirework.y + currFirework.dirY;\r\n        checkColision(currFirework);\r\n        drawBall(ctx, blockWidth, blockHeight, currFirework);\r\n        currFirework.t = currFirework.t - 1 / frequency;\r\n      } else if (currFirework.t > -5) {\r\n        drawFirework(ctx, blockWidth, blockHeight, currFirework);\r\n        currFirework.t = currFirework.t - 1 / frequency;\r\n      }\r\n    }\r\n  };\r\n  const drawFirework = (ctx, blockWidth, blockHeight, currBall) => {\r\n    for (let i = 0; i < 12; i++) {\r\n      ctx.fillStyle = currBall.color;\r\n      ctx.scale(1, 0.5);\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        currBall.x * blockWidth +\r\n        Math.cos(((2 * Math.PI) / 12) * i) * currBall.t * 2 * blockWidth,\r\n        currBall.y * blockHeight +\r\n        Math.sin(((2 * Math.PI) / 12) * i) * 2 * currBall.t * 2 * blockHeight,\r\n        (currBall.r / 1) * blockWidth,\r\n        0,\r\n        Math.PI * 2,\r\n      );\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      ctx.scale(1, 2);\r\n    }\r\n  };\r\n  const drawWinGame = (ctx, blockWidth, blockHeight) => {\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    ctx.fillText(\"You Win\", 7 * blockWidth, 9 * blockHeight, 500);\r\n    ctx.font = \"16px monospace\";\r\n    ctx.fillText(\"Score: \" + score, 11 * blockWidth, 15 * blockHeight, 500);\r\n    ctx.fillText(\"Time: \" + Math.floor(time/1000), 11 * blockWidth, 19 * blockHeight, 500);\r\n    ctx.font = \"12px monospace\";\r\n    ctx.fillText(\"Press Play to Restart\", 8 * blockWidth, 26 * blockHeight, 500);\r\n  };\r\n\r\n  const drawLevelUp = (ctx, blockWidth, blockHeight, t) => {\r\n    clearDraws(ctx);\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    switch (t) {\r\n      case 4:\r\n        ctx.fillText(\"Next Level\", 5 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      case 3:\r\n        ctx.fillText(\"3 sec\", 9 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      case 2:\r\n        ctx.fillText(\"2 sec\", 9 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      case 1:\r\n        ctx.fillText(\"1 sec\", 9 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      default:\r\n        ctx.fillText(\"Next Level\", 5 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const drawPlayerBar = (ctx, blockWidth, blockHeight) => {\r\n    let newX, newY;\r\n    newX = playerBar.x;\r\n    newY = playerBar.y;\r\n    ctx.fillStyle = \"cyan\";\r\n    ctx.fillRect(\r\n      newX * blockWidth,\r\n      newY * blockHeight,\r\n      playerBar.w * blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n  const drawHitbar = (ctx, blockWidth, blockHeight, obj) => {\r\n    let color;\r\n    switch (obj.h) {\r\n      case 3:\r\n        color = \"green\";\r\n        break;\r\n      case 2:\r\n        color = \"yellow\";\r\n        break;\r\n      case 1:\r\n        color = \"orange\";\r\n        break;\r\n      default:\r\n        color = \"blue\";\r\n        break;\r\n    }\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(\r\n      obj.x * blockWidth,\r\n      obj.y * blockHeight,\r\n      obj.w * blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n  const drawLevel = (ctx, blockWidth, blockHeight) => {\r\n    for (let i = 0; i < currLevel.Bars; i++) {\r\n      if (currLevel.Matrix[i].h > 0)\r\n        drawHitbar(ctx, blockWidth, blockHeight, currLevel.Matrix[i]);\r\n    }\r\n  };\r\n  const barHit = (bar) => {\r\n    if (bar.h - 1 >= 0) {\r\n      bar.h = bar.h - 1;\r\n      score = score + bar.s;\r\n      setScore(score);\r\n    }\r\n    if (bar.h === 0) {\r\n      setLevelHealth(levelHealth - 1);\r\n      if (levelHealth - 1 === 0) {\r\n        setGameState(\"LevelUp\");\r\n      }\r\n    }\r\n  };\r\n  //colisions against corners count as double damage\r\n  const checkColision = (currBall) => {\r\n    if (currBall.x === 0 || currBall.x === cols) {\r\n      currBall.dirX = -currBall.dirX;\r\n    }\r\n    if (currBall.y === 0) {\r\n      currBall.dirY = -currBall.dirY;\r\n    } else if (currBall.y === rows * 2) {\r\n      setGameState(\"End\");\r\n    }\r\n    if (currBall.y + currBall.r === playerBar.y * 2) {\r\n      if (\r\n        currBall.x >= playerBar.x &&\r\n        currBall.x <= playerBar.x + playerBar.w\r\n      ) {\r\n        currBall.dirY = -currBall.dirY;\r\n      }\r\n    }\r\n    let bar;\r\n    for (let i = 0; i < currLevel.Bars; i++) {\r\n      bar = currLevel.Matrix[i];\r\n      if (bar.h > 0) {\r\n        //compare boundaries\r\n        if (\r\n          currBall.x + currBall.r >= bar.x &&\r\n          currBall.x - currBall.r <= bar.x + bar.w &&\r\n          currBall.y + currBall.r >= bar.y * 2 &&\r\n          currBall.y - currBall.r <= (bar.y + 1) * 2\r\n        ) {\r\n          //horizontal colision\r\n          if (\r\n            currBall.x + currBall.r > bar.x &&\r\n            currBall.x - currBall.r < bar.x + bar.w\r\n          ) {\r\n            currBall.dirY = -currBall.dirY;\r\n            barHit(bar);\r\n          }\r\n          //vertical colision\r\n          if (\r\n            currBall.y + currBall.r > bar.y * 2 &&\r\n            currBall.y - currBall.r < (bar.y + 1) * 2\r\n          ) {\r\n            currBall.dirX = -currBall.dirX;\r\n            barHit(bar);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  // for some reason, arc is coming out as ellipse instead of simple sphere\r\n  // rescaling on the Y axis used as fix, all values for ball on this axis must be doubled\r\n  const drawBall = (ctx, blockWidth, blockHeight, currBall) => {\r\n    ctx.fillStyle = \"#FFFFFF\";\r\n    ctx.scale(1, 0.5);\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      currBall.x * blockWidth,\r\n      currBall.y * blockHeight,\r\n      currBall.r * blockWidth,\r\n      0,\r\n      Math.PI * 2,\r\n    );\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    ctx.scale(1, 2);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    let blockWidth = context.canvas.width / cols;\r\n    let blockHeight = context.canvas.height / rows;\r\n    let animationFrameId;\r\n    switch (gameState) {\r\n      case \"Start\":\r\n        setMaps(JSON.parse(JSON.stringify(LevelsJSON)));\r\n        setGameLevel(0);\r\n        setCurrLevel(Maps[gameLevel]);\r\n        setLevelHealth(currLevel.Bars);\r\n        setBall(Object.create(defaultBall));\r\n        setPlayerBar(Object.create(defaultPlayerBar));\r\n        setScore(0);\r\n        setFrameCount(1);\r\n        clearDraws(context);\r\n        drawStartGame(context, blockWidth, blockHeight);\r\n        handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n        break;\r\n      case \"Play\":\r\n        clearDraws(context);\r\n        handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n        drawPlayerBar(context, blockWidth, blockHeight);\r\n        drawLevel(context, blockWidth, blockHeight);\r\n        ball.x = ball.x + ball.dirX;\r\n        ball.y = ball.y + ball.dirY;\r\n        checkColision(ball);\r\n        drawBall(context, blockWidth, blockHeight, ball);\r\n        setTimeout(() => {\r\n          setFrameCount(frameCount + 1);\r\n        }, [frameRate]);\r\n        break;\r\n      case \"Pause\":\r\n        drawPauseGame(context, blockWidth, blockHeight);\r\n        break;\r\n      case \"End\":\r\n        clearDraws(context);\r\n        drawGameOver(context, blockWidth, blockHeight);\r\n        handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n        break;\r\n      case \"Restart\":\r\n        setMaps(JSON.parse(JSON.stringify(LevelsJSON)));\r\n        setGameLevel(0);\r\n        setCurrLevel(Maps[gameLevel]);\r\n        setLevelHealth(currLevel.Bars);\r\n        setBall(Object.create(defaultBall));\r\n        setPlayerBar(Object.create(defaultPlayerBar));\r\n        setScore(0);\r\n        setFrameCount(1);\r\n        setGameState(\"Play\");\r\n        break;\r\n      case \"LevelUp\":\r\n        if (gameLevel + 1 === 3) {\r\n          setGameState(\"Win\");\r\n        } else {\r\n          drawLevelUp(context, blockWidth, blockHeight, 4);\r\n          setTimeout(() => {\r\n            clearDraws(context, blockWidth, blockHeight);\r\n            drawLevelUp(context, blockWidth, blockHeight, 3);\r\n          }, [1000]);\r\n          setTimeout(() => {\r\n            drawLevelUp(context, blockWidth, blockHeight, 2);\r\n          }, [2000]);\r\n          setTimeout(() => {\r\n            drawLevelUp(context, blockWidth, blockHeight, 1);\r\n          }, [3000]);\r\n          setTimeout(() => {\r\n            setGameLevel(gameLevel + 1);\r\n            setCurrLevel(Maps[gameLevel + 1]);\r\n            setLevelHealth(currLevel.Bars);\r\n            setBall(Object.create(defaultBall));\r\n            clearDraws(context);\r\n            drawLevel(context, blockWidth, blockHeight);\r\n            setGameState(\"Play\");\r\n          }, [4000]);\r\n        }\r\n        break;\r\n      case \"Win\":\r\n        setCurrLevel(Maps[3]);\r\n        clearDraws(context);\r\n        drawPlayerBar(context, blockWidth, blockHeight);\r\n        handleFireworks(context, blockWidth, blockHeight);\r\n        drawWinGame(context, blockWidth, blockHeight);\r\n        handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n        setTimeout(() => {\r\n          setWinFrameCount(winFrameCount + 1);\r\n        }, [frameRate]);\r\n        break;\r\n      default:\r\n        clearDraws(context);\r\n        break;\r\n    }\r\n    const render = () => {\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    };\r\n    render();\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [frameCount, winFrameCount, gameState]);\r\n\r\n  return <canvas ref={canvasRef}\r\n    onTouchStart={(e) => e.preventDefault()}\r\n    onTouchMove={(e) => e.preventDefault()}\r\n    onTouchEnd={(e) => e.preventDefault()}\r\n    onTouchCancel={(e) => e.preventDefault()}></canvas>;\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { handleCanvasBorders } from \"../../Handlers/handleCanvasBorders.js\";\r\nimport { set } from \"ol/transform.js\";\r\n\r\nconst frequency = 4; //Hertz\r\nconst frameRate = 1000 / frequency; // frames / milisecond\r\n\r\nconst Snake = ({ controls, isSelected, gameState, setGameState }) => {\r\n  const rows = 30;\r\n  const cols = 30;\r\n  let canvasRef = useRef(null);\r\n  let [fruit, setFruit] = useState(false);\r\n  let [fruitPos] = useState({ x: 0, y: 0 });\r\n  let [score, setScore] = useState(0);\r\n  let [snakeHeadPos] = useState({\r\n    direction: \"right\",\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  let [previousDir, setPreviousDir] = useState(\"right\");\r\n  let [snakeBody, setSnakeBody] = useState({ x: [], y: [] });\r\n  let [initialPos, setInitialPos] = useState(false);\r\n  let [frameCount, setFrameCount] = useState(0);\r\n  let [time, setTime] = useState(0);\r\n  const [startTime, setStartTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (controls.pause) {\r\n      if (controls.pause) {\r\n        if (gameState === \"Play\") {\r\n          setGameState(\"Pause\");\r\n        } else if (gameState === \"Pause\") {\r\n\r\n          setGameState(\"Play\");\r\n        } else if (\r\n          gameState === \"Win\" ||\r\n          gameState === \"End\" ||\r\n          gameState === \"Start\"\r\n        ) {\r\n          setGameState(\"Restart\");\r\n        }\r\n      }\r\n    }\r\n  }, [controls]);\r\n\r\n  useEffect(() => {\r\n    if (gameState === \"Restart\") {\r\n      setTime(0);\r\n    } else if (gameState === \"Play\") {\r\n      setStartTime(performance.now());\r\n    } else if (gameState === \"Pause\" ||\r\n      gameState === \"End\") {\r\n      setTime(time + performance.now() - startTime);\r\n      time += performance.now() - startTime;\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    if (snakeBody.x[0] === undefined) {\r\n      if (controls.up) {\r\n        snakeHeadPos.direction = \"up\";\r\n      } else if (controls.down) {\r\n        snakeHeadPos.direction = \"down\";\r\n      } else if (controls.left) {\r\n        snakeHeadPos.direction = \"left\";\r\n      } else if (controls.right) {\r\n        snakeHeadPos.direction = \"right\";\r\n      }\r\n    } else {\r\n      if (controls.up && previousDir !== \"down\") {\r\n        snakeHeadPos.direction = \"up\";\r\n      } else if (controls.down && previousDir !== \"up\") {\r\n        snakeHeadPos.direction = \"down\";\r\n      } else if (controls.left && previousDir !== \"right\") {\r\n        snakeHeadPos.direction = \"left\";\r\n      } else if (controls.right && previousDir !== \"left\") {\r\n        snakeHeadPos.direction = \"right\";\r\n      }\r\n    }\r\n  }, [controls, frameCount]);\r\n\r\n  const drawBoard = (ctx, canvasWidth, canvasHeight) => {\r\n    ctx.fillStyle = \"#000000\";\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n  };\r\n\r\n  const drawFruit = (ctx, blockWidth, blockHeight) => {\r\n    let newX, newY;\r\n    let overlapX,\r\n      overlapY = false;\r\n    if (!fruit) {\r\n      fruitPos.x = Math.floor(Math.random() * cols);\r\n      fruitPos.y = Math.floor(Math.random() * rows);\r\n      if (snakeBody.x[0] === undefined) {\r\n        while (fruitPos.x === snakeHeadPos.x && fruitPos.y === snakeHeadPos.y) {\r\n          fruitPos.x = Math.floor(Math.random() * cols);\r\n          fruitPos.y = Math.floor(Math.random() * rows);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < snakeBody.x.length; i++) {\r\n          if (fruitPos.x === snakeBody.x[i]) {\r\n            overlapX = true;\r\n          }\r\n          if (fruitPos.y === snakeBody.y[i]) {\r\n            overlapY = true;\r\n          }\r\n        }\r\n        while (overlapX === true && overlapY === true) {\r\n          fruitPos.x = Math.floor(Math.random() * cols);\r\n          fruitPos.y = Math.floor(Math.random() * rows);\r\n          let flagX = false;\r\n          let flagY = false;\r\n          for (let i = 0; i < snakeBody.x.length; i++) {\r\n            if (fruitPos.x === snakeBody.x[i]) {\r\n              flagX = true;\r\n            }\r\n            if (fruitPos.y === snakeBody.y[i]) {\r\n              flagY = true;\r\n            }\r\n          }\r\n          overlapX = flagX;\r\n          overlapY = flagY;\r\n        }\r\n      }\r\n      newX = fruitPos.x;\r\n      newY = fruitPos.y;\r\n      setFruit(true);\r\n    } else {\r\n      newX = fruitPos.x;\r\n      newY = fruitPos.y;\r\n    }\r\n    ctx.fillStyle = \"#00FF00\";\r\n    ctx.fillRect(\r\n      newX * blockWidth,\r\n      newY * blockHeight,\r\n      blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n\r\n  const drawSnakeHead = (ctx, blockWidth, blockHeight) => {\r\n    let step = 1;\r\n    let newX, newY;\r\n    if (!initialPos) {\r\n      newX = 10 * blockWidth;\r\n      newY = 10 * blockHeight;\r\n      setInitialPos(true);\r\n      snakeHeadPos.x = 10;\r\n      snakeHeadPos.y = 10;\r\n    } else {\r\n      switch (snakeHeadPos.direction) {\r\n        case \"right\":\r\n          newX = snakeHeadPos.x + step;\r\n          newY = snakeHeadPos.y;\r\n          snakeHeadPos.x = snakeHeadPos.x + step;\r\n          break;\r\n        case \"left\":\r\n          newX = snakeHeadPos.x - step;\r\n          newY = snakeHeadPos.y;\r\n          snakeHeadPos.x = snakeHeadPos.x - step;\r\n          break;\r\n        case \"up\":\r\n          newX = snakeHeadPos.x;\r\n          newY = snakeHeadPos.y - step;\r\n          snakeHeadPos.y = snakeHeadPos.y - step;\r\n          break;\r\n        case \"down\":\r\n          newX = snakeHeadPos.x;\r\n          newY = snakeHeadPos.y + step;\r\n          snakeHeadPos.y = snakeHeadPos.y + step;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    setPreviousDir(snakeHeadPos.direction);\r\n    if (snakeBody.x[2] !== undefined) {\r\n      for (let i = 2; i < snakeBody.x.length; i++) {\r\n        if (\r\n          snakeBody.x[i] === snakeHeadPos.x &&\r\n          snakeBody.y[i] === snakeHeadPos.y\r\n        ) {\r\n          setGameState(\"End\");\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      snakeHeadPos.x >= rows ||\r\n      snakeHeadPos.x < 0 ||\r\n      snakeHeadPos.y < 0 ||\r\n      snakeHeadPos.y >= cols\r\n    ) {\r\n      setGameState(\"End\");\r\n    } else if (fruitPos.x === snakeHeadPos.x && fruitPos.y === snakeHeadPos.y) {\r\n      setFruit(false);\r\n      setScore(score + 1);\r\n      snakeBody.x.unshift(snakeHeadPos.x);\r\n      snakeBody.y.unshift(snakeHeadPos.y);\r\n    }\r\n    ctx.fillStyle = \"#00FFFF\";\r\n    ctx.fillRect(\r\n      newX * blockWidth,\r\n      newY * blockHeight,\r\n      blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n\r\n  const drawSnakeBody = (ctx, blockWidth, blockHeight) => {\r\n    for (let i = 0; i < snakeBody.x.length; i++) {\r\n      ctx.fillStyle = \"#00FFFF\";\r\n      ctx.fillRect(\r\n        snakeBody.x[i] * blockWidth,\r\n        snakeBody.y[i] * blockHeight,\r\n        blockWidth,\r\n        blockHeight,\r\n      );\r\n    }\r\n    snakeBody.x.unshift(snakeHeadPos.x);\r\n    snakeBody.y.unshift(snakeHeadPos.y);\r\n    snakeBody.x.pop();\r\n    snakeBody.y.pop();\r\n  };\r\n\r\n  const drawEndGame = (ctx, blockWidth, blockHeight) => {\r\n    drawBoard(ctx, blockWidth, blockHeight);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"50px monospace\";\r\n    ctx.fillText(\"Game Over\", 3 * blockWidth, 8 * blockHeight, 500);\r\n    ctx.font = \"28px monospace\";\r\n    ctx.fillText(\"Score: \" + score, 7 * blockWidth, 15 * blockHeight, 500);\r\n    ctx.fillText(\"Time: \" + Math.floor(time/1000), 7 * blockWidth, 20 * blockHeight, 500);\r\n    ctx.font = \"16px monospace\";\r\n    ctx.fillText(\"Press Play to Restart\", 5.5 * blockWidth, 25 * blockHeight, 500);\r\n    console.log(time);\r\n  };\r\n\r\n  const drawPauseGame = (ctx, blockWidth, blockHeight) => {\r\n    drawBoard(ctx, blockWidth, blockHeight);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"50px monospace\";\r\n    ctx.fillText(\"Paused\", 7 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n\r\n  const drawStartGame = (ctx, blockWidth, blockHeight) => {\r\n    drawBoard(ctx, blockWidth, blockHeight);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"26px monospace\";\r\n    ctx.fillText(\"Press Play to Start\", 1.5 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    let blockWidth = context.canvas.width / cols;\r\n    let blockHeight = context.canvas.height / rows;\r\n    let animationFrameId;\r\n    if (gameState === \"Play\") {\r\n      drawBoard(context, context.canvas.width, context.canvas.height);\r\n      drawFruit(context, blockWidth, blockHeight);\r\n      drawSnakeHead(context, blockWidth, blockHeight);\r\n      drawSnakeBody(context, blockWidth, blockHeight);\r\n      handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n      setTimeout(() => {\r\n        setFrameCount(frameCount + 1);\r\n      }, [frameRate]);\r\n    } else if (gameState === \"Pause\") {\r\n      drawPauseGame(context, blockWidth, blockHeight);\r\n      handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n    } else if (gameState === \"End\") {\r\n      drawBoard(context, context.canvas.width, context.canvas.height);\r\n      drawEndGame(context, blockWidth, blockHeight);\r\n      handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n    } else if (gameState === \"Restart\") {\r\n      setGameState(\"Play\");\r\n      setFrameCount(1);\r\n      setFruit(false);\r\n      setInitialPos(false);\r\n      setScore(0);\r\n      setSnakeBody({ x: [], y: [] });\r\n    } else if (gameState === \"Start\") {\r\n      drawStartGame(context, blockWidth, blockHeight);\r\n      handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n      setFrameCount(1);\r\n      setFruit(false);\r\n      setInitialPos(false);\r\n      setScore(0);\r\n      setSnakeBody({ x: [], y: [] });\r\n    }\r\n    const render = () => {\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    };\r\n    render();\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [frameCount, gameState]);\r\n\r\n  return <canvas height=\"300\" width=\"300\" ref={canvasRef}\r\n    onTouchStart={(e) => e.preventDefault()}\r\n    onTouchMove={(e) => e.preventDefault()}\r\n    onTouchEnd={(e) => e.preventDefault()}\r\n    onTouchCancel={(e) => e.preventDefault()}></canvas>;\r\n};\r\nexport default Snake;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { handleCanvasBorders } from \"../../Handlers/handleCanvasBorders.js\";\r\nimport Maps from \"./Maps.json\";\r\n\r\nconst frequency = 60; //Hertz\r\nconst frameRate = 1000 / frequency; // frames / milisecond\r\nconst rows = 150;\r\nconst cols = 300;\r\nconst blockSize = 10;\r\nconst defaultInvaderOne = {\r\n    id: 1,\r\n    x: 10,\r\n    y: 10,\r\n    row: 0,\r\n    life: 1,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 10,\r\n    h: 10,\r\n    hit: false,\r\n    color: \"green\",\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n        ],\r\n        2: [\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 0, 1, 0, 1, 1, 0, 1, 0, 0],\r\n            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],\r\n            [0, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n        ]\r\n    }\r\n}\r\nconst defaultInvaderTwo = {\r\n    id: 2,\r\n    x: 10,\r\n    y: 10,\r\n    row: 0,\r\n    life: 2,\r\n    hit: false,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"red\",\r\n    sprites: {\r\n        1: [\r\n            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0],\r\n        ],\r\n        2: [\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],\r\n        ]\r\n    }\r\n}\r\nconst defaultInvaderThree = {\r\n    id: 3,\r\n    x: 10,\r\n    y: 10,\r\n    row: 0,\r\n    life: 3,\r\n    hit: false,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"cyan\",\r\n    sprites: {\r\n        1: [\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 0, 1, 1, 1, 1, 1, 1, 0, 1],\r\n            [1, 0, 1, 0, 1, 1, 0, 1, 0, 1],\r\n            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n        ],\r\n        2: [\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 0, 1, 1, 1, 1, 1, 1, 0, 1],\r\n            [1, 0, 1, 0, 1, 1, 0, 1, 0, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n        ]\r\n    }\r\n}\r\nconst defaultBonusInvader = {\r\n    id: 8,\r\n    x: 10,\r\n    y: 10,\r\n    life: 1,\r\n    hit: false,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 20,\r\n    h: 10,\r\n    color: \"magenta\",\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],\r\n        ],\r\n        2: [\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],\r\n\r\n        ]\r\n    }\r\n}\r\nconst defaultPlayer = {\r\n    id: 10,\r\n    x: 10,\r\n    y: 130,\r\n    speed: 2,\r\n    move: \"none\",\r\n    shooting: false,\r\n    cooling: 0,\r\n    currSprite: 1,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"white\",\r\n    cooldown: 250, //milliseconds\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\r\n        ]\r\n    },\r\n}\r\nconst defaultBlock = {\r\n    id: 9,\r\n    x: 10,\r\n    y: 10,\r\n    currSprite: 1,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"gray\",\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n        ]\r\n    },\r\n}\r\nconst defaultPlayerBullet = {\r\n    id: \"player\",\r\n    x: 10,\r\n    y: 10,\r\n    h: 9,\r\n    w: 2,\r\n    speed: 5,\r\n    color: \"white\",\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    sprites: {\r\n        1: [\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n        ],\r\n        2: [\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n        ]\r\n    }\r\n}\r\nconst defaultInvaderBullet = {\r\n    id: \"invader\",\r\n    x: 10,\r\n    y: 10,\r\n    currSprite: 1,\r\n    totalSprites: 1,\r\n    w: 2,\r\n    h: 9,\r\n    speed: 2,\r\n    color: \"yellow\",\r\n    sprites: {\r\n        1: [\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n        ]\r\n    },\r\n}\r\n\r\nexport default function SpaceInvaders({ controls, isSelected, gameState, setGameState }) {\r\n\r\n    const canvasRef = useRef(null);\r\n    const [score, setScore] = useState(0);\r\n    const [lives, setLives] = useState(3);\r\n    const [level, setLevel] = useState(1);\r\n    const [frameCount, setFrameCount] = useState(0);\r\n    const [enemies, setEnemies] = useState(0);\r\n    const [enemyMoveParam, setEnemyMoveParam] = useState({\r\n        index: 0,\r\n        rows: [],\r\n    });\r\n    const [entities, setEntities] = useState([]);\r\n    const [bullets, setBullets] = useState([]);\r\n    const [explosions, setExplosions] = useState([]);\r\n    const explosionLifetime = 500;\r\n    //let entities = [];\r\n    //let bullets = [];\r\n    let [player, setPlayer] = useState(Object.create(defaultPlayer));\r\n    let [time, setTime] = useState(0);\r\n    const [startTime, setStartTime] = useState(0);\r\n    const invaderSpeed = 1;\r\n\r\n    //Game state\r\n    useEffect(() => {\r\n        if (controls.pause) {\r\n            switch (gameState) {\r\n                case \"Play\":\r\n                    setGameState(\"Pause\");\r\n                    break;\r\n                case \"Pause\":\r\n                    setGameState(\"Play\");\r\n                    break;\r\n                case \"Win\":\r\n                case \"End\":\r\n                case \"Start\":\r\n                    setGameState(\"Restart\");\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }, [controls]);\r\n    //Player controls\r\n    useEffect(() => {\r\n        if (gameState === \"Play\") {\r\n            if (\r\n                controls.left &&\r\n                !controls.right &&\r\n                player.x + player.w > player.w\r\n            ) {\r\n                player.x = player.x - player.speed;\r\n            } else if (\r\n                controls.right &&\r\n                !controls.left &&\r\n                player.x + player.w < cols\r\n            ) {\r\n                player.x = player.x + player.speed;\r\n            } else if (controls.left && controls.right\r\n            ) {\r\n                player.move = \"none\";\r\n            } else if (!controls.left && !controls.right) {\r\n                player.move = \"none\";\r\n            }\r\n            if (controls.up || controls.one\r\n            ) {\r\n                if (player.cooling === 0) {\r\n                    player.shooting = true;\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [controls, frameCount]);\r\n    //Game time\r\n    useEffect(() => {\r\n        console.log(gameState);\r\n        if (gameState === \"Restart\") {\r\n            setTime(0);\r\n        } else if (gameState === \"Play\") {\r\n            setStartTime(performance.now());\r\n        } else if (gameState === \"Pause\" ||\r\n            gameState === \"End\" ||\r\n            gameState === \"Win\") {\r\n            setTime(time + performance.now() - startTime);\r\n            time += performance.now() - startTime;\r\n        }\r\n    }, [gameState]);\r\n\r\n    //Drawing functions\r\n    const drawBoard = (ctx) => {\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    };\r\n    const drawSprite = (ctx, object) => {\r\n        if (object.hit === true) {\r\n            ctx.fillStyle = \"white\";\r\n        } else {\r\n            ctx.fillStyle = object.color;\r\n        }\r\n        for (let i = 0; i < object.sprites[object.currSprite].length; i++) {\r\n            for (let j = 0; j < object.sprites[object.currSprite][i].length; j++) {\r\n                if (object.sprites[object.currSprite][i][j] === 1) {\r\n                    ctx.fillRect(object.x + j, object.y + i, 1, 1);\r\n                }\r\n            }\r\n        }\r\n        if (object.sprites.length > 1) {\r\n            if (object.currSprite < object.sprites.length - 1) {\r\n                object.currSprite++;\r\n            } else {\r\n                object.currSprite = 1;\r\n            }\r\n        }\r\n    }\r\n    const drawExplosions = (ctx) => {\r\n        let redshift = 0;\r\n        let greenshift = 0;\r\n        let blueshift = 0;\r\n        if (explosions.length > 0) {\r\n            for (let i = 0; i < explosions.length; i++) {\r\n                if (explosions[i].decay <= explosionLifetime / 3) {\r\n                    redshift = Math.floor((explosions[i].decay) * 255 / (explosionLifetime / 3));\r\n                } else if (explosions[i].decay <= explosionLifetime * 2 / 3) {\r\n                    redshift = 255;\r\n                    greenshift = Math.floor((explosions[i].decay - explosionLifetime / 3) * 255 / (explosionLifetime / 3));\r\n                } else {\r\n                    redshift = 255;\r\n                    greenshift = 255;\r\n                    blueshift = Math.floor((explosions[i].decay - explosionLifetime * 2 / 3) * 255 / (explosionLifetime / 3));\r\n                }\r\n                ctx.fillStyle = \"rgb(\" + redshift + \",\" + greenshift + \",\" + blueshift + \")\";\r\n                let spread = 2 * explosions[i].decay / (explosionLifetime + explosions[i].decay);\r\n                let radius = explosions[i].w / 2 * spread - 10;\r\n                ctx.fillRect(explosions[i].x + radius * 2 / 3, explosions[i].y + radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x - radius * 2 / 3, explosions[i].y + radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x + radius * 2 / 3, explosions[i].y - radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x - radius * 2 / 3, explosions[i].y - radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x + radius, explosions[i].y, 2, 2);\r\n                ctx.fillRect(explosions[i].x - radius, explosions[i].y, 2, 2);\r\n                ctx.fillRect(explosions[i].x, explosions[i].y + radius, 2, 2);\r\n                ctx.fillRect(explosions[i].x, explosions[i].y - radius, 2, 2);\r\n            }\r\n\r\n        }\r\n    }\r\n    const drawStartGame = (ctx, blockWidth, blockHeight) => {\r\n        drawBoard(ctx, blockWidth, blockHeight);\r\n        ctx.fillStyle = \"#FF0000\";\r\n        ctx.font = \"24px monospace\";\r\n        ctx.fillText(\"Press Play to Start\", 2.5 * blockWidth, 8 * blockHeight, 500);\r\n    };\r\n    const drawGameOver = (ctx, blockWidth, blockHeight) => {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"40px monospace\";\r\n        ctx.fillText(\"Game Over\", 5 * blockWidth, 5 * blockHeight, 500);\r\n        ctx.font = \"16px monospace\";\r\n        ctx.fillText(\"Score: \" + score, 11 * blockWidth, 8 * blockHeight, 500);\r\n        ctx.fillText(\"Time: \" + Math.floor(time / 1000), 11 * blockWidth, 10 * blockHeight, 500);\r\n        ctx.font = \"12px monospace\";\r\n        ctx.fillText(\"Press Play to Restart\", 8 * blockWidth, 13 * blockHeight, 500);\r\n    };\r\n    const drawPauseGame = (ctx, blockWidth, blockHeight) => {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"40px monospace\";\r\n        ctx.fillText(\"Paused\", 8 * blockWidth, 8 * blockHeight, 500);\r\n    };\r\n    const drawWinGame = (ctx, blockWidth, blockHeight) => {\r\n        drawBoard(ctx);\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"40px monospace\";\r\n        ctx.fillText(\"You Win\", 7 * blockWidth, 4 * blockHeight, 500);\r\n        ctx.font = \"16px monospace\";\r\n        ctx.fillText(\"Score: \" + score, 10 * blockWidth, 7 * blockHeight, 500);\r\n        ctx.fillText(\"Time: \" + Math.floor( time / 1000), 10 * blockWidth, 9 * blockHeight, 500);\r\n        ctx.fillText(\"Lives: \" + lives, 10 * blockWidth, 11 * blockHeight, 500);\r\n        ctx.font = \"12px monospace\";\r\n        ctx.fillText(\"Press Play to Restart\", 8 * blockWidth, 14 * blockHeight, 500);\r\n    };\r\n    const drawBottomText = (ctx, blockWidth, blockHeight) => {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"10px monospace\";\r\n        ctx.fillText(\"LIFE:\" + lives, blockWidth / 2, rows - blockHeight / 4, 500);\r\n    }\r\n    const drawObjects = (context) => {\r\n        for (let i = 0; i < entities.length; i++) {\r\n            drawSprite(context, entities[i]);\r\n        }\r\n        for (let i = 0; i < bullets.length; i++) {\r\n            drawSprite(context, bullets[i]);\r\n        }\r\n        drawSprite(context, player);\r\n        drawExplosions(context);\r\n    }\r\n    //Game functions\r\n    const setUpLevel = () => {\r\n        let currEntity = {};\r\n        let newEntities = [];\r\n        let newEnemyMoveParam = { index: 0, rows: [] };\r\n        for (let i = 0; i < Maps[level].Matrix.length; i++) {\r\n            for (let j = 0; j < Maps[level].Matrix[i].length; j++) {\r\n                switch (Maps[level].Matrix[i][j]) {\r\n                    case 1:\r\n                        currEntity = Object.create(defaultInvaderOne);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 15 + i * blockSize * 1.2;\r\n                        currEntity.row = i;\r\n                        newEntities.push(currEntity);\r\n                        if (newEnemyMoveParam.rows[i] === undefined) {\r\n                            newEnemyMoveParam.rows.push(\"right\");\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        currEntity = Object.create(defaultInvaderTwo);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 15 + i * blockSize * 1.2;\r\n                        currEntity.row = i;\r\n                        newEntities.push(currEntity);\r\n                        if (newEnemyMoveParam.rows[i] === undefined) {\r\n                            newEnemyMoveParam.rows.push(\"right\");\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        currEntity = Object.create(defaultInvaderThree);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 15 + i * blockSize * 1.2;\r\n                        currEntity.row = i;\r\n                        newEntities.push(currEntity);\r\n                        if (newEnemyMoveParam.rows[i] === undefined) {\r\n                            newEnemyMoveParam.rows.push(\"right\");\r\n                        }\r\n                        break;\r\n                    case 9:\r\n                        currEntity = Object.create(defaultBlock);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 5 + i * blockSize * 1.2;\r\n                        newEntities.push(currEntity);\r\n                        break;\r\n                    case 0:\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        setEnemies(Maps[level].Enemies);\r\n        setEntities(newEntities);\r\n        setEnemyMoveParam(newEnemyMoveParam);\r\n    }\r\n    const invaderMove = () => {\r\n        if (enemyMoveParam.index >= enemies) {\r\n            enemyMoveParam.index = 0;\r\n        }\r\n        switch (enemyMoveParam.rows[entities[enemyMoveParam.index].row]) {\r\n            case \"left\":\r\n                if (entities[enemyMoveParam.index].x > 2) {\r\n                    entities[enemyMoveParam.index].x = entities[enemyMoveParam.index].x - invaderSpeed;\r\n                }\r\n                else {\r\n                    enemyMoveParam.rows[entities[enemyMoveParam.index].row] = \"right\";\r\n                    entities[enemyMoveParam.index].x = entities[enemyMoveParam.index].x + invaderSpeed;\r\n                }\r\n                break;\r\n            case \"right\":\r\n                if (entities[enemyMoveParam.index].x + entities[enemyMoveParam.index].w < cols - 1) {\r\n                    entities[enemyMoveParam.index].x = entities[enemyMoveParam.index].x + invaderSpeed;\r\n                }\r\n                else {\r\n                    enemyMoveParam.rows[entities[enemyMoveParam.index].row] = \"left\";\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (entities[enemyMoveParam.index].currSprite < entities[enemyMoveParam.index].totalSprites) {\r\n            entities[enemyMoveParam.index].currSprite = entities[enemyMoveParam.index].currSprite + 1;\r\n        } else {\r\n            entities[enemyMoveParam.index].currSprite = 1;\r\n        }\r\n        enemyMoveParam.index++;\r\n        //console.log(entities[enemyMoveParam.index].sprites.length);\r\n        for (let i = 0; i < entities.length; i++) {\r\n            if (entities[i].id === 8) {\r\n                if (entities[i].x + entities[i].w > 0 && entities[i].x < cols) {\r\n                    entities[i].x = entities[i].x + entities[i].speed;\r\n                    if (entities[i].currSprite < entities[i].totalSprites) {\r\n                        entities[i].currSprite = entities[i].currSprite + 1;\r\n                    } else {\r\n                        entities[i].currSprite = 1;\r\n                    }\r\n                } else {\r\n                    entities.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        setEntities(entities);\r\n        setEnemyMoveParam(enemyMoveParam);\r\n    }\r\n    const spawnBonusInvader = () => {\r\n        let newEntity = Object.create(defaultBonusInvader);\r\n        let side = Math.random();\r\n        if (side > 0.5) {\r\n            newEntity.x = 0;\r\n            newEntity.speed = invaderSpeed;\r\n        } else {\r\n            newEntity.x = cols - newEntity.w;\r\n            newEntity.speed = -invaderSpeed;\r\n        }\r\n        newEntity.y = 2;\r\n        entities.push(newEntity);\r\n        setEntities(entities);\r\n    }\r\n    const createExplosion = (target) => {\r\n        let newExplosion = {\r\n            x: target.x + target.w / 2 - 1,\r\n            y: target.y + target.h / 2 - 1,\r\n            w: target.w,\r\n            h: target.h,\r\n            decay: explosionLifetime\r\n        }\r\n        explosions.push(newExplosion);\r\n        setExplosions(explosions);\r\n    }\r\n    const playerShooting = () => {\r\n        let newBullet = {};\r\n        if (player.shooting === true &&\r\n            player.cooling === 0) {\r\n            newBullet = Object.create(defaultPlayerBullet);\r\n            newBullet.x = player.x - 1 + player.w / 2;\r\n            newBullet.y = player.y;\r\n            bullets.push(newBullet);\r\n            player.cooling = player.cooldown;\r\n            setTimeout(() => {\r\n                player.cooling = 0;\r\n            }, [player.cooldown]);\r\n            setBullets(bullets);\r\n            player.shooting = false;\r\n        }\r\n    }\r\n    const invaderShooting = () => {\r\n        let newBullet = {};\r\n        let chance = Math.random();\r\n        let invaderShooter = Math.floor(Math.random() * enemies);\r\n        if (chance > 0.95) {\r\n            newBullet = Object.create(defaultInvaderBullet);\r\n            newBullet.x = entities[invaderShooter].x + player.w / 2;\r\n            newBullet.y = entities[invaderShooter].y;\r\n            bullets.push(newBullet);\r\n            setBullets(bullets);\r\n        }\r\n    }\r\n    const playerHit = () => {\r\n        if (lives - 1 >= 0) {\r\n            setLives(lives - 1);\r\n            createExplosion(player);\r\n        } else {\r\n            setGameState(\"End\");\r\n        }\r\n    }\r\n    const invaderHit = (invaderIndex) => {\r\n        if (entities[invaderIndex].life - 1 > 0) {\r\n            entities[invaderIndex].life = entities[invaderIndex].life - 1;\r\n            entities[invaderIndex].hit = true;\r\n            setScore(score + 5);\r\n            setTimeout(() => {\r\n                entities[invaderIndex].hit = false;\r\n            }, [player.cooldown / 2]);\r\n        } else {\r\n            createExplosion(entities[invaderIndex]);\r\n            if (entities[invaderIndex].id !== 8) {\r\n                setEnemies(enemies - 1);\r\n                setScore(score + 10);\r\n            } else {\r\n                setScore(score + 150);\r\n            }\r\n            entities.splice(invaderIndex, 1);\r\n        }\r\n        setEntities(entities);\r\n    }\r\n    const blockHit = (blockIndex) => {\r\n        createExplosion(entities[blockIndex]);\r\n        //entities.splice(blockIndex, 1);\r\n        //setEntities(entities);\r\n    }\r\n    const checkColisions = (bulletIndex) => {\r\n        let colision = false;\r\n        for (let i = 0; i < entities.length; i++) {\r\n            if (bullets[bulletIndex].id === \"player\") {\r\n                if (bullets[bulletIndex].x > entities[i].x &&\r\n                    bullets[bulletIndex].x < entities[i].x + entities[i].w &&\r\n                    bullets[bulletIndex].y > entities[i].y &&\r\n                    bullets[bulletIndex].y < entities[i].y + entities[i].h) {\r\n                    colision = true;\r\n                    if (entities[i].id === 9) {\r\n                        blockHit(i);\r\n                    } else {\r\n                        invaderHit(i);\r\n                    }\r\n                }\r\n            } else {\r\n                if (bullets[bulletIndex].x > player.x &&\r\n                    bullets[bulletIndex].x < player.x + player.w &&\r\n                    bullets[bulletIndex].y > player.y - player.h &&\r\n                    bullets[bulletIndex].y < player.y) {\r\n                    colision = true;\r\n                    playerHit();\r\n                } else if (bullets[bulletIndex].x > entities[i].x &&\r\n                    bullets[bulletIndex].x < entities[i].x + entities[i].w &&\r\n                    bullets[bulletIndex].y > entities[i].y - entities[i].h &&\r\n                    bullets[bulletIndex].y < entities[i].y &&\r\n                    entities[i].id === 9) {\r\n                    colision = true;\r\n                    blockHit(i);\r\n                }\r\n            }\r\n        }\r\n        return colision;\r\n    }\r\n    const handleBullets = () => {\r\n        let newArray = [];\r\n        if (bullets.length > 0) {\r\n            //console.log(bullets);\r\n            for (let i = 0; i < bullets.length; i++) {\r\n                if (!checkColisions(i)) {\r\n                    if (bullets[i].id === \"player\") {\r\n                        if (bullets[i].y > 0) {\r\n                            bullets[i].y -= bullets[i].speed;\r\n                            if (bullets[i].currSprite < bullets[i].totalSprites) {\r\n                                bullets[i].currSprite = bullets[i].currSprite + 1;\r\n                            } else {\r\n                                bullets[i].currSprite = 1;\r\n                            }\r\n                            newArray.push(bullets[i]);\r\n                        }\r\n                    } else {\r\n                        if (bullets[i].y < rows) {\r\n                            bullets[i].y += bullets[i].speed;\r\n                            newArray.push(bullets[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            setBullets(newArray);\r\n        }\r\n    }\r\n    const handleExplosions = () => {\r\n        if (explosions.length > 0) {\r\n            for (let i = 0; i < explosions.length; i++) {\r\n                if (explosions[i].decay - frameRate > 0) {\r\n                    explosions[i].decay = explosions[i].decay - frameRate;\r\n                } else {\r\n                    explosions.splice(i, 1);\r\n                }\r\n            }\r\n            setExplosions(explosions);\r\n        }\r\n    }\r\n    const handleEvents = () => {\r\n        if ((frameCount * frameRate) % (1200 * frameRate) === 0) {\r\n            spawnBonusInvader();\r\n        }\r\n        playerShooting();\r\n        invaderShooting();\r\n        handleBullets();\r\n        handleExplosions();\r\n        invaderMove();\r\n    }\r\n\r\n    //Game Loop\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        let animationFrameId;\r\n        switch (gameState) {\r\n            case \"Play\":\r\n                if (lives >= 0 && enemies > 0) {\r\n                    drawBoard(context);\r\n                    handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                    handleEvents();\r\n                    drawObjects(context);\r\n                    drawBottomText(context, blockSize, blockSize);\r\n                    setTimeout(() => {\r\n                        setFrameCount(frameCount + 1);\r\n                    }, [frameRate]);\r\n                }\r\n                else if (lives < 0) {\r\n                    setGameState(\"End\");\r\n                }\r\n                else if (enemies === 0) {\r\n                    setGameState(\"Win\");\r\n                }\r\n                break;\r\n            case \"Pause\":\r\n                drawPauseGame(context, blockSize, blockSize);\r\n                handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                break;\r\n            case \"Win\":\r\n                drawBoard(context);\r\n                drawWinGame(context, blockSize, blockSize);\r\n                handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                break;\r\n            case \"End\":\r\n                drawBoard(context);\r\n                drawGameOver(context, blockSize, blockSize);\r\n                handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                break;\r\n            case \"Start\":\r\n                setLevel(1);\r\n                setScore(0);\r\n                setLives(3);\r\n                setExplosions([]);\r\n                setBullets([]);\r\n                setUpLevel();\r\n                setPlayer(Object.create(defaultPlayer));\r\n                setFrameCount(1);\r\n                drawBoard(context);\r\n                drawStartGame(context, blockSize, blockSize);\r\n                handleCanvasBorders(context, context.canvas.width, context.canvas.height);\r\n                break;\r\n            case \"Restart\":\r\n                setLevel(1);\r\n                setScore(0);\r\n                setLives(3);\r\n                setExplosions([]);\r\n                setBullets([]);\r\n                setUpLevel();\r\n                setPlayer(Object.create(defaultPlayer));\r\n                setFrameCount(1);\r\n                setGameState(\"Play\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const render = () => {\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n        };\r\n        render();\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [gameState, frameCount]);\r\n\r\n    return <canvas ref={canvasRef} width={300} height={150}\r\n        onTouchStart={(e) => e.preventDefault()}\r\n        onTouchMove={(e) => e.preventDefault()}\r\n        onTouchEnd={(e) => e.preventDefault()}\r\n        onTouchCancel={(e) => e.preventDefault()}\r\n    ></canvas>;\r\n}","export const handleAction = (action, setAction, appDialog, setAppDialog, args) =>{\r\n    switch (action) {\r\n        case \"Keybinds\":\r\n            args.setShowKeybindDialog(!args.showKeybindDialog);\r\n            setAction(false);\r\n            break;\r\n        case \"Play / Pause\":\r\n            if(args.gameState === \"Play\"){\r\n                args.setGameState(\"Pause\");\r\n            }else if(args.gameState === \"Pause\"){\r\n                args.setGameState(\"Play\");\r\n            }\r\n            setAction(false);\r\n            break;\r\n        case \"New\":\r\n            args.setGameState(\"Restart\");\r\n            setAction(false);\r\n            break;\r\n        case \"touchscreenControls\":{\r\n            args.setShowControls(!args.showControls);\r\n            setAction(false);\r\n            break;\r\n        }\r\n        case false:\r\n            break;\r\n        default:\r\n            setAction(false);\r\n            break;\r\n    }\r\n}","export const handleTopMenu = (appMenu, setAppMenu, args) => {\r\n    //Default App Menu  \r\n    const defaultAppMenu = {\r\n        \"Game\": {\r\n            \"New Game\": {\r\n                \"action\": \"New\",\r\n                \"keybind\": \"Alt+N\",\r\n                \"disabled\": true\r\n            },\r\n            \"Play / Pause\": {\r\n                \"action\": \"Play / Pause\",\r\n                \"keybind\": \"P\",\r\n                \"disabled\": true\r\n            },\r\n            \"LineBreak1\":{},\r\n            \"Keybinds\": {\r\n                \"action\": \"Keybinds\",\r\n                \"disabled\": false\r\n            },\r\n            \"LineBreak2\":{},\r\n            \"Close\": {\r\n                \"action\": \"Close\",\r\n                \"keybind\": \"Alt+Shift+F4\",\r\n                \"disabled\": false\r\n            }\r\n        },\r\n        \"View\": {\r\n            \"Touchscreen Controls\": {\r\n                \"action\": \"touchscreenControls\",\r\n                \"checkbox\": true,\r\n                \"disabled\": false\r\n            }\r\n        },\r\n        \"Help\": {\r\n            \"Help\": {\r\n                \"action\": \"help\",\r\n                \"keybind\": \"F1\",\r\n                \"disabled\": true,\r\n                \"title\": \"Not Implemented\"\r\n            },\r\n            \"About\": {\r\n                \"action\": \"about\",\r\n                \"disabled\": true,\r\n                \"title\": \"Not Implemented\"\r\n            }\r\n        }\r\n    }\r\n    if (appMenu === null) {\r\n        setAppMenu(defaultAppMenu);\r\n    }\r\n    else {\r\n        let updatedAppMenu = { \r\n            ...appMenu,\r\n                    \"Game\": {\r\n                        ...appMenu[\"Game\"],\r\n                        \"New Game\": {\r\n                            ...appMenu[\"Game\"][\"New Game\"],\r\n                            \"disabled\": !args.gameChoice\r\n                        },\r\n                        \"Play / Pause\": {\r\n                            ...appMenu[\"Game\"][\"Play / Pause\"],\r\n                            \"disabled\": !args.gameChoice\r\n                        }\r\n                    },\r\n                    \"View\": {\r\n                        ...appMenu[\"View\"],\r\n                        \"Touchscreen Controls\": {\r\n                            ...appMenu[\"View\"][\"Touchscreen Controls\"],\r\n                            \"checkbox\": args.showControls\r\n                        }\r\n                    }\r\n         };\r\n        setAppMenu(updatedAppMenu);\r\n    }\r\n}","import { useState, useEffect } from \"react\";\r\nexport const KeybindDialog = ({ showKeybindDialog, setShowKeybindDialog, setAppDialog, keyboard, setKeyboard }) => {\r\n    const [newKeybinds, setNewKeybinds] = useState(structuredClone(keyboard));\r\n    const [keybindState, setKeybindState] = useState(\"\");\r\n    const [update, setUpdate] = useState(0);\r\n    const title = \"Keybinds\";\r\n    \r\n    const addNewKeybind = (key) => {\r\n        setKeybindState(\"Press new key...\");\r\n        const keyPromise = new Promise((resolve, reject) => {\r\n            document.addEventListener(\"keydown\", (e) => resolve(e.key));\r\n            setTimeout(() => {\r\n                document.removeEventListener(\"keydown\", (e) => resolve(e.key));\r\n                reject(\"timeout\");\r\n            }, 10000);\r\n        });\r\n        keyPromise.then((value) => {\r\n            newKeybinds[key].keys[newKeybinds[key].keys.length] = value;\r\n            setNewKeybinds(newKeybinds);\r\n            setKeybindState(\"\");\r\n        }).catch((error) => {\r\n            setKeybindState(error);\r\n        });\r\n    };\r\n    const changeKeybind = (key, index) => {\r\n        setKeybindState(\"Press new key...\");\r\n        const keyPromise = new Promise((resolve, reject) => {\r\n            document.addEventListener(\"keydown\", (e) => resolve(e.key));\r\n            setTimeout(() => {\r\n                document.removeEventListener(\"keydown\", (e) => resolve(e.key));\r\n                reject(\"timeout\");\r\n            }, 10000);\r\n        });\r\n        keyPromise.then((value) => {\r\n            newKeybinds[key].keys[index] = value;\r\n            setNewKeybinds(newKeybinds);\r\n            setKeybindState(\"\");\r\n        }).catch((error) => {\r\n            setKeybindState(error);\r\n        });\r\n    };\r\n    const removeKeybind = (key, index) => {\r\n        newKeybinds[key].keys.splice(index, 1);\r\n        setNewKeybinds(newKeybinds);\r\n        setUpdate(update + 1);\r\n    };\r\n    const info =\r\n        <div>\r\n            {Object.keys(newKeybinds).map((key) => (\r\n                <div key={key} style={{ display: \"flex\", flexDirection: \"row\", width: \"100%\", marginLeft: \"5px\" }}>\r\n                    <div style={{ width: \"55px\", height:\"30px\", display: \"flex\", justifyContent: \"start\", alignItems: \"center\", textAlign: \"center\" }}><b>{key}:</b></div>\r\n                    {newKeybinds[key].keys.map((keybind, index) =>\r\n                        <button\r\n                            key={index}\r\n                            style={{ width: \"75px\", height:\"30px\", border: \"1px solid dimgray\"}}\r\n                            onContextMenu={(e) => removeKeybind(key, index)}\r\n                            onClick={() => changeKeybind(key, index)}\r\n                        >{keybind}</button>\r\n                    )}\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                        {newKeybinds[key].keys.length < 3 &&\r\n                            <button onClick={() => addNewKeybind(key)}>+</button>}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            {keybindState}\r\n        </div>;\r\n\r\n    const actions = {\r\n        Confirm: () => {\r\n            setKeyboard(newKeybinds);\r\n            setShowKeybindDialog(false);\r\n            setAppDialog(null);\r\n        },\r\n        Reset: () => {\r\n            setNewKeybinds(keyboard);\r\n            setUpdate(update + 1);\r\n        },\r\n        Cancel: () => {\r\n            setNewKeybinds(keyboard);\r\n            setShowKeybindDialog(false);\r\n            setAppDialog(null);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (showKeybindDialog) {\r\n            setAppDialog({ title: title, info: info, actions: actions });\r\n        }\r\n    }, [showKeybindDialog, newKeybinds, keybindState, update]);\r\n    return <></>;\r\n}","import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  FaArrowLeft,\r\n  FaArrowRight,\r\n  FaArrowUp,\r\n  FaArrowDown,\r\n} from \"react-icons/fa\";\r\nimport { BsFillPlayFill, BsPauseFill, BsEjectFill, BsZoomIn, BsZoomOut } from \"react-icons/bs\";\r\nimport Controls from \"./Controls/Keyboard.js\";\r\nimport MainMenu from \"./Components/MainMenu.js\";\r\nimport Breakout from \"./Games/Breakout/Breakout.js\";\r\nimport Snake from \"./Games/Snake/Snake.js\";\r\nimport SpaceInvaders from \"./Games/Space Invaders/SpaceInvaders.js\";\r\nimport { handleAction } from \"./Handlers/handleAction.js\";\r\nimport { handleTopMenu } from \"./Handlers/handleTopMenu.js\";\r\nimport { KeybindDialog } from \"./Components/KeybindDialog.jsx\";\r\nimport \"./style.css\";\r\n\r\nexport default function Arcade(props) {\r\n  const isSelected = props.isSelected;\r\n  const action = props.action;\r\n  const setAction = props.setAction;\r\n  const appDialog = props.appDialog;\r\n  const setAppDialog = props.setAppDialog;\r\n  const appMenu = props.appMenu;\r\n  const setAppMenu = props.setAppMenu;\r\n  const contextMenu = props.contextMenu;\r\n\r\n  const canvasContainer = useRef();\r\n  const [keyboard, setKeyboard] = useState({\r\n    up: { keys: [\"w\", \"W\", \"ArrowUp\"], active: true },\r\n    down: { keys: [\"s\", \"S\", \"ArrowDown\"], active: true },\r\n    left: { keys: [\"a\", \"A\", \"ArrowLeft\"], active: true },\r\n    right: { keys: [\"d\", \"D\", \"ArrowRight\"], active: true },\r\n    one: { keys: [\"1\"], active: true },\r\n    two: { keys: [\"2\"], active: true },\r\n    pause: { keys: [\"p\", \"P\", \"Pause\"], active: true },\r\n    eject: { keys: [\"Escape\"], active: true },\r\n  });\r\n  const controls = Controls(isSelected, keyboard);\r\n  const [gameState, setGameState] = useState(\"Start\");\r\n  const [gameChoice, setGameChoice] = useState(\"None\");\r\n  const [canvasZoom, setCanvasZoom] = useState(1);\r\n  const [playButtonFlag, setPlayButtonFlag] = useState(true);\r\n  const [showControls, setShowControls] = useState(true);\r\n  const [showKeybindDialog, setShowKeybindDialog] = useState(false);\r\n  const handleScreenButton = (key, state, repeat) => {\r\n    document.dispatchEvent(new KeyboardEvent(state, { key: keyboard[key].keys[0], repeat: repeat }),)\r\n  };\r\n\r\n  const handleTouchEvent = (event, target) => {\r\n    if (event.type === \"touchstart\") {\r\n      controls[target] = true;\r\n    }\r\n    else if (event.type === \"touchend\") {\r\n      controls[target] = false;\r\n    }\r\n    else if (event.type === \"touchcancel\") {\r\n      controls[target] = false;\r\n    }\r\n    else if (event.type === \"touchmove\") {\r\n      Object.values(event.touches).forEach((t) => {\r\n        let keys = [];\r\n        let pos = { x: t.clientX, y: t.clientY };\r\n        let boundingRects = {\r\n          up: document.getElementById(\"arcadeButtonUp\").getBoundingClientRect(),\r\n          down: document.getElementById(\"arcadeButtonDown\").getBoundingClientRect(),\r\n          left: document.getElementById(\"arcadeButtonLeft\").getBoundingClientRect(),\r\n          right: document.getElementById(\"arcadeButtonRight\").getBoundingClientRect(),\r\n          one: document.getElementById(\"arcadeButtonA\").getBoundingClientRect(),\r\n          two: document.getElementById(\"arcadeButtonB\").getBoundingClientRect(),\r\n        };\r\n        Object.keys(boundingRects).forEach((key) => {\r\n          if (pos.x >= boundingRects[key].x && pos.x <= boundingRects[key].x + boundingRects[key].width && pos.y >= boundingRects[key].y && pos.y <= boundingRects[key].y + boundingRects[key].height) {\r\n            keys.push(key);\r\n          }\r\n        })\r\n        Object.keys(keyboard).forEach((key) => {\r\n          if (keys.includes(key)) {\r\n            controls[key] = true;\r\n          } else {\r\n            controls[key] = false;\r\n          }\r\n        })\r\n      })\r\n    }\r\n  };\r\n\r\n  const handleContextMenu = (event, target) => {\r\n    let content = {};\r\n    event.preventDefault();\r\n    if (target === \"keypad\") {\r\n      content = {\r\n        \"Hide\": { action: () => { setShowControls(false); } },\r\n      }\r\n    } else if (target === \"canvas\") {\r\n      if (gameChoice !== \"None\") {\r\n        let playpause = gameState === \"Play\" ? \"Pause\" : \"Play\";\r\n        content = {\r\n          \"Play/Pause\": { action: () => { setGameState(playpause); } },\r\n          \"New Game\": { action: () => { setGameState(\"Restart\"); } },\r\n        }\r\n      }\r\n    }\r\n    contextMenu.setOpen();\r\n    contextMenu.setPosition(event.clientX, event.clientY);\r\n    contextMenu.setContent(content);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (gameState === \"Play\") {\r\n      setPlayButtonFlag(false);\r\n    } else {\r\n      setPlayButtonFlag(true);\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(()=>{\r\n    if(controls.eject){\r\n      setGameChoice(\"None\");\r\n      setGameState(\"Start\");\r\n    }\r\n  },[controls.eject])\r\n\r\n  useEffect(() => {\r\n    const args = {\r\n      gameState: gameState,\r\n      setGameState: setGameState,\r\n      showControls: showControls,\r\n      setShowControls: setShowControls,\r\n      showKeybindDialog: showKeybindDialog,\r\n      setShowKeybindDialog: setShowKeybindDialog\r\n    }\r\n    handleAction(action, setAction, appDialog, setAppDialog, args);\r\n  }, [action]);\r\n\r\n  useEffect(() => {\r\n    const args = {\r\n      gameState: gameState,\r\n      showControls: showControls,\r\n      gameChoice: gameChoice\r\n    };\r\n    handleTopMenu(appMenu, setAppMenu, args);\r\n  }, [gameState, gameChoice, showControls]);\r\n\r\n  return (\r\n    <div id=\"arcadeContainer\">\r\n      <div\r\n        id=\"arcadeCanvasContainer\" \r\n        style={{ transform: `scale(${canvasZoom})` }}\r\n        ref={canvasContainer}\r\n        onContextMenu={(e) => handleContextMenu(e, \"canvas\")}\r\n      >\r\n        {gameChoice === \"None\" ?\r\n          <MainMenu controls={controls} setGameChoice={setGameChoice} setGameState={setGameState} canvasZoom={canvasZoom} /> :\r\n          gameChoice === \"Snake\" ? (\r\n            <Snake controls={controls} isSelected={isSelected} gameState={gameState} setGameState={setGameState} canvasZoom={canvasZoom} />\r\n          ) :\r\n            gameChoice === \"Breakout\" ? (\r\n              <Breakout controls={controls} isSelected={isSelected} gameState={gameState} setGameState={setGameState} canvasZoom={canvasZoom} />\r\n            ) :\r\n              gameChoice === \"Space Invaders\" ? (\r\n                <SpaceInvaders controls={controls} isSelected={isSelected} gameState={gameState} setGameState={setGameState} canvasZoom={canvasZoom} />\r\n              ) : (\r\n                <></>\r\n              )}\r\n      </div>\r\n      {showControls &&\r\n        <>\r\n          <div id=\"arcadeZoomControls\">\r\n            <div\r\n              id=\"arcadeZoomInButton\"\r\n              className=\"arcadeButton arcadeButtonOff\"\r\n              onClick={() => {if(canvasZoom < 2) {setCanvasZoom(canvasZoom + 0.1)}}}\r\n            >\r\n              <BsZoomIn />\r\n            </div>\r\n            <div\r\n              id=\"arcadeZoomOutButton\"\r\n              className=\"arcadeButton arcadeButtonOff\"\r\n              onClick={() => {if(canvasZoom > 0.1) {setCanvasZoom(canvasZoom - 0.1)}}}\r\n            >\r\n              <BsZoomOut />\r\n            </div>\r\n          </div>\r\n          <div id=\"arcadeStateControls\">\r\n            <div\r\n              id=\"arcadeEjectButton\"\r\n              className=\"arcadeButton arcadeButtonOff\"\r\n              onClick={() => { setGameChoice(\"None\"); setGameState(\"Start\"); }}\r\n            >\r\n              <BsEjectFill />\r\n            </div>\r\n            <div\r\n              id=\"arcadePlayButton\"\r\n              className=\"arcadeButton arcadeButtonOff\"\r\n              onClick={() => {\r\n                handleScreenButton(\"pause\", \"keydown\", false);\r\n                setTimeout(() => handleScreenButton(\"pause\", \"keyup\", false), 50);\r\n              }}\r\n            >\r\n              {playButtonFlag ? <BsFillPlayFill /> : <BsPauseFill />}\r\n            </div>\r\n          </div>\r\n          <div id=\"arcadeArrowControls\">\r\n            <div\r\n              id=\"arcadeButtonLeft\"\r\n              className={controls.left ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n              onMouseDown={() => handleScreenButton(\"left\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"left\", \"keyup\", true)}\r\n              onTouchStart={(e) => {e.preventDefault();handleTouchEvent(e, \"left\")}}\r\n              onTouchMove={(e) => {e.preventDefault();handleTouchEvent(e, \"left\")}}\r\n              onTouchEnd={(e) => {e.preventDefault();handleTouchEvent(e, \"left\")}}\r\n              onTouchCancel={(e) => {e.preventDefault();handleTouchEvent(e, \"left\")}}\r\n            >\r\n              <FaArrowLeft />\r\n            </div>\r\n            <div>\r\n              <div\r\n                id=\"arcadeButtonUp\"\r\n                className={controls.up ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n                onMouseDown={() => handleScreenButton(\"up\", \"keydown\", true)}\r\n                onMouseUp={() => handleScreenButton(\"up\", \"keyup\", true)}\r\n                onTouchStart={(e) => {e.preventDefault();handleTouchEvent(e, \"up\")}}\r\n                onTouchMove={(e) => {e.preventDefault();handleTouchEvent(e, \"up\")}}\r\n                onTouchEnd={(e) => {e.preventDefault();handleTouchEvent(e, \"up\")}}\r\n                onTouchCancel={(e) => {e.preventDefault();handleTouchEvent(e, \"up\")}}\r\n              >\r\n                <FaArrowUp />\r\n              </div>\r\n              <div\r\n                id=\"arcadeButtonDown\"\r\n                className={controls.down ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n                onMouseDown={() => handleScreenButton(\"down\", \"keydown\", true)}\r\n                onMouseUp={() => handleScreenButton(\"down\", \"keyup\", true)}\r\n                onTouchStart={(e) => {e.preventDefault();handleTouchEvent(e, \"down\")}}\r\n                onTouchMove={(e) => {e.preventDefault();handleTouchEvent(e, \"down\")}}\r\n                onTouchEnd={(e) => {e.preventDefault();handleTouchEvent(e, \"down\")}}\r\n                onTouchCancel={(e) => {e.preventDefault();handleTouchEvent(e, \"down\")}}\r\n              >\r\n                <FaArrowDown />\r\n              </div>\r\n            </div>\r\n            <div\r\n              id=\"arcadeButtonRight\"\r\n              className={controls.right ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n              onMouseDown={() => handleScreenButton(\"right\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"right\", \"keyup\", true)}\r\n              onTouchStart={(e) => {e.preventDefault();handleTouchEvent(e, \"right\")}}\r\n              onTouchMove={(e) => {e.preventDefault();handleTouchEvent(e, \"right\")}}\r\n              onTouchEnd={(e) => {e.preventDefault();handleTouchEvent(e, \"right\")}}\r\n              onTouchCancel={(e) => {e.preventDefault();handleTouchEvent(e, \"right\")}}\r\n            >\r\n              <FaArrowRight />\r\n            </div>\r\n          </div>\r\n          <div id=\"arcadeFireControls\">\r\n            <div id=\"arcadeButtonA\"\r\n              className={controls.one ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n              onMouseDown={() => handleScreenButton(\"one\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"one\", \"keyup\", true)}\r\n              onTouchStart={(e) => {e.preventDefault();handleTouchEvent(e, \"one\")}}\r\n              onTouchMove={(e) => {e.preventDefault();handleTouchEvent(e, \"one\")}}\r\n              onTouchEnd={(e) => {e.preventDefault();handleTouchEvent(e, \"one\")}}\r\n              onTouchCancel={(e) => {e.preventDefault();handleTouchEvent(e, \"one\")}}\r\n            >A</div>\r\n            <div id=\"arcadeButtonB\"\r\n              className={controls.two ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton arcadeButtonOff\"}\r\n              onMouseDown={() => handleScreenButton(\"two\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"two\", \"keyup\", true)}\r\n              onTouchStart={(e) => {e.preventDefault();handleTouchEvent(e, \"two\")}}\r\n              onTouchMove={(e) => {e.preventDefault();handleTouchEvent(e, \"two\")}}\r\n              onTouchEnd={(e) => {e.preventDefault();handleTouchEvent(e, \"two\")}}\r\n              onTouchCancel={(e) => {e.preventDefault();handleTouchEvent(e, \"two\")}}\r\n            >B</div>\r\n          </div>\r\n        </>\r\n      }\r\n      <KeybindDialog\r\n        showKeybindDialog={showKeybindDialog}\r\n        setShowKeybindDialog={setShowKeybindDialog}\r\n        setAppDialog={setAppDialog}\r\n        keyboard={keyboard}\r\n        setKeyboard={setKeyboard}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport default function Controls(isSelected, keyboard) {\r\n\r\n  var [command, setCommand] = useState({\r\n    up: false,\r\n    down: false,\r\n    left: false,\r\n    right: false,\r\n    one: false,\r\n    two: false,\r\n    pause: false,\r\n    eject: false,\r\n  });\r\n  const validateKey = useCallback(\r\n    (key, state) => {\r\n      const keyArray = Object.keys(keyboard);\r\n      for (let i = 0; i < keyArray.length; i++) {\r\n        let currKeyArray = keyboard[keyArray[i]].keys;\r\n        for (let j = 0; j < currKeyArray.length; j++) {\r\n          if (currKeyArray[j] === key) {\r\n            setCommand((c) => ({ ...c, [keyArray[i]]: state }));\r\n          }\r\n        }\r\n      }\r\n    },\r\n    [keyboard],\r\n  );\r\n\r\n  const handleKeyPress = useCallback(\r\n    (event) => {\r\n      validateKey(event.key, true);\r\n    },\r\n    [validateKey],\r\n  );\r\n  const handleKeyRelease = useCallback(\r\n    (event) => {\r\n      validateKey(event.key, false);\r\n    },\r\n    [validateKey],\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [handleKeyPress]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keyup\", handleKeyRelease);\r\n    return () => {\r\n      document.removeEventListener(\"keyup\", handleKeyRelease);\r\n    };\r\n  }, [handleKeyRelease]);\r\n\r\n  useEffect(() => {\r\n    if (!isSelected) {\r\n      setCommand({ ...command, pause: true });\r\n    }\r\n  }, [isSelected]);\r\n\r\n  return command;\r\n}\r\n"],"names":["MainMenu","_ref","controls","setGameState","setGameChoice","currentSelection","setCurrentSelection","useState","gamelist","SnakeSplash","BreakoutSplash","SpaceInvadersSplash","useEffect","down","Object","keys","length","up","one","_jsx","children","_jsxs","id","width","height","map","name","index","src","style","background","color","onClick","handleCanvasBorders","ctx","fillStyle","fillRect","frequency","frameRate","rows","cols","defaultPlayerBar","x","y","w","speed","defaultBall","r","dirX","dirY","defaultFirework","t","Breakout","isSelected","gameState","canvasRef","useRef","Maps","setMaps","JSON","parse","stringify","LevelsJSON","gameLevel","setGameLevel","currLevel","setCurrLevel","levelHealth","setLevelHealth","Bars","frameCount","setFrameCount","winFrameCount","setWinFrameCount","playerBar","setPlayerBar","create","ball","setBall","firework1","firework2","firework3","firework4","firework5","firework6","firework7","score","setScore","time","setTime","startTime","setStartTime","pause","left","right","performance","now","clearDraws","canvas","drawFirework","blockWidth","blockHeight","currBall","i","scale","beginPath","arc","Math","cos","PI","sin","fill","closePath","drawLevelUp","font","fillText","drawPlayerBar","newX","newY","drawHitbar","obj","h","drawLevel","Matrix","barHit","bar","s","checkColision","drawBall","context","current","getContext","animationFrameId","drawStartGame","setTimeout","drawPauseGame","drawGameOver","floor","handleFireworks","currFirework","random","drawWinGame","render","window","requestAnimationFrame","cancelAnimationFrame","ref","onTouchStart","e","preventDefault","onTouchMove","onTouchEnd","onTouchCancel","fruit","setFruit","fruitPos","snakeHeadPos","direction","previousDir","setPreviousDir","snakeBody","setSnakeBody","initialPos","setInitialPos","undefined","drawBoard","canvasWidth","canvasHeight","drawFruit","overlapX","overlapY","flagX","flagY","drawSnakeHead","unshift","drawSnakeBody","pop","drawEndGame","console","log","blockSize","defaultInvaderOne","row","life","currSprite","totalSprites","hit","sprites","defaultInvaderTwo","defaultInvaderThree","defaultBonusInvader","defaultPlayer","move","shooting","cooling","cooldown","defaultBlock","defaultPlayerBullet","defaultInvaderBullet","SpaceInvaders","lives","setLives","level","setLevel","enemies","setEnemies","enemyMoveParam","setEnemyMoveParam","entities","setEntities","bullets","setBullets","explosions","setExplosions","explosionLifetime","player","setPlayer","drawSprite","object","j","drawObjects","redshift","greenshift","blueshift","decay","spread","radius","drawExplosions","setUpLevel","currEntity","newEntities","newEnemyMoveParam","push","Enemies","createExplosion","target","newExplosion","invaderHit","invaderIndex","splice","blockHit","blockIndex","checkColisions","bulletIndex","colision","handleEvents","spawnBonusInvader","newEntity","playerShooting","newBullet","invaderShooting","chance","invaderShooter","handleBullets","newArray","handleExplosions","invaderMove","drawBottomText","handleAction","action","setAction","appDialog","setAppDialog","args","setShowKeybindDialog","showKeybindDialog","setShowControls","showControls","handleTopMenu","appMenu","setAppMenu","gameChoice","KeybindDialog","keyboard","setKeyboard","newKeybinds","setNewKeybinds","structuredClone","keybindState","setKeybindState","update","setUpdate","info","key","display","flexDirection","marginLeft","justifyContent","alignItems","textAlign","keybind","border","onContextMenu","removeKeybind","changeKeybind","Promise","resolve","reject","document","addEventListener","removeEventListener","then","value","catch","error","addNewKeybind","actions","Confirm","Reset","Cancel","title","_Fragment","Arcade","props","contextMenu","canvasContainer","active","two","eject","command","setCommand","validateKey","useCallback","state","keyArray","currKeyArray","c","handleKeyPress","event","handleKeyRelease","Controls","canvasZoom","setCanvasZoom","playButtonFlag","setPlayButtonFlag","handleScreenButton","repeat","dispatchEvent","KeyboardEvent","handleTouchEvent","type","values","touches","forEach","pos","clientX","clientY","boundingRects","getElementById","getBoundingClientRect","includes","transform","handleContextMenu","content","playpause","setOpen","setPosition","setContent","Snake","className","BsZoomIn","BsZoomOut","BsEjectFill","BsFillPlayFill","BsPauseFill","onMouseDown","onMouseUp","FaArrowLeft","FaArrowUp","FaArrowDown","FaArrowRight"],"sourceRoot":""}