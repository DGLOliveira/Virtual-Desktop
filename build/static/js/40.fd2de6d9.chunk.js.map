{"version":3,"file":"static/js/40.fd2de6d9.chunk.js","mappings":"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","sources":["Apps/Definitions/Pages/Global.jsx","Apps/Definitions/Pages/Desktop.jsx","Apps/Definitions/Pages/Windows/Window.jsx","Apps/Definitions/Pages/Windows/Menu.jsx","Apps/Definitions/Pages/Windows/App.jsx","Apps/Definitions/Pages/Windows/Dialog.jsx","Apps/Definitions/Pages/Taskbar/TaskBar.jsx","Apps/Definitions/Pages/Taskbar/Start.jsx","Apps/Definitions/Pages/Taskbar/StartMenu.jsx","Apps/Definitions/Pages/Taskbar/LiveApps.jsx","Apps/Definitions/Pages/Taskbar/Tray.jsx","Apps/Definitions/Pages/Taskbar/Window.jsx","Apps/Definitions/Pages/ContextMenu.jsx","Apps/Definitions/index.jsx","System/Desktop/Scenario.jsx","System/GlobalComponents/ColorPicker/Converters/rgbToHsl.js","System/GlobalComponents/ColorPicker/Converters/rgbaToHsla.js","System/GlobalComponents/ColorPicker/ColorPicker.jsx","System/GlobalComponents/ColorPicker/Converters/hexToRgba.js","System/GlobalComponents/ColorPicker/Converters/hexToRgb.js","System/GlobalComponents/ColorPicker/Converters/nameToHsl.js"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"./../../../System/ThemeManager/context.jsx\";\r\nimport { DeviceContext } from \"./../../../System/DeviceManager/context.jsx\";\r\n\r\nexport const Global = () => {\r\n    const theme = useContext(ThemeContext);\r\n    const device = useContext(DeviceContext);\r\n    const root = document.documentElement;\r\n    /*\r\n    Disabled due to interference with theme change \r\n        const fontFamilyList = [\r\n            \"Arial\",\r\n            \"Times New Roman\",\r\n            \"Monospace\",\r\n            \"Verdana\",\r\n            \"Georgia\",\r\n            \"Courier New\",\r\n            \"Tahoma\",\r\n            \"Garamond\",\r\n            \"Trebuchet MS\",\r\n            \"Impact\",\r\n            \"Helvetica\",\r\n            \"Arial Black\",\r\n            \"Comic Sans MS\",\r\n            \"Lucida Console\",\r\n            \"Lucida Sans Unicode\",\r\n            \"Lucida Sans\",\r\n            \"Palatino Linotype\",\r\n            \"Book Antiqua\",\r\n            \"Arial Narrow\",\r\n            \"Arial Rounded MT Bold\",\r\n            \"Brush Script MT\",\r\n            \"Century Gothic\",\r\n            \"Century Schoolbook\"\r\n        ];\r\n        const [fontFamily, setFontFamily] = useState(\r\n            getComputedStyle(root).getPropertyValue(\"--GeneralFontFamily\"));\r\n        \r\n        useEffect(() => {\r\n            root.style.setProperty(\"--GeneralFontFamily\", fontFamily);\r\n        }, [fontFamily]);\r\n    \r\n        useEffect(()=>{\r\n                setFontFamily(getComputedStyle(root).getPropertyValue(\"--GeneralFontFamily\"));\r\n        },[theme.theme]);\r\n        \r\n                    <div>\r\n                        <label>Font Family:</label>\r\n                        <select\r\n                            value={fontFamily}\r\n                            onChange={(e) => setFontFamily(e.target.value)}\r\n                        >\r\n                            {fontFamilyList.sort().map((font) => (\r\n                                <option key={font} style={{ fontFamily: font }}>\r\n                                    {font}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>*/\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Device</legend>\r\n                <div>\r\n                    <label>Type:</label>\r\n                    <select\r\n                        value={device.deviceType}\r\n                        onChange={(e) => device.setDeviceType(e.target.value)}\r\n                    >\r\n                        {device.deviceTypeList.map((device) => (\r\n                            <option key={device}>{device}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Global Theme</legend>\r\n                <div>\r\n                    <label>Theme:</label>\r\n                    <select\r\n                        value={theme.theme}\r\n                        onChange={(e) => theme.setTheme(e.target.value)}\r\n                    >\r\n                        {theme.themeList.map((theme) => (\r\n                            <option key={theme}>{theme}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Dark Mode:</label>\r\n                    <select\r\n                        value={theme.mode}\r\n                        onChange={(e) => theme.setMode(e.target.value)}\r\n                    >\r\n                        {theme.modeList.map((mode) => (\r\n                            <option key={mode}>{mode}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { BackgroundContext } from \"../../../System/Desktop/BackgroundContext.js\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const DesktopPreview = () => {\r\n  return (\r\n    <>\r\n      <div className=\"desktopShortcut\" style={{ zIndex: 1 }}>\r\n        <FcGlobe className=\"desktopIcon\" />\r\n        Shortcut\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Desktop = () => {\r\n  const background = useContext(BackgroundContext);\r\n  const [backgroundMenu, setBackgroundMenu] = useState(background.state.active);\r\n  var root = document.querySelector(\":root\");\r\n\r\n  const [desktopBkgrColor, setDesktopBkgrColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrColor\", desktopBkgrColor);\r\n  }, [desktopBkgrColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrImage, setDesktopBkgrImage] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrImage\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrImage\", desktopBkgrImage);\r\n  }, [desktopBkgrImage]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrSize, setDesktopBkgrSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrSize\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrSize\", desktopBkgrSize);\r\n  }, [desktopBkgrSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrPosition, setDesktopBkgrPosition] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrPosition\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrPosition\", desktopBkgrPosition);\r\n  }, [desktopBkgrPosition]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrRepeat, setDesktopBkgrRepeat] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrRepeat\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrRepeat\", desktopBkgrRepeat);\r\n  }, [desktopBkgrRepeat]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopFontSize, setDesktopFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopFontSize\", desktopFontSize + \"px\");\r\n  }, [desktopFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopIconSize, setDesktopIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopIconSize\", desktopIconSize + \"px\");\r\n  }, [desktopIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n\r\n  //Upload Image\r\n  const uploadImage = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = (readerEvent) => {\r\n      background.setImage(\r\n        readerEvent.target.result,\r\n        background.state.image.position,\r\n        background.state.image.size,\r\n        background.state.image.repeat);\r\n    }\r\n  };\r\n\r\n  //Update background context\r\n  useEffect(() => {\r\n    if (background.state.active === \"color\") {\r\n      if (background.state.color.type === \"color\") {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(\"none\");\r\n      } else if (background.state.color.type === \"gradient\") {\r\n        if (background.state.color.gradient.type === \"linear\") {\r\n          setDesktopBkgrColor(`linear-gradient(${background.state.color.gradient.degree}deg, ${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        } else if (background.state.color.gradient.type === \"radial\") {\r\n          setDesktopBkgrColor(`radial-gradient(${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        }\r\n      }\r\n    } else if (background.state.active === \"image\") {\r\n      if (background.state.image.url) {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(`url(${background.state.image.url})`);\r\n        setDesktopBkgrPosition(background.state.image.position);\r\n        setDesktopBkgrSize(background.state.image.size);\r\n        setDesktopBkgrRepeat(background.state.image.repeat);\r\n      }\r\n    }\r\n  }, [background.state]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Background:\r\n          <div>\r\n            <select value={backgroundMenu} onChange={(e) => setBackgroundMenu(e.target.value)}>\r\n              <option value=\"color\">Color</option>\r\n              <option value=\"image\">Image</option>\r\n              <option value=\"scenario\">3D Scenario</option>\r\n            </select>\r\n          </div></legend>\r\n        {backgroundMenu === \"color\" ? (\r\n          <>\r\n            <button\r\n              className={\r\n                background.state.active === \"color\"\r\n                  ? \"defFormButtonON\"\r\n                  : \"defFormButton\"\r\n              }\r\n              onClick={() => background.setActive(\"color\")}\r\n            >\r\n              Use Simple Color\r\n            </button>\r\n            <div>\r\n              <label>Set Background Color: </label>\r\n              <ColorPicker\r\n                color={desktopBkgrColor}\r\n                setColor={setDesktopBkgrColor}\r\n                useAlpha={false}\r\n              /></div>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"image\" ? (\r\n          <>\r\n            <button\r\n              className={\r\n                background.state.active === \"image\"\r\n                  ? \"defFormButtonON\"\r\n                  : \"defFormButton\"\r\n              }\r\n              onClick={() => background.setActive(\"image\")}\r\n            >\r\n              Use Image\r\n            </button>\r\n            <div>\r\n              <label htmlFor=\"imageUpload\">Upload Image: </label>\r\n              <input\r\n                id=\"imageUpload\"\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={(e) => { uploadImage(e.target.files[0]) }} />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"imagePosition\">Position: </label>\r\n              <select id=\"imagePosition\"\r\n                value={background.state.image.position}\r\n                onChange={(e) => {\r\n                  background.setImage(\r\n                    background.state.image.file,\r\n                    e.target.value,\r\n                    background.state.image.size,\r\n                    background.state.image.repeat\r\n                  );\r\n                  setDesktopBkgrPosition(e.target.value);\r\n                }}>\r\n                <option value=\"top\">Top</option>\r\n                <option value=\"left top\">Top Left</option>\r\n                <option value=\"right top\">Top Right</option>\r\n                <option value=\"center\">Center</option>\r\n                <option value=\"bottom\">Bottom</option>\r\n                <option value=\"left bottom\">Bottom Left</option>\r\n                <option value=\"right bottom\">Bottom Right</option>\r\n                <option value=\"left\">Left</option>\r\n                <option value=\"right\">Right</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"imageSize\">Size: </label>\r\n              <select id=\"imageSize\"\r\n                value={background.state.image.size}\r\n                onChange={(e) => {\r\n                  background.setImage(\r\n                    background.state.image.file,\r\n                    background.state.image.position,\r\n                    e.target.value,\r\n                    background.state.image.repeat\r\n                  );\r\n                  setDesktopBkgrSize(e.target.value);\r\n                }}>\r\n                <option value=\"auto\">Auto</option>\r\n                <option value=\"contain\">Contain</option>\r\n                <option value=\"cover\">Cover</option>\r\n                <option value=\"100vw 100vh\">Stretch</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"imageRepeat\">Repeat: </label>\r\n              <select id=\"imageRepeat\"\r\n                value={background.state.image.repeat}\r\n                onChange={(e) => {\r\n                  background.setImage(\r\n                    background.state.image.file,\r\n                    background.state.image.position,\r\n                    background.state.image.size,\r\n                    e.target.value\r\n                  );\r\n                  setDesktopBkgrRepeat(e.target.value);\r\n                }}\r\n              >\r\n                <option value=\"no-repeat\">No Repeat</option>\r\n                <option value=\"repeat\">Repeat</option>\r\n                <option value=\"repeat-x\">Repeat X</option>\r\n                <option value=\"repeat-y\">Repeat Y</option>\r\n              </select>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"Shader\" ? <></> : <></>}\r\n        {backgroundMenu === \"scenario\" ? (\r\n          <>\r\n            <button\r\n              className={\r\n                background.state.active === \"scenario\"\r\n                  ? \"defFormButtonON\"\r\n                  : \"defFormButton\"\r\n              }\r\n              onClick={() => background.setActive(\"scenario\")}\r\n            >\r\n              Use Scenario\r\n            </button>\r\n            <fieldset>\r\n              <legend\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"sun\"].isActive}\r\n                  onChange={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n                />\r\n                Sun & Sky\r\n              </legend>\r\n              {background.state[\"scenario\"][\"sun\"].isActive &&\r\n                <><div>\r\n                  <label>Inclination:</label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                </div>\r\n                  <div>\r\n                    <label>Azimuth:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Turbidity:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Rayleight:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Ambient Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                <ColorPicker\r\n                  color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n                  setColor={(color) =>\r\n                    background.setScenario(\"ambientLight\", \"color\", color)}\r\n                  useAlpha={false}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Directional Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                <ColorPicker\r\n                  color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n                  setColor={(color) =>\r\n                    background.setScenario(\"directionalLight\", \"color\", color)}\r\n                  useAlpha={false}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"stars\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n                />\r\n                Stars\r\n              </legend>\r\n              {background.state[\"scenario\"][\"stars\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Star Count:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"100000\"\r\n                      value={background.state[\"scenario\"][\"stars\"].count}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"stars\", \"count\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"fog\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}\r\n                />\r\n                Fog\r\n              </legend>\r\n              {background.state[\"scenario\"][\"fog\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Color:</label>\r\n                    <ColorPicker\r\n                      color={background.state[\"scenario\"][\"fog\"].color}\r\n                      setColor={(color) => background.setScenario(\"fog\", \"color\", color)}\r\n                      useAlpha={false}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Near:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Far:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend> Terrain </legend>\r\n              <div>\r\n                <label>Sea:</label>\r\n                <input type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"ocean\"].isActive}\r\n                  onChange={() => background.setScenario(\"ocean\", \"isActive\", !background.state[\"scenario\"][\"ocean\"].isActive)}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Dunes:</label>\r\n                <input type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"desert\"].isActive}\r\n                  onChange={() => background.setScenario(\"desert\", \"isActive\", !background.state[\"scenario\"][\"desert\"].isActive)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Shortcuts</legend>\r\n        <div>\r\n          <label>Icon Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={36}\r\n            max={120}\r\n            step=\"1\"\r\n            value={Number(desktopIconSize)}\r\n            onChange={(e) => setDesktopIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={32}\r\n            step=\"1\"\r\n            value={Number(desktopFontSize)}\r\n            onChange={(e) => setDesktopFontSize(e.target.value)}\r\n          /></div>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\nimport {\r\n  FaRegWindowMinimize,\r\n  FaWindowMaximize,\r\n} from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { RiCloseLargeLine } from \"react-icons/ri\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const WindowPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  return (\r\n    <>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"10px\",\r\n          left: \"10px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          backgroundColor: \"var(--WindowBkgrColorInactive)\",\r\n          borderColor: \"var(--WindowBorderColorInactive)\"\r\n        }}\r\n        className=\"app appInactive\"\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowTopBarFontColorInactive)\",\r\n            backgroundColor: \"var(--WindowTopBarBkgrColorInactive)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Inactive</h1>\r\n          {themeContext.topBarIconTheme === \"Default\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverRed \">\r\n                <AiOutlineClose />\r\n              </button></>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Aero\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroMinimize\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroMaximize\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroClose \">\r\n                <AiOutlineClose />\r\n              </button></>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Aqua\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaGreen\">+</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaYellow\">-</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaRed\">x</button>\r\n            </>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Classic\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonClassic\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonClassic\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonClassic \">\r\n                <RiCloseLargeLine />\r\n              </button>\r\n            </>\r\n          }\r\n        </app-top-bar>\r\n        <app-container\r\n          style={{\r\n            color: \"var(--AppFontColorInactive)\",\r\n            backgroundColor: \"var(--AppBkgrColorInactive)\",\r\n            borderColor: \"var(--AppBorderColorInactive)\"\r\n          }}></app-container>\r\n      </app-window>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50px\",\r\n          left: \"60px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          backgroundColor: \"var(--WindowBkgrColor)\"\r\n        }}\r\n        className=\"app\"\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowTopBarFontColor)\",\r\n            backgroundColor: \"var(--WindowTopBarBkgrColor)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Active</h1>\r\n          {themeContext.topBarIconTheme === \"Default\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverRed\">\r\n                <AiOutlineClose />\r\n              </button></>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Aero\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroMinimize\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroMaximize\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonAero appTopBarButtonAeroClose \">\r\n                <AiOutlineClose />\r\n              </button></>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Aqua\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaGreen\">+</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaYellow\">-</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaRed\">x</button>\r\n            </>\r\n          }\r\n          {themeContext.topBarIconTheme === \"Classic\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonClassic\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonClassic\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonClassic \">\r\n                <RiCloseLargeLine />\r\n              </button>\r\n            </>\r\n          }\r\n        </app-top-bar>\r\n        <app-container\r\n          style={{\r\n            color: \"var(--AppFontColor)\",\r\n            backgroundColor: \"var(--AppBkgrColor)\",\r\n            borderColor: \"var(--AppBorderColor)\"\r\n          }}></app-container>\r\n      </app-window>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Window = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  var root = document.querySelector(\":root\");\r\n\r\n  const [windowFontColor, setWindowFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowFontColor\", windowFontColor);\r\n  }, [windowFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [windowFontColorInactive, setWindowFontColorInactive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowFontColorInactive\", windowFontColorInactive);\r\n  }, [windowFontColorInactive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [fontSize, setFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontSize\", fontSize + \"px\");\r\n  }, [fontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarTitleAlign, setTopbarTitleAlign] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontAlign\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontAlign\", topbarTitleAlign);\r\n  }, [topbarTitleAlign]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarFontColor, setTopbarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontColor\", topbarFontColor);\r\n  }, [topbarFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [bkgColor, setBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBkgrColor\", bkgColor);\r\n  }, [bkgColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [windowPadding, setWindowPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowPadding\", windowPadding + \"px\");\r\n  }, [windowPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarFlexDirection, setTopbarFlexDirection] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFlexDirection\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFlexDirection\", topbarFlexDirection);\r\n  }, [topbarFlexDirection]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarBkgColor, setTopbarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarBkgrColor\", topbarBkgColor);\r\n  }, [topbarBkgColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topBarHeight, setTopBarHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarHeight\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarHeight\", topBarHeight + \"px\");\r\n  }, [topBarHeight]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topBarIconSize, setTopBarIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarIconSize\", topBarIconSize + \"px\");\r\n  }, [topBarIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderWidth, setBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderWidth\", borderWidth + \"px\");\r\n  }, [borderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderRadius, setBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderRadius\", borderRadius + \"px\");\r\n  }, [borderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderType, setBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderType\", borderType);\r\n  }, [borderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderColor, setBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderColor\", borderColor);\r\n  }, [borderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowXOffset, setShadowXOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowXOffset\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowXOffset\", shadowXOffset + \"px\");\r\n  }, [shadowXOffset]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowYOffset, setShadowYOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowYOffset\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowYOffset\", shadowYOffset + \"px\");\r\n  }, [shadowYOffset]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowBlur, setShadowBlur] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowBlur\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowBlur\", shadowBlur + \"px\");\r\n  }, [shadowBlur]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowSpread, setShadowSpread] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowSpread\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowSpread\", shadowSpread + \"px\");\r\n  }, [shadowSpread]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowColor, setShadowColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowColor\", shadowColor);\r\n  }, [shadowColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [inactiveBorderColor, setInactiveBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderColorInactive\", inactiveBorderColor);\r\n  }, [inactiveBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [inactiveTopBarBkgColor, setInactiveTopBarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgrColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarBkgrColorInactive\", inactiveTopBarBkgColor);\r\n  }, [inactiveTopBarBkgColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarFontColorInactive, setTopbarFontColorInactive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontColorInactive\", topbarFontColorInactive);\r\n  }, [topbarFontColorInactive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [inactiveBkgColor, setInactiveBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgrColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBkgrColorInactive\", inactiveBkgColor);\r\n  }, [inactiveBkgColor]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Window</legend>\r\n        <div>\r\n          <label>Background Effect:</label>\r\n          <select\r\n            value={themeContext.windowBackgroundFX}\r\n            onChange={(e) => themeContext.setWindowBackgroundFX(e.target.value)}\r\n          >\r\n            {themeContext.backgroundFXList.map((backgroundFX) => (\r\n              <option key={backgroundFX} value={backgroundFX}>\r\n                {backgroundFX}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <fieldset>\r\n          <legend>Top Bar</legend>\r\n          <div>\r\n            <label>Icon Theme:</label>\r\n            <select\r\n              value={themeContext.topBarIconTheme}\r\n              onChange={(e) => themeContext.setTopBarIconTheme(e.target.value)}\r\n            >\r\n              {themeContext.topBarIconThemeList.map((iconTheme) => (\r\n                <option key={iconTheme} value={iconTheme}>\r\n                  {iconTheme}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Direction:</label>\r\n            <select\r\n              value={topbarFlexDirection}\r\n              onChange={(e) => setTopbarFlexDirection(e.target.value)}\r\n            >\r\n              <option value=\"row\">Close on the Right</option>\r\n              <option value=\"row-reverse\">Close on the Left</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Align Title</label>\r\n            <select\r\n              value={topbarTitleAlign}\r\n              onChange={(e) => setTopbarTitleAlign(e.target.value)}\r\n            >\r\n              <option value=\"left\">Left</option>\r\n              <option value=\"center\">Center</option>\r\n              <option value=\"right\">Right</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Height:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={20}\r\n              max={64}\r\n              step=\"1\"\r\n              value={topBarHeight}\r\n              onChange={(e) => setTopBarHeight(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Icon Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={16}\r\n              max={60}\r\n              step=\"1\"\r\n              value={topBarIconSize}\r\n              onChange={(e) => setTopBarIconSize(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={fontSize}\r\n              onChange={(e) => setFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Border Thickness:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={borderWidth}\r\n              onChange={(e) => setBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={20}\r\n              step=\"1\"\r\n              value={borderRadius}\r\n              onChange={(e) => setBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Type:</label>\r\n            <select\r\n              value={borderType}\r\n              onChange={(e) => setBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Padding:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={windowPadding}\r\n              onChange={(e) => setWindowPadding(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Shadow</legend>\r\n          <div>\r\n            <label>Y-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowYOffset}\r\n              onChange={(e) => setShadowYOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>X-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowXOffset}\r\n              onChange={(e) => setShadowXOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Spread</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowSpread}\r\n              onChange={(e) => setShadowSpread(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Blur</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowBlur}\r\n              onChange={(e) => setShadowBlur(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={shadowColor}\r\n              setColor={setShadowColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Active Window</legend>\r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={topbarBkgColor}\r\n              setColor={setTopbarBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={topbarFontColor}\r\n              setColor={setTopbarFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={bkgColor}\r\n              setColor={setBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color: </label>\r\n            <ColorPicker\r\n              color={windowFontColor}\r\n              setColor={setWindowFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={borderColor}\r\n              setColor={setBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Inactive Window</legend>\r\n\r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveTopBarBkgColor}\r\n              setColor={setInactiveTopBarBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={topbarFontColorInactive}\r\n              setColor={setTopbarFontColorInactive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBkgColor}\r\n              setColor={setInactiveBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color: </label>\r\n            <ColorPicker\r\n              color={windowFontColorInactive}\r\n              setColor={setWindowFontColorInactive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBorderColor}\r\n              setColor={setInactiveBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect, useContext, Fragment } from \"react\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const MenuPreview = () => {\r\n    const theme = useContext(ThemeContext);\r\n    const NavMenu = () => <nav\r\n        className=\"appMenuBar\"\r\n        style={{\r\n            backgroundColor: \"var(--WindowMenuNavBkgr)\"\r\n        }}\r\n    >\r\n        <Fragment>\r\n            <drop-down>\r\n                <ul>\r\n                    <li>\r\n                        <button>\r\n                            <div>Button</div>\r\n                            <span />\r\n                            <kbd>keybind</kbd>\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <button disabled>\r\n                            <div>Disabled Button</div>\r\n                            <span />\r\n                            <kbd>keybind</kbd>\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <hr />\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            <div>Checkbox</div>\r\n                            <span />\r\n                            <input type=\"checkbox\" />\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <hr />\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            <div>Checkbox 1</div>\r\n                            <span />\r\n                            <input type=\"radio\" name=\"radio\" />\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            <div>Checkbox 2</div>\r\n                            <span />\r\n                            <input type=\"radio\" name=\"radio\" />\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </drop-down>\r\n            <button>\r\n                Menu 1\r\n            </button>\r\n        </Fragment>\r\n        <button>\r\n            Menu 3\r\n        </button>\r\n        <button>\r\n            Menu 4\r\n        </button>\r\n    </nav>;\r\n\r\n    return (\r\n        <>\r\n            <app-window\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: \"0px\",\r\n                    left: \"0px\",\r\n                    width: \"80%\",\r\n                    height: \"100%\",\r\n                    backgroundColor: \"var(--WindowBkgrColor)\",\r\n                    paddingTop: \"var(--WindowPadding)\",\r\n                }}\r\n                className=\"app\"\r\n            >\r\n                {theme.navMenuLocation === \"in top bar\" && <NavMenu />}\r\n                <app-container\r\n                    style={{\r\n                        color: \"var(--AppFontColor)\",\r\n                        backgroundColor: \"var(--AppBkgrColor)\",\r\n                        borderColor: \"var(--AppBorderColor)\"\r\n                    }}>\r\n                    {theme.navMenuLocation === \"in app\" && <NavMenu />}\r\n                </app-container>\r\n            </app-window>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const Menu = () => {\r\n    const root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n    const [navBkgrColor, setNavBkgrColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavBkgr\", navBkgrColor);\r\n    }, [navBkgrColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navBkgrColorInactive, setNavBkgrColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavBkgrInactive\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavBkgrInactive\", navBkgrColorInactive);\r\n    }, [navBkgrColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [backgroundColor, setBackgroundColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBkgr\", backgroundColor);\r\n    }, [backgroundColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuFontColor\", fontColor);\r\n    }, [fontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontSize, setFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuFontSize\", fontSize + \"px\");\r\n    }, [fontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderColor\", borderColor);\r\n    }, [borderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderWidth\", borderWidth + \"px\");\r\n    }, [borderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderRadius\", borderRadius + \"px\");\r\n    }, [borderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderType\", borderType);\r\n    }, [borderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverFontColor, setHoverFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuHoverColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuHoverColor\", hoverFontColor);\r\n    }, [hoverFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverBkgr, setHoverBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuHoverBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuHoverBkgr\", hoverBkgr);\r\n    }, [hoverBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBkgr, setNavButtonBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBkgr\", navButtonBkgr);\r\n    }, [navButtonBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonFontColor, setNavButtonFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonColor\", navButtonFontColor);\r\n    }, [navButtonFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonHoverBkgr, setNavButtonHoverBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonHoverBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonHoverBkgr\", navButtonHoverBkgr);\r\n    }, [navButtonHoverBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonHoverFontColor, setNavButtonHoverFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonHoverColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonHoverColor\", navButtonHoverFontColor);\r\n    }, [navButtonHoverFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderColor, setNavButtonBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderColor\", navButtonBorderColor);\r\n    }, [navButtonBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderWidth, setNavButtonBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderWidth\", navButtonBorderWidth + \"px\");\r\n    }), [navButtonBorderWidth];\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderRadius, setNavButtonBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderRadius\", navButtonBorderRadius + \"px\");\r\n    }, [navButtonBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderType, setNavButtonBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderType\", navButtonBorderType);\r\n    }, [navButtonBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Global</legend>\r\n                <div>\r\n                    <label>Font Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={11}\r\n                        max={30}\r\n                        step=\"1\"\r\n                        value={fontSize}\r\n                        onChange={(e) => setFontSize(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Position:</label>\r\n                    <select\r\n                        value={theme.navMenuLocation}\r\n                        onChange={(e) => theme.setNavMenuLocation(e.target.value)}\r\n                    >\r\n                        {theme.navMenuLocationList.map((location) => (\r\n                            <option value={location} key={location}>{location}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Navigation Bar</legend>\r\n                <div>\r\n                    <label>Nav Bar Background:</label>\r\n                    <ColorPicker\r\n                        color={navBkgrColor}\r\n                        setColor={setNavBkgrColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Nav Bar Background Inactive:</label>\r\n                    <ColorPicker\r\n                        color={navBkgrColorInactive}\r\n                        setColor={setNavBkgrColorInactive}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Navigation Buttons</legend>\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={navButtonFontColor}\r\n                        setColor={setNavButtonFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Font Color:</label>\r\n                    <ColorPicker\r\n                        color={navButtonHoverFontColor}\r\n                        setColor={setNavButtonHoverFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <legend>Background</legend>\r\n                    <ColorPicker\r\n                        color={navButtonBkgr}\r\n                        setColor={setNavButtonBkgr}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <legend>Hover Background</legend>\r\n                    <ColorPicker\r\n                        color={navButtonHoverBkgr}\r\n                        setColor={setNavButtonHoverBkgr}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                        color={navButtonBorderColor}\r\n                        setColor={setNavButtonBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={navButtonBorderWidth}\r\n                        onChange={(e) => setNavButtonBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={navButtonBorderRadius}\r\n                        onChange={(e) => setNavButtonBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select\r\n                        value={navButtonBorderType}\r\n                        onChange={(e) => setNavButtonBorderType(e.target.value)}\r\n                    >\r\n                        <option value=\"solid\">Solid</option>\r\n                        <option value=\"dotted\">Dotted</option>\r\n                        <option value=\"dashed\">Dashed</option>\r\n                        <option value=\"double\">Double</option>\r\n                        <option value=\"groove\">Groove</option>\r\n                        <option value=\"ridge\">Ridge</option>\r\n                        <option value=\"inset\">Inset</option>\r\n                        <option value=\"outset\">Outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n                <legend>Menu</legend>\r\n\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={fontColor}\r\n                        setColor={setFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Font Color:</label>\r\n                    <ColorPicker\r\n                        color={hoverFontColor}\r\n                        setColor={setHoverFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Background Color:</label>\r\n                    <ColorPicker\r\n                        color={backgroundColor}\r\n                        setColor={setBackgroundColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Background:</label>\r\n                    <ColorPicker\r\n                        color={hoverBkgr}\r\n                        setColor={setHoverBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};","import { useState, useEffect, useContext } from \"react\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const AppPreview = () => {\r\n    const themeContext = useContext(ThemeContext);\r\n    return (\r\n        <>\r\n            <app-window\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: \"10px\",\r\n                    left: \"10px\",\r\n                    width: \"80%\",\r\n                    height: \"120px\",\r\n                    backgroundColor: \"var(--WindowBkgrColorInactive)\",\r\n                    borderColor: \"var(--WindowBorderColorInactive)\"\r\n                }}\r\n                className=\"app appInactive\"\r\n            >\r\n                <app-top-bar\r\n                    style={{\r\n                        color: \"var(--WindowTopBarFontColorInactive)\",\r\n                        backgroundColor: \"var(--WindowTopBarBkgrColorInactive)\"\r\n                    }}>\r\n                    <FcGlobe />\r\n                    <h1>Inactive</h1>\r\n                </app-top-bar>\r\n                <app-container\r\n                    style={{\r\n                        color: \"var(--AppFontColorInactive)\",\r\n                        backgroundColor: \"var(--AppBkgrColorInactive)\",\r\n                        borderColor: \"var(--AppBorderColorInactive)\",\r\n                        textAlign: \"left\"\r\n                    }}>{\"-Content\"}</app-container>\r\n            </app-window>\r\n            <app-window\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: \"50px\",\r\n                    left: \"60px\",\r\n                    width: \"80%\",\r\n                    height: \"120px\",\r\n                    backgroundColor: \"var(--WindowBkgrColor)\"\r\n                }}\r\n                className=\"app\"\r\n            >\r\n                <app-top-bar\r\n                    style={{\r\n                        color: \"var(--WindowTopBarFontColor)\",\r\n                        backgroundColor: \"var(--WindowTopBarBkgrColor)\"\r\n                    }}>\r\n                    <FcGlobe />\r\n                    <h1>Active</h1>\r\n                </app-top-bar>\r\n                <app-container\r\n                    style={{\r\n                        color: \"var(--AppFontColor)\",\r\n                        backgroundColor: \"var(--AppBkgrColor)\",\r\n                        borderColor: \"var(--AppBorderColor)\",\r\n                        textAlign:\"left\"\r\n                    }}>{\"-Content\"}</app-container>\r\n            </app-window>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const App = () => {\r\n    var root = document.querySelector(\":root\");\r\n\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppFontColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppFontColor\", fontColor);\r\n    }, [fontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColorInactive, setFontColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppFontColorInactive\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppFontColorInactive\", fontColorInactive);\r\n    }, [fontColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [bkgColor, setBkgColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBkgrColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBkgrColor\", bkgColor);\r\n    }, [bkgColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [bkgColorInactive, setBkgColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBkgrColorInactive\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBkgrColorInactive\", bkgColorInactive);\r\n    }, [bkgColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderColor\", borderColor);\r\n    }, [borderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColorInactive, setBorderColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderColorInactive\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderColorInactive\", borderColorInactive);\r\n    }, [borderColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderWidth\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderWidth\", borderWidth + \"px\");\r\n    }, [borderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderRadius\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderRadius\", borderRadius + \"px\");\r\n    }, [borderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        root.style.getPropertyValue(\"--AppBorderType\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderType\", borderType);\r\n    }, [borderType]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Font Color</legend>\r\n                <div>\r\n                    <label>Active</label>\r\n                    <ColorPicker\r\n                        color={fontColor}\r\n                        setColor={setFontColor}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Inactive</label>\r\n                    <ColorPicker\r\n                        color={fontColorInactive}\r\n                        setColor={setFontColorInactive}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background Color</legend>\r\n                <div>\r\n                    <label>Active</label>\r\n                    <ColorPicker\r\n                        color={bkgColor}\r\n                        setColor={setBkgColor}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Inactive</label>\r\n                    <ColorPicker\r\n                        color={bkgColorInactive}\r\n                        setColor={setBkgColorInactive}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Color Active</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Color Inactive</label>\r\n                    <ColorPicker\r\n                        color={borderColorInactive}\r\n                        setColor={setBorderColorInactive}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Radius</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Type</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};","import { useState, useEffect, useContext } from \"react\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const DialogPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  const [buttonClassNeutral, setButtonClassNeutral] = useState(\"appDialogButtonFluent\");\r\n  const [buttonClassSuggested, setButtonClassSuggested] = useState(\"appDialogButtonFluent\");\r\n  const [buttonClassClose, setButtonClassClose] = useState(\"appDialogButtonFluent buttonActiveRed\");\r\n  useEffect(() => {\r\n    switch (themeContext.dialogButtonTheme) {\r\n      case \"Aero\":\r\n        setButtonClassNeutral(\"appDialogButtonAero\");\r\n        setButtonClassSuggested(\"appDialogButtonAero\");\r\n        setButtonClassClose(\"appDialogButtonAero\");\r\n        break;\r\n      case \"Aqua\":\r\n        setButtonClassNeutral(\"appDialogButtonAqua appDialogButtonAquaNeutral\");\r\n        setButtonClassSuggested(\"appDialogButtonAqua appDialogButtonAquaBlue\");\r\n        setButtonClassClose(\"appDialogButtonAqua appDialogButtonAquaRed\");\r\n        break;\r\n      case \"Classic\":\r\n        setButtonClassNeutral(\"appDialogButtonClassic\");\r\n        setButtonClassSuggested(\"appDialogButtonClassic\");\r\n        setButtonClassClose(\"appDialogButtonClassic\");\r\n        break;\r\n      default:\r\n        setButtonClassNeutral(\"appDialogButtonFluent\");\r\n        setButtonClassSuggested(\"appDialogButtonFluent\");\r\n        setButtonClassClose(\"appDialogButtonFluent buttonActiveRed\");\r\n        break;\r\n    }\r\n  }, [themeContext.dialogButtonTheme]);\r\n\r\n  const setButtonClass = (name) => {\r\n    switch (name) {\r\n      case \"Close\":\r\n        return buttonClassClose;\r\n      case \"Save\":\r\n      case \"Ok\":\r\n        return buttonClassSuggested;\r\n      default:\r\n        return buttonClassNeutral;\r\n    }\r\n  }\r\n\r\n  const DialogButtonsBar = () => \r\n    <app-dialog-actions>\r\n      <button className={setButtonClass(\"Ok\")}>Ok</button>\r\n      <button className={setButtonClass(\"Cancel\")}>Cancel</button>\r\n      <button className={setButtonClass(\"Close\")}>Close</button>\r\n    </app-dialog-actions>\r\n  ;\r\n\r\n  return (\r\n    <>\r\n      <app-dialog\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n        }}\r\n      >\r\n        <app-dialog-top-bar>\r\n          Dialog\r\n        </app-dialog-top-bar>\r\n        <app-dialog-info\r\n          style={{\r\n            marginBottom: themeContext.dialogButtonsLocation === \"in window\" ? \"0px\" : \"var(--DialogPadding)\"\r\n           }}\r\n        >\r\n          <p>Information</p>\r\n        {themeContext.dialogButtonsLocation === \"in info container\" && <DialogButtonsBar />}\r\n        </app-dialog-info>\r\n        {themeContext.dialogButtonsLocation === \"in window\" && <DialogButtonsBar />}\r\n      </app-dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Dialog = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  var root = document.querySelector(\":root\");\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBkgrColor, setDialogBkgrColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBkgrColor\", dialogBkgrColor);\r\n  }, [dialogBkgrColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderColor, setDialogBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderColor\", dialogBorderColor);\r\n  }, [dialogBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderWidth, setDialogBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderWidth\", dialogBorderWidth + \"px\");\r\n  }, [dialogBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderRadius, setDialogBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderRadius\", dialogBorderRadius + \"px\");\r\n  }, [dialogBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderType, setDialogBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderType\", dialogBorderType);\r\n  }, [dialogBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBkgr, setDialogInfoBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBkgr\", dialogInfoBkgr);\r\n  }, [dialogInfoBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoFontColor, setDialogInfoFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoFontColor\", dialogInfoFontColor);\r\n  }, [dialogInfoFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoFontSize, setDialogInfoFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoFontSize\", dialogInfoFontSize + \"px\");\r\n  }, [dialogInfoFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderColor, setDialogInfoBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderColor\"),\r\n  )\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderColor\", dialogInfoBorderColor);\r\n  }, [dialogInfoBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderWidth, setDialogInfoBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderWidth\", dialogInfoBorderWidth + \"px\");\r\n  }, [dialogInfoBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderRadius, setDialogInfoBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderRadius\", dialogInfoBorderRadius + \"px\");\r\n  }, [dialogInfoBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderType, setDialogInfoBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderType\", dialogInfoBorderType);\r\n  }, [dialogInfoBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogPadding, setDialogPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogPadding\", dialogPadding + \"px\");\r\n  }, [dialogPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogTopBarBkgr, setDialogTopBarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogTopBarBkgr\", dialogTopBarBkgr);\r\n  }, [dialogTopBarBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogTopBarFontSize, setDialogTopBarFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogTopBarFontSize\", dialogTopBarFontSize + \"px\");\r\n  }, [dialogTopBarFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogTopBarFontColor, setDialogTopBarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogTopBarFontColor\", dialogTopBarFontColor);\r\n  }, [dialogTopBarFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBarBkgr, setDialogButtonBarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBarBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBarBkgr\", dialogButtonBarBkgr);\r\n  }, [dialogButtonBarBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBkgr, setDialogButtonBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBkgr\", dialogButtonBkgr);\r\n  }, [dialogButtonBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonFontColor, setDialogButtonFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonFontColor\", dialogButtonFontColor);\r\n  }, [dialogButtonFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonFontSize, setDialogButtonFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonFontSize\", dialogButtonFontSize + \"px\");\r\n  }, [dialogButtonFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderColor, setDialogButtonBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderColor\", dialogButtonBorderColor);\r\n  }, [dialogButtonBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderWidth, setDialogButtonBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderWidth\", dialogButtonBorderWidth + \"px\");\r\n  }, [dialogButtonBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderRadius, setDialogButtonBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderRadius\", dialogButtonBorderRadius + \"px\");\r\n  }, [dialogButtonBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderType, setDialogButtonBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderType\", dialogButtonBorderType);\r\n  }, [dialogButtonBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n\r\n  return (\r\n\r\n    <fieldset>\r\n      <legend>Dialog Window</legend>\r\n      <div>\r\n        <label>Background Color: </label>\r\n        <ColorPicker\r\n          color={dialogBkgrColor}\r\n          setColor={setDialogBkgrColor}\r\n          useAlpha={true}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label>Background Effect:</label>\r\n        <select\r\n          value={themeContext.windowBackgroundFX}\r\n          onChange={(e) => themeContext.setWindowBackgroundFX(e.target.value)}\r\n        >\r\n          {themeContext.backgroundFXList.map((backgroundFX) => (\r\n            <option key={backgroundFX} value={backgroundFX}>\r\n              {backgroundFX}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <fieldset>\r\n        <legend>Border</legend>\r\n        <div>\r\n          <label>Color: </label>\r\n          <ColorPicker\r\n            color={dialogBorderColor}\r\n            setColor={setDialogBorderColor}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Thickness: </label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={10}\r\n            step=\"1\"\r\n            value={dialogBorderWidth}\r\n            onChange={(e) => setDialogBorderWidth(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Corner Curvature: </label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={25}\r\n            step=\"1\"\r\n            value={dialogBorderRadius}\r\n            onChange={(e) => setDialogBorderRadius(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Type: </label>\r\n          <select\r\n            value={dialogBorderType}\r\n            onChange={(e) => setDialogBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">Solid</option>\r\n            <option value=\"dashed\">Dashed</option>\r\n            <option value=\"dotted\">Dotted</option>\r\n            <option value=\"double\">Double</option>\r\n            <option value=\"groove\">Groove</option>\r\n            <option value=\"ridge\">Ridge</option>\r\n            <option value=\"inset\">Inset</option>\r\n            <option value=\"outset\">Outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Top Bar</legend>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={dialogTopBarBkgr}\r\n            setColor={setDialogTopBarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={dialogTopBarFontColor}\r\n            setColor={setDialogTopBarFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={60}\r\n            step=\"1\"\r\n            value={dialogTopBarFontSize}\r\n            onChange={(e) => setDialogTopBarFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Info</legend>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={dialogInfoBkgr}\r\n            setColor={setDialogInfoBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size: </label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={60}\r\n            step=\"1\"\r\n            value={dialogInfoFontSize}\r\n            onChange={(e) => setDialogInfoFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={dialogInfoFontColor}\r\n            setColor={setDialogInfoFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Color: </label>\r\n            <ColorPicker\r\n              color={dialogInfoBorderColor}\r\n              setColor={setDialogInfoBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Thickness: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogInfoBorderWidth}\r\n              onChange={(e) => setDialogInfoBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={12}\r\n              step=\"1\"\r\n              value={dialogInfoBorderRadius}\r\n              onChange={(e) => setDialogInfoBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Type: </label>\r\n            <select\r\n              value={dialogInfoBorderType}\r\n              onChange={(e) => setDialogInfoBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">Solid</option>\r\n              <option value=\"dashed\">Dashed</option>\r\n              <option value=\"dotted\">Dotted</option>\r\n              <option value=\"double\">Double</option>\r\n              <option value=\"groove\">Groove</option>\r\n              <option value=\"ridge\">Ridge</option>\r\n              <option value=\"inset\">Inset</option>\r\n              <option value=\"outset\">Outset</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Margin Distance</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogPadding}\r\n              onChange={(e) => setDialogPadding(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Button</legend>\r\n        <div>\r\n          <label>Location: </label>\r\n          <select\r\n            value={themeContext.dialogButtonsLocation}\r\n            onChange={(e) => themeContext.setDialogButtonsLocation(e.target.value)}\r\n          >\r\n            {themeContext.dialogButtonsLocationList.map((buttonLocation) => (\r\n              <option key={buttonLocation} value={buttonLocation}>\r\n                {buttonLocation}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Theme:</label>\r\n          <select\r\n            value={themeContext.dialogButtonTheme}\r\n            onChange={(e) => themeContext.setDialogButtonTheme(e.target.value)}\r\n          >\r\n            {themeContext.dialogButtonThemeList.map((buttonTheme) => (\r\n              <option key={buttonTheme} value={buttonTheme}>\r\n                {buttonTheme}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Bar Background Color:</label>\r\n          <ColorPicker\r\n            color={dialogButtonBarBkgr}\r\n            setColor={setDialogButtonBarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={dialogButtonBkgr}\r\n            setColor={setDialogButtonBkgr}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={dialogButtonFontColor}\r\n            setColor={setDialogButtonFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={60}\r\n            step=\"1\"\r\n            value={dialogButtonFontSize}\r\n            onChange={(e) => setDialogButtonFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Color:</label>\r\n          <ColorPicker\r\n            color={dialogButtonBorderColor}\r\n            setColor={setDialogButtonBorderColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Width:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={10}\r\n            step=\"1\"\r\n            value={dialogButtonBorderWidth}\r\n            onChange={(e) => setDialogButtonBorderWidth(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Radius:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={25}\r\n            step=\"1\"\r\n            value={dialogButtonBorderRadius}\r\n            onChange={(e) => setDialogButtonBorderRadius(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Style:</label>\r\n          <select\r\n            value={dialogButtonBorderType}\r\n            onChange={(e) => setDialogButtonBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">Solid</option>\r\n            <option value=\"dashed\">Dashed</option>\r\n            <option value=\"dotted\">Dotted</option>\r\n            <option value=\"double\">Double</option>\r\n            <option value=\"groove\">Groove</option>\r\n            <option value=\"ridge\">Ridge</option>\r\n            <option value=\"inset\">Inset</option>\r\n            <option value=\"outset\">Outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n    </fieldset>\r\n  );\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nexport const TaskBarPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  const startButtonClass = () => {\r\n    let ans = \"\";\r\n    switch (themeContext.startButtonTheme) {\r\n      case \"Classic\":\r\n        ans = \"startButtonClassic\";\r\n        break;\r\n      case \"Aero\":\r\n        ans = \"startButtonAero\";\r\n        break;\r\n      case \"Aqua\":\r\n        ans = \"startButtonAqua\";\r\n        break;\r\n      case \"Default\":\r\n      default:\r\n        ans = \"startButtonFluent\";\r\n        break;\r\n    }\r\n    return ans;\r\n  }\r\n  const LiveAppsClass = (isSelected) => {\r\n    let ans = \"\";\r\n    switch (themeContext.liveAppsTheme) {\r\n      case \"Classic\":\r\n        ans = \"liveAppsClassic\";\r\n        break;\r\n      case \"Aero\":\r\n        ans = \"liveAppsAero\";\r\n        break;\r\n      case \"Aqua\":\r\n        ans = \"liveAppsAqua\";\r\n        break;\r\n      case \"Default\":\r\n      default:\r\n        ans = \"liveAppsFluent\";\r\n        break;\r\n    }\r\n    if (isSelected) {\r\n      ans += \" \" + ans + \"Active\";\r\n    }\r\n    return ans;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          backgroundColor: \"var(--TaskbarBkgr)\",\r\n          backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n          backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n          backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n          backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n          backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n\r\n        <start-button\r\n        >\r\n          <button className={startButtonClass()}>\r\n            <svg style={{isolation: \"isolate\"}} width=\"400\" height=\"400\" viewBox=\"0 0 400 400\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <defs>\r\n                <linearGradient id=\"startButtonAquaRed\" gradientTransform=\"rotate(90)\">\r\n                  <stop offset=\"20%\" stopColor=\"#FF9999\" />\r\n                  <stop offset=\"50%\" stopColor=\"#FF0000\" />\r\n                  <stop offset=\"80%\" stopColor=\"#9F0000\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"startButtonAquaGreen\" gradientTransform=\"rotate(90)\">\r\n                  <stop offset=\"20%\" stopColor=\"#99FF99\" />\r\n                  <stop offset=\"50%\" stopColor=\"#00FF00\" />\r\n                  <stop offset=\"80%\" stopColor=\"#009F00\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"startButtonAquaBlue\" gradientTransform=\"rotate(90)\">\r\n                  <stop offset=\"20%\" stopColor=\"#9999FF\" />\r\n                  <stop offset=\"50%\" stopColor=\"#0000FF\" />\r\n                  <stop offset=\"80%\" stopColor=\"#00009F\" />\r\n                </linearGradient>\r\n              </defs>\r\n              <path\r\n                className=\"hex hex1\"\r\n                style={{\r\n                  fill: startButtonClass() === \"startButtonAqua\" ? \"url(#startButtonAquaRed)\" : \"\"\r\n                }}\r\n                d=\"M41.0481 108.077L105 71.1547L168.952 108.077V181.923L105 218.845L41.0481 181.923V108.077Z\"\r\n                stroke=\"#808080\"\r\n                strokeWidth=\"8\"\r\n              />\r\n              <path\r\n                className=\"hex hex2\"\r\n                style={{\r\n                  fill: startButtonClass() === \"startButtonAqua\" ? \"url(#startButtonAquaGreen)\" : \"\"\r\n                }}\r\n                d=\"M231.048 108.077L295 71.1547L358.952 108.077V181.923L295 218.845L231.048 181.923V108.077Z\"\r\n                stroke=\"#808080\"\r\n                strokeWidth=\"8\"\r\n              />\r\n              <path\r\n                className=\"hex hex3\"\r\n                style={{\r\n                  fill: startButtonClass() === \"startButtonAqua\" ? \"url(#startButtonAquaBlue)\" : \"\"\r\n                }}\r\n                d=\"M136.048 273.077L200 236.155L263.952 273.077V346.923L200 383.845L136.048 346.923V273.077Z\"\r\n                stroke=\"#808080\"\r\n                strokeWidth=\"8\"\r\n              />\r\n              <path className=\"axis\" d=\"M200 200L200 60\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n              <path className=\"axis\" d=\"M200 200L78.7564 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n              <path className=\"axis\" d=\"M200 200L321.244 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n            </svg>\r\n            <span>Start</span>\r\n          </button>\r\n        </start-button>\r\n        <vertical-rect />\r\n        <live-apps>\r\n          <button className={LiveAppsClass(true)}>\r\n            <FcGlobe />\r\n            <span>App</span>\r\n            {themeContext.liveAppsTheme === \"Aqua\" && <FcGlobe />}\r\n          </button>\r\n        </live-apps>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TaskBar = () => {\r\n\r\n  var root = document.querySelector(\":root\");\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [taskbarHeight, setTaskbarHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHeight\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHeight\", taskbarHeight + \"px\");\r\n  }, [taskbarHeight]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarIconSize, setTaskbarIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarIconSize\", taskbarIconSize + \"px\");\r\n  }, [taskbarIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarBkgr, setTaskbarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarBkgr\", taskbarBkgr);\r\n  }, [taskbarBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarFontSize, setTaskbarFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarFontSize\", taskbarFontSize + \"px\");\r\n  }, [taskbarFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarVerticalBorderColor, setTaskbarVerticalBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarVerticalBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarVerticalBorderColor\", taskbarVerticalBorderColor);\r\n  }, [taskbarVerticalBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarVerticalBorderWidth, setTaskbarVerticalBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarVerticalBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarVerticalBorderWidth\", taskbarVerticalBorderWidth + \"px\");\r\n  }, [taskbarVerticalBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarVerticalBorderType, setTaskbarVerticalBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarVerticalBorderType\")\r\n  )\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarVerticalBorderType\", taskbarVerticalBorderType);\r\n  }, [taskbarVerticalBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarHorizontalBorderColor, setTaskbarHorizontalBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHorizontalBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHorizontalBorderColor\", taskbarHorizontalBorderColor);\r\n  }, [taskbarHorizontalBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarHorizontalBorderWidth, setTaskbarHorizontalBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHorizontalBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHorizontalBorderWidth\", taskbarHorizontalBorderWidth + \"px\");\r\n  }, [taskbarHorizontalBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarHorizontalBorderType, setTaskbarHorizontalBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHorizontalBorderType\")\r\n  )\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHorizontalBorderType\", taskbarHorizontalBorderType);\r\n  }, [taskbarHorizontalBorderType]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Dimentions:</legend>\r\n        <div>\r\n          <label>Height:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={20}\r\n            max={60}\r\n            step=\"1\"\r\n            value={taskbarHeight}\r\n            onChange={(e) => setTaskbarHeight(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={10}\r\n            max={26}\r\n            step=\"1\"\r\n            value={taskbarFontSize}\r\n            onChange={(e) => setTaskbarFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Icon Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={10}\r\n            max={60}\r\n            step=\"1\"\r\n            value={taskbarIconSize}\r\n            onChange={(e) => setTaskbarIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Background:</legend>\r\n        <div>\r\n          <label>Color:</label>\r\n          <ColorPicker\r\n            color={taskbarBkgr}\r\n            setColor={setTaskbarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background FX:</label>\r\n          <select\r\n            value={theme.taskbarBackgroundFX}\r\n            onChange={(e) => theme.setTaskbarBackgroundFX(e.target.value)}\r\n          >{\r\n              theme.backgroundFXList.map((fx) => (\r\n                <option key={fx} value={fx}>{fx}</option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Borders</legend>\r\n        <fieldset>\r\n          <legend>Horizontal</legend>\r\n          <div>\r\n            <label>Color:</label>\r\n            <ColorPicker\r\n              color={taskbarHorizontalBorderColor}\r\n              setColor={setTaskbarHorizontalBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Width:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={5}\r\n              step=\"1\"\r\n              value={taskbarHorizontalBorderWidth}\r\n              onChange={(e) => setTaskbarHorizontalBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Type:</label>\r\n            <select\r\n              value={taskbarHorizontalBorderType}\r\n              onChange={(e) => setTaskbarHorizontalBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Vertical</legend>\r\n          <div>\r\n            <label>Color:</label>\r\n            <ColorPicker\r\n              color={taskbarVerticalBorderColor}\r\n              setColor={setTaskbarVerticalBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Width:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={5}\r\n              step=\"1\"\r\n              value={taskbarVerticalBorderWidth}\r\n              onChange={(e) => setTaskbarVerticalBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Type:</label>\r\n            <select\r\n              value={taskbarVerticalBorderType}\r\n              onChange={(e) => setTaskbarVerticalBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n    </>\r\n  )\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FaGear } from \"react-icons/fa6\";\r\nimport { MdOutlineRestartAlt } from \"react-icons/md\";\r\nimport { RiShutDownLine } from \"react-icons/ri\";\r\nimport { FcGlobe, FcInfo, FcSettings } from \"react-icons/fc\";\r\n\r\nexport const StartPreview = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const themeContext = useContext(ThemeContext);\r\n  const startButtonClass = (open) => {\r\n    let ans = \"\";\r\n    switch (themeContext.startButtonTheme) {\r\n      case \"Classic\":\r\n        ans = \"startButtonClassic\";\r\n        break;\r\n      case \"Aero\":\r\n        ans = \"startButtonAero\";\r\n        break;\r\n      case \"Aqua\":\r\n        ans = \"startButtonAqua\";\r\n        break;\r\n      case \"Default\":\r\n      default:\r\n        ans = \"startButtonFluent\";\r\n        break;\r\n    }\r\n    if (open) { ans += \" \" + ans + \"Active\" };\r\n    return ans;\r\n  }\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          backgroundColor: \"var(--TaskbarBkgr)\",\r\n          backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n          backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n          backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n          backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n          backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <start-button\r\n        >\r\n          <button className={startButtonClass(open)} onClick={() => setOpen(!open)}>\r\n            <svg style={{isolation: \"isolate\"}} width=\"400\" height=\"400\" viewBox=\"0 0 400 400\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <defs>\r\n                <linearGradient id=\"startButtonAquaRed\" gradientTransform=\"rotate(90)\">\r\n                  <stop offset=\"20%\" stopColor=\"#FF9999\" />\r\n                  <stop offset=\"50%\" stopColor=\"#FF0000\" />\r\n                  <stop offset=\"80%\" stopColor=\"#9F0000\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"startButtonAquaGreen\" gradientTransform=\"rotate(90)\">\r\n                  <stop offset=\"20%\" stopColor=\"#99FF99\" />\r\n                  <stop offset=\"50%\" stopColor=\"#00FF00\" />\r\n                  <stop offset=\"80%\" stopColor=\"#009F00\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"startButtonAquaBlue\" gradientTransform=\"rotate(90)\">\r\n                  <stop offset=\"20%\" stopColor=\"#9999FF\" />\r\n                  <stop offset=\"50%\" stopColor=\"#0000FF\" />\r\n                  <stop offset=\"80%\" stopColor=\"#00009F\" />\r\n                </linearGradient>\r\n              </defs>\r\n              <path\r\n                className=\"hex hex1\"\r\n                style={{\r\n                  mixBlendMode: \"screen\",\r\n                  fill: startButtonClass(false) === \"startButtonAqua\" ? \"url(#startButtonAquaRed)\" : open ? \"#FF0000\" : \"\",\r\n                  transform: open ? \"translate(45%, 23%) scale(1.5)\" : \"\",\r\n                  transition: \"fill 0.5s ease-in-out, transform 0.5s ease-in-out\"\r\n                }}\r\n                d=\"M41.0481 108.077L105 71.1547L168.952 108.077V181.923L105 218.845L41.0481 181.923V108.077Z\"\r\n                stroke=\"#808080\"\r\n                strokeWidth=\"8\"\r\n              />\r\n              <path\r\n                className=\"hex hex2\"\r\n                style={{\r\n                  mixBlendMode: \"screen\",\r\n                  fill: startButtonClass(false) === \"startButtonAqua\" ? \"url(#startButtonAquaGreen)\" : open ? \"#00FF00\" : \"\",\r\n                  transform: open ? \"translate(-45%, 23%) scale(1.5)\" : \"\",\r\n                  transition: \"fill 0.5s ease-in-out, transform 0.5s ease-in-out\"\r\n                }}\r\n                d=\"M231.048 108.077L295 71.1547L358.952 108.077V181.923L295 218.845L231.048 181.923V108.077Z\"\r\n                stroke=\"#808080\"\r\n                strokeWidth=\"8\"\r\n              />\r\n              <path\r\n                className=\"hex hex3\"\r\n                style={{\r\n                  mixBlendMode: \"screen\",\r\n                  fill: startButtonClass(false) === \"startButtonAqua\" ? \"url(#startButtonAquaBlue)\" : open ? \"#0000FF\" : \"\",\r\n                  transform: open ? \"translate(0, -45%) scale(1.5)\" : \"\",\r\n                  transition: \"fill 0.5s ease-in-out, transform 0.5s ease-in-out\"\r\n                }}\r\n                d=\"M136.048 273.077L200 236.155L263.952 273.077V346.923L200 383.845L136.048 346.923V273.077Z\"\r\n                stroke=\"#808080\"\r\n                strokeWidth=\"8\"\r\n              />\r\n              <path className=\"axis\" d=\"M200 200L200 60\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n              <path className=\"axis\" d=\"M200 200L78.7564 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n              <path className=\"axis\" d=\"M200 200L321.244 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n            </svg>\r\n            <span>Start</span>\r\n          </button>\r\n        </start-button>\r\n        <vertical-rect />\r\n        <live-apps></live-apps>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Start = () => {\r\n\r\n  var root = document.querySelector(\":root\");\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [startButtonBkgr, setStartButtonBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBkgr\", startButtonBkgr);\r\n  }, [startButtonBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBkgrHover, setStartButtonBkgrHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBkgrHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBkgrHover\", startButtonBkgrHover);\r\n  }, [startButtonBkgrHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBkgrActive, setStartButtonBkgrActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBkgrActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBkgrActive\", startButtonBkgrActive);\r\n  }, [startButtonBkgrActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonIconSize, setStartButtonIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonIconSize\", startButtonIconSize + \"px\");\r\n  }, [startButtonIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonHeight, setStartButtonHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonHeight\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonHeight\", startButtonHeight + \"px\");\r\n  }, [startButtonHeight]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonMargin, setStartButtonMargin] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonMargin\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonMargin\", startButtonMargin + \"px\");\r\n  }, [startButtonMargin]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonPadding, setStartButtonPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonPadding\", startButtonPadding + \"px\");\r\n  }, [startButtonPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBorderWidth, setStartButtonBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBorderWidth\", startButtonBorderWidth + \"px\");\r\n  }, [startButtonBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBorderColor, setStartButtonBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBorderColor\", startButtonBorderColor);\r\n  }, [startButtonBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBorderType, setStartButtonBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBorderType\", startButtonBorderType);\r\n  }, [startButtonBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBorderRadius, setStartButtonBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBorderRadius\", startButtonBorderRadius + \"px\");\r\n  }, [startButtonBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonFontVisibility, setStartButtonFontVisibility] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonFontVisibility\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonFontVisibility\", startButtonFontVisibility);\r\n  }, [startButtonFontVisibility]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonFontColor, setStartButtonFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonFontColor\", startButtonFontColor);\r\n  }, [startButtonFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonFontSize, setStartButtonFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonFontSize\", startButtonFontSize + \"px\");\r\n  }, [startButtonFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n\r\n  return (\r\n    <>\r\n    <fieldset>\r\n      <legend>Dimentions:</legend>\r\n      <div>\r\n        <label>Height:</label>\r\n        <input\r\n          type=\"range\"\r\n          min=\"12\"\r\n          max=\"46\"\r\n          value={startButtonHeight}\r\n          onChange={(e) => setStartButtonHeight(e.target.value)}\r\n        />\r\n      </div>\r\n        <div>\r\n          <label>Margin:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={10}\r\n            step=\"1\"\r\n            value={startButtonMargin}\r\n            onChange={(e) => setStartButtonMargin(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Padding:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={20}\r\n            step=\"1\"\r\n            value={startButtonPadding}\r\n            onChange={(e) => setStartButtonPadding(e.target.value)}\r\n          />\r\n        </div>\r\n    </fieldset>\r\n      <fieldset>\r\n        <legend>Icon</legend>\r\n        <div>\r\n          <label>Icon Theme:</label>\r\n          <select\r\n            value={theme.startButtonTheme}\r\n            onChange={(e) => { theme.setStartButtonTheme(e.target.value) }}\r\n          >\r\n            {theme.startButtonThemeList.map((theme) => {\r\n              return (\r\n                <option key={theme} value={theme}>\r\n                  {theme}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"12\"\r\n            max=\"46\"\r\n            value={startButtonIconSize}\r\n            onChange={(e) => setStartButtonIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Background</legend>\r\n        <div>\r\n          <label>Base:</label>\r\n          <ColorPicker\r\n            color={startButtonBkgr}\r\n            setColor={setStartButtonBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Hover:</label>\r\n          <ColorPicker\r\n            color={startButtonBkgrHover}\r\n            setColor={setStartButtonBkgrHover}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Active:</label>\r\n          <ColorPicker\r\n            color={startButtonBkgrActive}\r\n            setColor={setStartButtonBkgrActive}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Text</legend>\r\n        <div>\r\n          <label>Visibility</label>\r\n          <select\r\n            value={startButtonFontVisibility}\r\n            onChange={(e) => setStartButtonFontVisibility(e.target.value)}\r\n          >\r\n            <option value=\"visible\">Visible</option>\r\n            <option value=\"none\">Hidden</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Color:</label>\r\n          <ColorPicker\r\n            color={startButtonFontColor}\r\n            setColor={setStartButtonFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={46}\r\n            step=\"1\"\r\n            value={startButtonFontSize}\r\n            onChange={(e) => setStartButtonFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Border</legend>\r\n        <div>\r\n          <label>Color:</label>\r\n          <ColorPicker\r\n            color={startButtonBorderColor}\r\n            setColor={setStartButtonBorderColor}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Width:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={5}\r\n            step=\"1\"\r\n            value={startButtonBorderWidth}\r\n            onChange={(e) => setStartButtonBorderWidth(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Corner Curvature:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={60}\r\n            step=\"1\"\r\n            value={startButtonBorderRadius}\r\n            onChange={(e) => setStartButtonBorderRadius(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Type:</label>\r\n          <select\r\n            value={startButtonBorderType}\r\n            onChange={(e) => setStartButtonBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">solid</option>\r\n            <option value=\"double\">double</option>\r\n            <option value=\"dashed\">dashed</option>\r\n            <option value=\"dotted\">dotted</option>\r\n            <option value=\"groove\">groove</option>\r\n            <option value=\"ridge\">ridge</option>\r\n            <option value=\"inset\">inset</option>\r\n            <option value=\"outset\">outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n    </>\r\n  )\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FaGear } from \"react-icons/fa6\";\r\nimport { MdOutlineRestartAlt } from \"react-icons/md\";\r\nimport { RiShutDownLine } from \"react-icons/ri\";\r\nimport { FcGlobe, FcInfo, FcSettings } from \"react-icons/fc\";\r\n\r\nexport const StartMenuPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  const startButtonClass = () => {\r\n    let ans = \"\";\r\n    switch (themeContext.startButtonTheme) {\r\n      case \"Classic\":\r\n        ans = \"startButtonClassic startButtonClassicActive\";\r\n        break;\r\n      case \"Aero\":\r\n        ans = \"startButtonAero startButtonAeroActive\";\r\n        break;\r\n      case \"Aqua\":\r\n        ans = \"startButtonAqua startButtonAquaActive\";\r\n        break;\r\n      case \"Default\":\r\n      default:\r\n        ans = \"startButtonFluent startButtonFluentActive\";\r\n        break;\r\n    }\r\n    return ans;\r\n  }\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          backgroundColor: \"var(--TaskbarBkgr)\",\r\n          backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n          backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n          backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n          backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n          backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <start-button\r\n        >\r\n          <start-list class={\"startListOpen\"} style={{  left:0 }}>\r\n            <div>\r\n              <button>\r\n                <FaGear />\r\n                <span>Settings</span>\r\n              </button>\r\n              <button>\r\n                <MdOutlineRestartAlt />\r\n                <span>Refresh</span>\r\n              </button>\r\n              <button>\r\n                <RiShutDownLine />\r\n                <span>Close</span>\r\n              </button>\r\n            </div>\r\n            <ul>\r\n              <li>\r\n                <button>\r\n                  <FcGlobe />\r\n                  <span>Program 1</span>\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcInfo />\r\n                  <span>Program 2</span>\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcSettings />\r\n                  <span>Program 3</span>\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </start-list>\r\n          <button className={startButtonClass()}>\r\n            <svg style={{isolation: \"isolate\"}} width=\"400\" height=\"400\" viewBox=\"0 0 400 400\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <defs>\r\n                <linearGradient id=\"startButtonAquaRed\" gradientTransform=\"rotate(90)\">\r\n                  <stop offset=\"20%\" stopColor=\"#FF9999\" />\r\n                  <stop offset=\"50%\" stopColor=\"#FF0000\" />\r\n                  <stop offset=\"80%\" stopColor=\"#9F0000\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"startButtonAquaGreen\" gradientTransform=\"rotate(90)\">\r\n                  <stop offset=\"20%\" stopColor=\"#99FF99\" />\r\n                  <stop offset=\"50%\" stopColor=\"#00FF00\" />\r\n                  <stop offset=\"80%\" stopColor=\"#009F00\" />\r\n                </linearGradient>\r\n                <linearGradient id=\"startButtonAquaBlue\" gradientTransform=\"rotate(90)\">\r\n                  <stop offset=\"20%\" stopColor=\"#9999FF\" />\r\n                  <stop offset=\"50%\" stopColor=\"#0000FF\" />\r\n                  <stop offset=\"80%\" stopColor=\"#00009F\" />\r\n                </linearGradient>\r\n              </defs>\r\n              <path\r\n                className=\"hex hex1\"\r\n                style={{\r\n                  mixBlendMode: \"screen\",\r\n                  fill: startButtonClass() === \"startButtonAqua startButtonAquaActive\" ? \"url(#startButtonAquaRed)\" : \"#FF0000\",\r\n                  transform: \"translate(45%, 23%) scale(1.5)\",\r\n                }}\r\n                d=\"M41.0481 108.077L105 71.1547L168.952 108.077V181.923L105 218.845L41.0481 181.923V108.077Z\"\r\n                stroke=\"#808080\"\r\n                strokeWidth=\"8\"\r\n              />\r\n              <path\r\n                className=\"hex hex2\"\r\n                style={{\r\n                  mixBlendMode: \"screen\",\r\n                  fill: startButtonClass() === \"startButtonAqua startButtonAquaActive\" ? \"url(#startButtonAquaGreen)\" : \"#00FF00\",\r\n                  transform: \"translate(-45%, 23%) scale(1.5)\",\r\n                }}\r\n                d=\"M231.048 108.077L295 71.1547L358.952 108.077V181.923L295 218.845L231.048 181.923V108.077Z\"\r\n                stroke=\"#808080\"\r\n                strokeWidth=\"8\"\r\n              />\r\n              <path\r\n                className=\"hex hex3\"\r\n                style={{\r\n                  mixBlendMode: \"screen\",\r\n                  fill: startButtonClass() === \"startButtonAqua startButtonAquaActive\" ? \"url(#startButtonAquaBlue)\" : \"#0000FF\",\r\n                  transform: \"translate(0, -45%) scale(1.5)\"\r\n                }}\r\n                d=\"M136.048 273.077L200 236.155L263.952 273.077V346.923L200 383.845L136.048 346.923V273.077Z\"\r\n                stroke=\"#808080\"\r\n                strokeWidth=\"8\"\r\n              />\r\n              <path className=\"axis\" d=\"M200 200L200 60\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n              <path className=\"axis\" d=\"M200 200L78.7564 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n              <path className=\"axis\" d=\"M200 200L321.244 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n            </svg>\r\n            <span>Start</span>\r\n          </button>\r\n        </start-button>\r\n        <vertical-rect />\r\n        <live-apps></live-apps>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const StartMenu = () => {\r\n\r\n  var root = document.querySelector(\":root\");\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [startMenuBkgr, setStartMenuBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBkgrColor\", startMenuBkgr);\r\n  }, [startMenuBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuFlexDirection, setStartMenuFlexDirection] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuFlexDirection\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuFlexDirection\", startMenuFlexDirection);\r\n  }, [startMenuFlexDirection]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPadding, setStartMenuPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPadding\", startMenuPadding + \"px\");\r\n  }, [startMenuPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuBorderColor, setStartMenuBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBorderColor\", startMenuBorderColor);\r\n  }, [startMenuBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuBorderWidth, setStartMenuBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBorderWidth\", startMenuBorderWidth + \"px\");\r\n  }, [startMenuBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuBorderRadius, setStartMenuBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBorderRadius\", startMenuBorderRadius + \"px\");\r\n  }, [startMenuBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuBorderType, setStartMenuBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBorderType\", startMenuBorderType);\r\n  }, [startMenuBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBkgr, setStartMenuPrimaryBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBkgr\", startMenuPrimaryBkgr);\r\n  }, [startMenuPrimaryBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBkgrHover, setStartMenuPrimaryBkgrHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBkgrHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBkgrHover\", startMenuPrimaryBkgrHover);\r\n  }, [startMenuPrimaryBkgrHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBkgrActive, setStartMenuPrimaryBkgrActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBkgrActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBkgrActive\", startMenuPrimaryBkgrActive);\r\n  }, [startMenuPrimaryBkgrActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryFontColor, setStartMenuPrimaryFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryFontColor\", startMenuPrimaryFontColor);\r\n  }, [startMenuPrimaryFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryFontColorHover, setStartMenuPrimaryFontColorHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryFontColorHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryFontColorHover\", startMenuPrimaryFontColorHover);\r\n  }, [startMenuPrimaryFontColorHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryFontColorActive, setStartMenuPrimaryFontColorActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryFontColorActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryFontColorActive\", startMenuPrimaryFontColorActive);\r\n  }, [startMenuPrimaryFontColorActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryFontSize, setStartMenuPrimaryFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryFontSize\", startMenuPrimaryFontSize + \"px\");\r\n  }, [startMenuPrimaryFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryIconSize, setStartMenuPrimaryIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryIconSize\", startMenuPrimaryIconSize + \"px\");\r\n  }, [startMenuPrimaryIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryMargin, setStartMenuPrimaryMargin] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryMargin\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryMargin\", startMenuPrimaryMargin + \"px\");\r\n  }, [startMenuPrimaryMargin]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryPadding, setStartMenuPrimaryPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryPadding\", startMenuPrimaryPadding + \"px\");\r\n  }, [startMenuPrimaryPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBorderColor, setStartMenuPrimaryBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBorderColor\", startMenuPrimaryBorderColor);\r\n  }, [startMenuPrimaryBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBorderWidth, setStartMenuPrimaryBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBorderWidth\", startMenuPrimaryBorderWidth + \"px\");\r\n  }, [startMenuPrimaryBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBorderRadius, setStartMenuPrimaryBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBorderRadius\", startMenuPrimaryBorderRadius + \"px\");\r\n  }, [startMenuPrimaryBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBorderType, setStartMenuPrimaryBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBorderType\", startMenuPrimaryBorderType);\r\n  }, [startMenuPrimaryBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBkgr, setStartMenuSecondaryBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBkgr\", startMenuSecondaryBkgr);\r\n  }, [startMenuSecondaryBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBkgrHover, setStartMenuSecondaryBkgrHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBkgrHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBkgrHover\", startMenuSecondaryBkgrHover);\r\n  }, [startMenuSecondaryBkgrHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBkgrActive, setStartMenuSecondaryBkgrActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBkgrActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBkgrActive\", startMenuSecondaryBkgrActive);\r\n  }, [startMenuSecondaryBkgrActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontVisibility, setStartMenuSecondaryFontVisibility] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontVisibility\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryFontVisibility\", startMenuSecondaryFontVisibility);\r\n  }, [startMenuSecondaryFontVisibility]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontColor, setStartMenuSecondaryFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuFontSecondaryColor\", startMenuSecondaryFontColor);\r\n  }, [startMenuSecondaryFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontColorHover, setStartMenuSecondaryFontColorHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontColorHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuFontSecondaryColorHover\", startMenuSecondaryFontColorHover);\r\n  }, [startMenuSecondaryFontColorHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontColorActive, setStartMenuSecondaryFontColorActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontColorActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuFontSecondaryColorActive\", startMenuSecondaryFontColorActive);\r\n  }, [startMenuSecondaryFontColorActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontSize, setStartMenuSecondaryFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryFontSize\", startMenuSecondaryFontSize + \"px\");\r\n  }, [startMenuSecondaryFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryIconSize, setStartMenuSecondaryIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryIconSize\", startMenuSecondaryIconSize + \"px\");\r\n  }, [startMenuSecondaryIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryMargin, setStartMenuSecondaryMargin] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryMargin\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryMargin\", startMenuSecondaryMargin + \"px\");\r\n  }, [startMenuSecondaryMargin]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryPadding, setStartMenuSecondaryPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryPadding\", startMenuSecondaryPadding + \"px\");\r\n  }, [startMenuSecondaryPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBorderColor, setStartMenuSecondaryBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBorderColor\", startMenuSecondaryBorderColor);\r\n  }, [startMenuSecondaryBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBorderWidth, setStartMenuSecondaryBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBorderWidth\", startMenuSecondaryBorderWidth + \"px\");\r\n  }, [startMenuSecondaryBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBorderRadius, setStartMenuSecondaryBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBorderRadius\", startMenuSecondaryBorderRadius + \"px\");\r\n  }, [startMenuSecondaryBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBorderType, setStartMenuSecondaryBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBorderType\", startMenuSecondaryBorderType);\r\n  }, [startMenuSecondaryBorderType]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Start Menu</legend>\r\n        <div>\r\n          <label>Background Color</label>\r\n          <ColorPicker \r\n          color={startMenuBkgr} \r\n          setColor={setStartMenuBkgr} \r\n          useAlpha={true} \r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background FX:</label>\r\n          <select\r\n            value={theme.startMenuBackgroundFX}\r\n            onChange={(e) => theme.setStartMenuBackgroundFX(e.target.value)}\r\n          >{\r\n              theme.backgroundFXList.map((fx) => (\r\n                <option key={fx} value={fx}>{fx}</option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Lists Direction</label>\r\n          <select\r\n            value={startMenuFlexDirection}\r\n            onChange={(e) => setStartMenuFlexDirection(e.target.value)}\r\n          >\r\n            <option value=\"row\">Row</option>\r\n            <option value=\"row-reverse\">Row Reverse</option>\r\n            <option value=\"column\">Column</option>\r\n            <option value=\"column-reverse\">Column Reverse</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Padding</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"10\"\r\n            value={startMenuPadding}\r\n            onChange={(e) => setStartMenuPadding(e.target.value)} />\r\n        </div>\r\n        <div>\r\n          <label>Border Color</label>\r\n          <ColorPicker \r\n          color={startMenuBorderColor} \r\n          setColor={setStartMenuBorderColor} \r\n          useAlpha={true} \r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Width</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"10\"\r\n            value={startMenuBorderWidth}\r\n            onChange={(e) => setStartMenuBorderWidth(e.target.value)} />\r\n        </div>\r\n        <div>\r\n          <label>Border Radius</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"10\"\r\n            value={startMenuBorderRadius}\r\n            onChange={(e) => setStartMenuBorderRadius(e.target.value)} />\r\n        </div>\r\n        <div>\r\n          <label>Border Type</label>\r\n          <select\r\n            value={startMenuBorderType}\r\n            onChange={(e) => setStartMenuBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">solid</option>\r\n            <option value=\"double\">double</option>\r\n            <option value=\"dashed\">dashed</option>\r\n            <option value=\"dotted\">dotted</option>\r\n            <option value=\"groove\">groove</option>\r\n            <option value=\"ridge\">ridge</option>\r\n            <option value=\"inset\">inset</option>\r\n            <option value=\"outset\">outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>App List</legend>\r\n        <fieldset>\r\n          <legend>Background</legend>\r\n          <div>\r\n            <label>Background</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryBkgr}\r\n              setColor={setStartMenuPrimaryBkgr}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Hover</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryBkgrHover}\r\n              setColor={setStartMenuPrimaryBkgrHover}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Active</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryBkgrActive}\r\n              setColor={setStartMenuPrimaryBkgrActive}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Font</legend>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryFontColor}\r\n              setColor={setStartMenuPrimaryFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color Hover</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryFontColorHover}\r\n              setColor={setStartMenuPrimaryFontColorHover}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color Active</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryFontColorActive}\r\n              setColor={setStartMenuPrimaryFontColorActive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"32\"\r\n              value={startMenuPrimaryFontSize}\r\n              onChange={(e) => setStartMenuPrimaryFontSize(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            <label>Icon Size</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"32\"\r\n              value={startMenuPrimaryIconSize}\r\n              onChange={(e) => setStartMenuPrimaryIconSize(e.target.value)} />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Dimentions</legend>\r\n          <div>\r\n            <label>Padding</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={startMenuPrimaryPadding}\r\n              onChange={(e) => setStartMenuPrimaryPadding(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            <label>Margin</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={startMenuPrimaryMargin}\r\n              onChange={(e) => setStartMenuPrimaryMargin(e.target.value)} />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryBorderColor}\r\n              setColor={setStartMenuPrimaryBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Width</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={startMenuPrimaryBorderWidth}\r\n              onChange={(e) => setStartMenuPrimaryBorderWidth(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            <label>Radius</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={startMenuPrimaryBorderRadius}\r\n              onChange={(e) => setStartMenuPrimaryBorderRadius(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            <label>Type</label>\r\n            <select\r\n              value={startMenuPrimaryBorderType}\r\n              onChange={(e) => setStartMenuPrimaryBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>System List</legend>\r\n          <fieldset>\r\n            <legend>Background</legend>\r\n            <div>\r\n              <label>Background</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryBkgr}\r\n                setColor={setStartMenuSecondaryBkgr}\r\n                useAlpha={true}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Hover</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryBkgrHover}\r\n                setColor={setStartMenuSecondaryBkgrHover}\r\n                useAlpha={true}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Active</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryBkgrActive}\r\n                setColor={setStartMenuSecondaryBkgrActive}\r\n                useAlpha={true}\r\n              />\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Font</legend>\r\n            <div>\r\n              <label>Visibility</label>\r\n              <select\r\n                value={startMenuSecondaryFontVisibility}\r\n                onChange={(e) => setStartMenuSecondaryFontVisibility(e.target.value)}\r\n              >\r\n                <option value=\"visible\">visible</option>\r\n                <option value=\"none\">hidden</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label>Color</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryFontColor}\r\n                setColor={setStartMenuSecondaryFontColor}\r\n                useAlpha={false}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Color Hover</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryFontColorHover}\r\n                setColor={setStartMenuSecondaryFontColorHover}\r\n                useAlpha={false}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Color Active</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryFontColorActive}\r\n                setColor={setStartMenuSecondaryFontColorActive}\r\n                useAlpha={false}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Font Size</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"32\"\r\n                value={startMenuSecondaryFontSize}\r\n                onChange={(e) => setStartMenuSecondaryFontSize(e.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>Icon Size</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"32\"\r\n                value={startMenuSecondaryIconSize}\r\n                onChange={(e) => setStartMenuSecondaryIconSize(e.target.value)} />\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Dimentions</legend>\r\n            <div>\r\n              <label>Padding</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"10\"\r\n                value={startMenuSecondaryPadding}\r\n                onChange={(e) => setStartMenuSecondaryPadding(e.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>Margin</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"10\"\r\n                value={startMenuSecondaryMargin}\r\n                onChange={(e) => setStartMenuSecondaryMargin(e.target.value)} />\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Border</legend>\r\n            <div>\r\n              <label>Color</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryBorderColor}\r\n                setColor={setStartMenuSecondaryBorderColor}\r\n                useAlpha={true}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Width</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"10\"\r\n                value={startMenuSecondaryBorderWidth}\r\n                onChange={(e) => setStartMenuSecondaryBorderWidth(e.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>Radius</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"10\"\r\n                value={startMenuSecondaryBorderRadius}\r\n                onChange={(e) => setStartMenuSecondaryBorderRadius(e.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>Type</label>\r\n              <select\r\n                value={startMenuSecondaryBorderType}\r\n                onChange={(e) => setStartMenuSecondaryBorderType(e.target.value)}\r\n              >\r\n                <option value=\"solid\">solid</option>\r\n                <option value=\"double\">double</option>\r\n                <option value=\"dashed\">dashed</option>\r\n                <option value=\"dotted\">dotted</option>\r\n                <option value=\"groove\">groove</option>\r\n                <option value=\"ridge\">ridge</option>\r\n                <option value=\"inset\">inset</option>\r\n                <option value=\"outset\">outset</option>\r\n              </select>\r\n            </div>\r\n          </fieldset>\r\n        </fieldset>\r\n      </fieldset>\r\n    </>\r\n  )\r\n};","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FcGlobe } from \"react-icons/fc\";\r\nimport { FcCalculator } from \"react-icons/fc\";\r\n\r\nexport const LiveAppsPreview = () => {\r\n    const themeContext = useContext(ThemeContext);\r\n    const LiveAppsClass = (isSelected) => {\r\n        let ans = \"\";\r\n        switch (themeContext.liveAppsTheme) {\r\n            case \"Classic\":\r\n                ans = \"liveAppsClassic\";\r\n                break;\r\n            case \"Aero\":\r\n                ans = \"liveAppsAero\";\r\n                break;\r\n            case \"Aqua\":\r\n                ans = \"liveAppsAqua\";\r\n                break;\r\n            case \"Default\":\r\n            default:\r\n                ans = \"liveAppsFluent\";\r\n                break;\r\n        }\r\n        if (isSelected) {\r\n            ans += \" \" + ans + \"Active\";\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"space-between\",\r\n                    bottom: \"0\",\r\n                    left: \"0\",\r\n                    width: \"100%\",\r\n                    height: \"var(--TaskbarHeight)\",\r\n                    backgroundColor: \"var(--TaskbarBkgr)\",\r\n                    backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n                    backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n                    backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n                    backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n                    backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n                    zIndex: 1,\r\n                }}\r\n            >\r\n                <live-apps>\r\n                    <button className={LiveAppsClass(true)}>\r\n                        <FcGlobe />\r\n                        <span>Active</span>\r\n                        {themeContext.liveAppsTheme === \"Aqua\" && <FcGlobe />}\r\n                    </button>\r\n                    <button className={LiveAppsClass(false)}>\r\n                        <FcCalculator />\r\n                        <span>Inactive</span>\r\n                        {themeContext.liveAppsTheme === \"Aqua\" && <FcCalculator />}\r\n                    </button>\r\n                </live-apps>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const LiveApps = () => {\r\n\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [liveAppsBkgr, setLiveAppsBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBkgr\", liveAppsBkgr);\r\n    }, [liveAppsBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBkgrHover, setLiveAppsBkgrHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBkgrHover\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBkgrHover\", liveAppsBkgrHover);\r\n    }, [liveAppsBkgrHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBkgrActive, setLiveAppsBkgrActive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBkgrActive\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBkgrActive\", liveAppsBkgrActive);\r\n    }, [liveAppsBkgrActive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsIconSize, setLiveAppsIconSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsIconSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsIconSize\", liveAppsIconSize + \"px\");\r\n    }, [liveAppsIconSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontSize, setLiveAppsFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontSize\", liveAppsFontSize + \"px\");\r\n    }, [liveAppsFontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontColor, setLiveAppsFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontColor\", liveAppsFontColor);\r\n    }, [liveAppsFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontColorHover, setLiveAppsFontColorHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontColorHover\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontColorHover\", liveAppsFontColorHover);\r\n    }, [liveAppsFontColorHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontColorActive, setLiveAppsFontColorActive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontColorActive\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontColorActive\", liveAppsFontColorActive);\r\n    }, [liveAppsFontColorActive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontColorActiveHover, setLiveAppsFontColorActiveHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontColorActiveHover\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontColorActiveHover\", liveAppsFontColorActiveHover);\r\n    }, [liveAppsFontColorActiveHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontVisibility, setLiveAppsFontVisibility] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontVisibility\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontVisibility\", liveAppsFontVisibility);\r\n    }, [liveAppsFontVisibility]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsHeight, setLiveAppsHeight] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsHeight\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsHeight\", liveAppsHeight + \"px\");\r\n    }, [liveAppsHeight]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsMargin, setLiveAppsMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsMargin\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsMargin\", liveAppsMargin + \"px\");\r\n    }, [liveAppsMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsPadding, setLiveAppsPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsPadding\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsPadding\", liveAppsPadding + \"px\");\r\n    }, [liveAppsPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBorderWidth, setLiveAppsBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBorderWidth\", liveAppsBorderWidth + \"px\");\r\n    }, [liveAppsBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBorderRadius, setLiveAppsBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBorderRadius\", liveAppsBorderRadius + \"px\");\r\n    }, [liveAppsBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBorderColor, setLiveAppsBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBorderColor\", liveAppsBorderColor);\r\n    }, [liveAppsBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBorderType, setLiveAppsBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBorderType\", liveAppsBorderType);\r\n    }, [liveAppsBorderType]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Theme</legend>\r\n                <div>\r\n                    <select\r\n                        value={theme.liveAppsTheme}\r\n                        onChange={(e) => { theme.setLiveAppsTheme(e.target.value) }}\r\n                    >\r\n                        {theme.liveAppsThemeList.map((theme) => {\r\n                            return (\r\n                                <option key={theme} value={theme}>\r\n                                    {theme}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Colors</legend>\r\n                <fieldset>\r\n                    <legend>Background</legend>\r\n                    <div>\r\n                        <label>Normal</label>\r\n                        <ColorPicker\r\n                            color={liveAppsBkgr}\r\n                            setColor={setLiveAppsBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Hover</label>\r\n                        <ColorPicker\r\n                            color={liveAppsBkgrHover}\r\n                            setColor={setLiveAppsBkgrHover}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Active</label>\r\n                        <ColorPicker\r\n                            color={liveAppsBkgrActive}\r\n                            setColor={setLiveAppsBkgrActive}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Font</legend>\r\n                    <div>\r\n                        <label>Visibility</label>\r\n                        <select\r\n                            value={liveAppsFontVisibility}\r\n                            onChange={(e) => setLiveAppsFontVisibility(e.target.value)}\r\n                        >\r\n                            <option value=\"visible\">Visible</option>\r\n                            <option value=\"none\">Hidden</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label>Normal</label>\r\n                        <ColorPicker\r\n                            color={liveAppsFontColor}\r\n                            setColor={setLiveAppsFontColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Hover</label>\r\n                        <ColorPicker\r\n                            color={liveAppsFontColorHover}\r\n                            setColor={setLiveAppsFontColorHover}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Active</label>\r\n                        <ColorPicker\r\n                            color={liveAppsFontColorActive}\r\n                            setColor={setLiveAppsFontColorActive}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Dimentions</legend>\r\n                <div>\r\n                    <label>Height</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"80\"\r\n                        value={liveAppsHeight}\r\n                        onChange={(e) => setLiveAppsHeight(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Icon</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"80\"\r\n                        value={liveAppsIconSize}\r\n                        onChange={(e) => setLiveAppsIconSize(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Font</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"30\"\r\n                        value={liveAppsFontVisibility}\r\n                        onChange={(e) => setLiveAppsFontVisibility(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Margin</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={liveAppsMargin}\r\n                        onChange={(e) => setLiveAppsMargin(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Padding</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={liveAppsPadding}\r\n                        onChange={(e) => setLiveAppsPadding(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={liveAppsBorderWidth}\r\n                        onChange={(e) => setLiveAppsBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Radius</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={liveAppsBorderRadius}\r\n                        onChange={(e) => setLiveAppsBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Type</label>\r\n                    <select\r\n                        value={liveAppsBorderType}\r\n                        onChange={(e) => setLiveAppsBorderType(e.target.value)}\r\n                    >\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Color</label>\r\n                    <ColorPicker\r\n                        color={liveAppsBorderColor}\r\n                        setColor={setLiveAppsBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    )\r\n};","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { WiCloudy } from \"react-icons/wi\";\r\n\r\nexport const TrayPreview = () => {\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"space-between\",\r\n                    bottom: \"0\",\r\n                    left: \"0\",\r\n                    width: \"100%\",\r\n                    height: \"var(--TaskbarHeight)\",\r\n                    backgroundColor: \"var(--TaskbarBkgr)\",\r\n                    backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n                    backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n                    backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n                    backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n                    backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n                    zIndex: 1,\r\n                }}\r\n            >\r\n                <live-apps></live-apps>\r\n                <vertical-rect />\r\n                <taskbar-tray>\r\n                    <button>\r\n                        <WiCloudy /> 20°C\r\n                    </button>\r\n                    <button>\r\n                        11:59\r\n                        <br />\r\n                        31/12/2000\r\n                    </button>\r\n                </taskbar-tray>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const Tray = () => {\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [taskbarTrayBkgr, setTaskbarTrayBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBkgr\", taskbarTrayBkgr);\r\n    }, [taskbarTrayBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayMargin, setTaskbarTrayMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayMargin\", taskbarTrayMargin + \"px\");\r\n    }, [taskbarTrayMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayPadding, setTaskbarTrayPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayPadding\", taskbarTrayPadding + \"px\");\r\n    }, [taskbarTrayPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayBorderColor, setTaskbarTrayBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBorderColor\", taskbarTrayBorderColor);\r\n    }, [taskbarTrayBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayBorderRadius, setTaskbarTrayBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBorderRadius\", taskbarTrayBorderRadius + \"px\");\r\n    }, [taskbarTrayBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayBorderWidth, setTaskbarTrayBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBorderWidth\", taskbarTrayBorderWidth + \"px\");\r\n    }, [taskbarTrayBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayBorderType, setTaskbarTrayBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBorderType\", taskbarTrayBorderType);\r\n    }, [taskbarTrayBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBkgr, setTaskbarTrayButtonBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBkgr\", taskbarTrayButtonBkgr);\r\n    }, [taskbarTrayButtonBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBkgrHover, setTaskbarTrayButtonBkgrHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBkgrHover\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBkgrHover\", taskbarTrayButtonBkgrHover);\r\n    }, [taskbarTrayButtonBkgrHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBkgrActive, setTaskbarTrayButtonBkgrActive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBkgrActive\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBkgrActive\", taskbarTrayButtonBkgrActive);\r\n    }, [taskbarTrayButtonBkgrActive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonColor, setTaskbarTrayButtonColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonColor\", taskbarTrayButtonColor);\r\n    }, [taskbarTrayButtonColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonColorHover, setTaskbarTrayButtonColorHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonColorHover\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonColorHover\", taskbarTrayButtonColorHover);\r\n    }, [taskbarTrayButtonColorHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonColorActive, setTaskbarTrayButtonColorActive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonColorActive\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonColorActive\", taskbarTrayButtonColorActive);\r\n    }, [taskbarTrayButtonColorActive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonMargin, setTaskbarTrayButtonMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonMargin\", taskbarTrayButtonMargin + \"px\");\r\n    }, [taskbarTrayButtonMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonPadding, setTaskbarTrayButtonPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonPadding\", taskbarTrayButtonPadding + \"px\");\r\n    }, [taskbarTrayButtonPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBorderColor, setTaskbarTrayButtonBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBorderColor\", taskbarTrayButtonBorderColor);\r\n    }, [taskbarTrayButtonBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBorderRadius, setTaskbarTrayButtonBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBorderRadius\", taskbarTrayButtonBorderRadius + \"px\");\r\n    }, [taskbarTrayButtonBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBorderWidth, setTaskbarTrayButtonBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBorderWidth\", taskbarTrayButtonBorderWidth + \"px\");\r\n    }, [taskbarTrayButtonBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBorderType, setTaskbarTrayButtonBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBorderType\", taskbarTrayButtonBorderType);\r\n    }, [taskbarTrayButtonBorderType]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Tray Group</legend>\r\n                <div>\r\n                    <label>Background:</label>\r\n                    <ColorPicker\r\n                        color={taskbarTrayBkgr}\r\n                        setColor={setTaskbarTrayBkgr}\r\n                        alpha={true}\r\n                    />\r\n                </div>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Magin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayMargin}\r\n                            onChange={(e) => setTaskbarTrayMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayPadding}\r\n                            onChange={(e) => setTaskbarTrayPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayBorderWidth}\r\n                            onChange={(e) => setTaskbarTrayBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarTrayBorderRadius}\r\n                            onChange={(e) => setTaskbarTrayBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayBorderColor}\r\n                            setColor={setTaskbarTrayBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarTrayBorderType}\r\n                            onChange={(e) => setTaskbarTrayBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Button</legend>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Magin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayButtonMargin}\r\n                            onChange={(e) => setTaskbarTrayButtonMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayButtonPadding}\r\n                            onChange={(e) => setTaskbarTrayButtonPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Background Color:</legend>\r\n                    <div>\r\n                        <label>Passive:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonBkgr}\r\n                            setColor={setTaskbarTrayButtonBkgr}\r\n                            alpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Hover:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonBkgrHover}\r\n                            setColor={setTaskbarTrayButtonBkgrHover}\r\n                            alpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Active:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonBkgrActive}\r\n                            setColor={setTaskbarTrayButtonBkgrActive}\r\n                            alpha={true}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Font Color</legend>\r\n                    <div>\r\n                        <label>Passive:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonColor}\r\n                            setColor={setTaskbarTrayButtonColor}\r\n                            alpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Hover:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonColorHover}\r\n                            setColor={setTaskbarTrayButtonColorHover}\r\n                            alpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Active:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonColorActive}\r\n                            setColor={setTaskbarTrayButtonColorActive}\r\n                            alpha={true}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayButtonBorderWidth}\r\n                            onChange={(e) => setTaskbarTrayButtonBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarTrayButtonBorderRadius}\r\n                            onChange={(e) => setTaskbarTrayButtonBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonBorderColor}\r\n                            setColor={setTaskbarTrayButtonBorderColor}\r\n                            alpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarTrayButtonBorderType}\r\n                            onChange={(e) => setTaskbarTrayButtonBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FaCog, FaArrowLeft, FaArrowRight } from \"react-icons/fa\";\r\n\r\nexport const TrayWindowPreview = () => {\r\n\r\n    return (\r\n        <>\r\n            <taskbar-window style={{ bottom: 0 }}>\r\n                <taskbar-window-header style={{ height: \"50px\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                    Header Content\r\n                </taskbar-window-header>\r\n                <taskbar-window-nav>\r\n                    <button><FaCog /></button>\r\n                    <button><FaArrowLeft /></button>\r\n                    <button><FaArrowRight /></button>\r\n                    Nav Bar Content\r\n                </taskbar-window-nav>\r\n                <taskbar-window-body style={{ height: \"100px\", width: \"200px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                    Body Content\r\n                </taskbar-window-body>\r\n                <taskbar-window-footer>\r\n                    Footer Content\r\n                </taskbar-window-footer>\r\n            </taskbar-window>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const TrayWindow = () => {\r\n\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [taskbarWindowBkgr, setTaskbarWindowBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBkgr\", taskbarWindowBkgr);\r\n    }, [taskbarWindowBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowPadding, setTaskbarWindowPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowPadding\", taskbarWindowPadding + \"px\");\r\n    }, [taskbarWindowPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBorderColor, setTaskbarWindowBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBorderColor\", taskbarWindowBorderColor);\r\n    }, [taskbarWindowBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBorderRadius, setTaskbarWindowBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBorderRadius\", taskbarWindowBorderRadius + \"px\");\r\n    }, [taskbarWindowBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBorderWidth, setTaskbarWindowBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBorderWidth\", taskbarWindowBorderWidth + \"px\");\r\n    }, [taskbarWindowBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBorderType, setTaskbarWindowBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBorderType\", taskbarWindowBorderType);\r\n    }, [taskbarWindowBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowXOffset, setTaskbarWindowShadowXOffset] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowXOffset\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowXOffset\", taskbarWindowShadowXOffset + \"px\");\r\n    }, [taskbarWindowShadowXOffset]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowYOffset, setTaskbarWindowShadowYOffset] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowYOffset\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowYOffset\", taskbarWindowShadowYOffset + \"px\");\r\n    }, [taskbarWindowShadowYOffset]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowBlur, setTaskbarWindowShadowBlur] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowBlur\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowBlur\", taskbarWindowShadowBlur + \"px\");\r\n    }, [taskbarWindowShadowBlur]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowSpread, setTaskbarWindowShadowSpread] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowSpread\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowSpread\", taskbarWindowShadowSpread + \"px\");\r\n    }, [taskbarWindowShadowSpread]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowColor, setTaskbarWindowShadowColor] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowColor\"),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowColor\", taskbarWindowShadowColor);\r\n    }, [taskbarWindowShadowColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBkgr, setTaskbarWindowHeaderBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBkgr\", taskbarWindowHeaderBkgr);\r\n    }, [taskbarWindowHeaderBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderColor, setTaskbarWindowHeaderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderColor\", taskbarWindowHeaderColor);\r\n    }, [taskbarWindowHeaderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderMargin, setTaskbarWindowHeaderMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderMargin\", taskbarWindowHeaderMargin + \"px\");\r\n    }, [taskbarWindowHeaderMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderPadding, setTaskbarWindowHeaderPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderPadding\", taskbarWindowHeaderPadding + \"px\");\r\n    }, [taskbarWindowHeaderPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBorderColor, setTaskbarWindowHeaderBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBorderColor\", taskbarWindowHeaderBorderColor);\r\n    }, [taskbarWindowHeaderBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBorderRadius, setTaskbarWindowHeaderBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBorderRadius\", taskbarWindowHeaderBorderRadius + \"px\");\r\n    }, [taskbarWindowHeaderBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBorderWidth, setTaskbarWindowHeaderBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBorderWidth\", taskbarWindowHeaderBorderWidth + \"px\");\r\n    }, [taskbarWindowHeaderBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBorderType, setTaskbarWindowHeaderBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBorderType\", taskbarWindowHeaderBorderType);\r\n    }, [taskbarWindowHeaderBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBkgr, setTaskbarWindowNavBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBkgr\", taskbarWindowNavBkgr);\r\n    }, [taskbarWindowNavBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavColor, setTaskbarWindowNavColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavColor\", taskbarWindowNavColor);\r\n    }, [taskbarWindowNavColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavMargin, setTaskbarWindowNavMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavMargin\", taskbarWindowNavMargin + \"px\");\r\n    }, [taskbarWindowNavMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavPadding, setTaskbarWindowNavPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavPadding\", taskbarWindowNavPadding + \"px\");\r\n    }, [taskbarWindowNavPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBorderColor, setTaskbarWindowNavBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBorderColor\", taskbarWindowNavBorderColor);\r\n    }, [taskbarWindowNavBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBorderRadius, setTaskbarWindowNavBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBorderRadius\", taskbarWindowNavBorderRadius + \"px\");\r\n    }, [taskbarWindowNavBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBorderWidth, setTaskbarWindowNavBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBorderWidth\", taskbarWindowNavBorderWidth + \"px\");\r\n    }, [taskbarWindowNavBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBorderType, setTaskbarWindowNavBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBorderType\", taskbarWindowNavBorderType);\r\n    }, [taskbarWindowNavBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBkgr, setTaskbarWindowBodyBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBkgr\", taskbarWindowBodyBkgr);\r\n    }, [taskbarWindowBodyBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyColor, setTaskbarWindowBodyColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyColor\", taskbarWindowBodyColor);\r\n    }, [taskbarWindowBodyColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyMargin, setTaskbarWindowBodyMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyMargin\", taskbarWindowBodyMargin + \"px\");\r\n    }, [taskbarWindowBodyMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyPadding, setTaskbarWindowBodyPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyPadding\", taskbarWindowBodyPadding + \"px\");\r\n    }, [taskbarWindowBodyPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBorderColor, setTaskbarWindowBodyBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBorderColor\", taskbarWindowBodyBorderColor);\r\n    }, [taskbarWindowBodyBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBorderRadius, setTaskbarWindowBodyBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBorderRadius\", taskbarWindowBodyBorderRadius + \"px\");\r\n    }, [taskbarWindowBodyBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBorderWidth, setTaskbarWindowBodyBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBorderWidth\", taskbarWindowBodyBorderWidth + \"px\");\r\n    }, [taskbarWindowBodyBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBorderType, setTaskbarWindowBodyBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBorderType\", taskbarWindowBodyBorderType);\r\n    }, [taskbarWindowBodyBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBkgr, setTaskbarWindowFooterBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBkgr\", taskbarWindowFooterBkgr);\r\n    }, [taskbarWindowFooterBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterColor, setTaskbarWindowFooterColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterColor\", taskbarWindowFooterColor);\r\n    }, [taskbarWindowFooterColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterMargin, setTaskbarWindowFooterMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterMargin\", taskbarWindowFooterMargin + \"px\");\r\n    }, [taskbarWindowFooterMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterPadding, setTaskbarWindowFooterPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterPadding\", taskbarWindowFooterPadding + \"px\");\r\n    }, [taskbarWindowFooterPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBorderColor, setTaskbarWindowFooterBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBorderColor\", taskbarWindowFooterBorderColor);\r\n    }, [taskbarWindowFooterBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBorderRadius, setTaskbarWindowFooterBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBorderRadius\", taskbarWindowFooterBorderRadius + \"px\");\r\n    }, [taskbarWindowFooterBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBorderWidth, setTaskbarWindowFooterBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBorderWidth\", taskbarWindowFooterBorderWidth + \"px\");\r\n    }, [taskbarWindowFooterBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBorderType, setTaskbarWindowFooterBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBorderType\", taskbarWindowFooterBorderType);\r\n    }, [taskbarWindowFooterBorderType]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Tray Window</legend>\r\n                <fieldset>\r\n                    <legend>Background</legend>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBkgr}\r\n                            setColor={setTaskbarWindowBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>FX:</label>\r\n                        <select\r\n                            value={theme.taskbarWindowBackgroundFX}\r\n                            onChange={(e) => theme.setTaskbarWindowBackgroundFX(e.target.value)}\r\n                        >{\r\n                                theme.backgroundFXList.map((fx) => (\r\n                                    <option key={fx} value={fx}>{fx}</option>\r\n                                ))}\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowPadding}\r\n                            onChange={(e) => setTaskbarWindowPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBorderColor}\r\n                            setColor={setTaskbarWindowBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowBorderType}\r\n                            onChange={(e) => setTaskbarWindowBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n        <fieldset>\r\n          <legend>Shadow</legend>\r\n          <div>\r\n            <label>Y-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={taskbarWindowShadowYOffset}\r\n              onChange={(e) => setTaskbarWindowShadowYOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>X-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={taskbarWindowShadowXOffset}\r\n              onChange={(e) => setTaskbarWindowShadowXOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Spread</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={taskbarWindowShadowSpread}\r\n              onChange={(e) => setTaskbarWindowShadowSpread(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Blur</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={taskbarWindowShadowBlur}\r\n              onChange={(e) => setTaskbarWindowShadowBlur(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={taskbarWindowShadowColor}\r\n              setColor={setTaskbarWindowShadowColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Header</legend>\r\n                <fieldset>\r\n                    <legend>Color</legend>\r\n                    <div>\r\n                        <label>Background:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowHeaderBkgr}\r\n                            setColor={setTaskbarWindowHeaderBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowHeaderColor}\r\n                            setColor={setTaskbarWindowHeaderColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Margin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowHeaderMargin}\r\n                            onChange={(e) => setTaskbarWindowHeaderMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowHeaderPadding}\r\n                            onChange={(e) => setTaskbarWindowHeaderPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowHeaderBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowHeaderBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowHeaderBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowHeaderBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowHeaderBorderColor}\r\n                            setColor={setTaskbarWindowHeaderBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowHeaderBorderType}\r\n                            onChange={(e) => setTaskbarWindowHeaderBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Nav Bar</legend>\r\n                <fieldset>\r\n                    <legend>Color</legend>\r\n                    <div>\r\n                        <label>Background:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowNavBkgr}\r\n                            setColor={setTaskbarWindowNavBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowNavColor}\r\n                            setColor={setTaskbarWindowNavColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Margin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowNavMargin}\r\n                            onChange={(e) => setTaskbarWindowNavMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowNavPadding}\r\n                            onChange={(e) => setTaskbarWindowNavPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowNavBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowNavBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowNavBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowNavBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowNavBorderColor}\r\n                            setColor={setTaskbarWindowNavBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowNavBorderType}\r\n                            onChange={(e) => setTaskbarWindowNavBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Body</legend>\r\n                <fieldset>\r\n                    <legend>Color</legend>\r\n                    <div>\r\n                        <label>Background:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBodyBkgr}\r\n                            setColor={setTaskbarWindowBodyBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBodyColor}\r\n                            setColor={setTaskbarWindowBodyColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Margin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBodyMargin}\r\n                            onChange={(e) => setTaskbarWindowBodyMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBodyPadding}\r\n                            onChange={(e) => setTaskbarWindowBodyPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBodyBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowBodyBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBodyBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowBodyBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBodyBorderColor}\r\n                            setColor={setTaskbarWindowBodyBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowBodyBorderType}\r\n                            onChange={(e) => setTaskbarWindowBodyBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Footer</legend>\r\n                <fieldset>\r\n                    <legend>Color</legend>\r\n                    <div>\r\n                        <label>Background:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowFooterBkgr}\r\n                            setColor={setTaskbarWindowFooterBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowFooterColor}\r\n                            setColor={setTaskbarWindowFooterColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Margin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowFooterMargin}\r\n                            onChange={(e) => setTaskbarWindowFooterMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowFooterPadding}\r\n                            onChange={(e) => setTaskbarWindowFooterPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowFooterBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowFooterBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowFooterBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowFooterBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowFooterBorderColor}\r\n                            setColor={setTaskbarWindowFooterBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowFooterBorderType}\r\n                            onChange={(e) => setTaskbarWindowFooterBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n        </>\r\n    );\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const ContextMenuPreview = () => {\r\n    const [checkbox1, setCheckbox1] = useState(false);\r\n    const [checkbox2, setCheckbox2] = useState(false);\r\n    const [radio, setRadio] = useState(\"1\");\r\n    return (\r\n        <>\r\n            <context-menu style={{ left: 5, top: 5 }}>\r\n                <button>\r\n                    <div>Button</div>\r\n                    <span />\r\n                </button>\r\n                <button>\r\n                    <div>Button with Keybind</div>\r\n                    <span />\r\n                    <kbd>key1 + key2</kbd>\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setCheckbox1(!checkbox1)}>\r\n                    <div>Checkbox 1</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox1} readOnly />\r\n                </button>\r\n                <button onClick={() => setCheckbox2(!checkbox2)}>\r\n                    <div>Checkbox 2</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox2} readOnly />\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setRadio(\"1\")}>\r\n                    <div>Radio 1</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"1\"} readOnly />\r\n                </button>\r\n                <button onClick={() => setRadio(\"2\")}>\r\n                    <div>Radio 2</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"2\"} readOnly />\r\n                </button>\r\n            </context-menu>\r\n        </>\r\n    );\r\n};\r\nexport const ContextMenu = () => {\r\n    var root = document.querySelector(\":root\");\r\n\r\n    const [fontSize, setFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuFontSize\", fontSize + \"px\");\r\n    }, [fontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuFontColor\", fontColor);\r\n    }, [fontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [bkgColor, setBkgColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBkgr\", bkgColor);\r\n    }, [bkgColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderColor\", borderColor);\r\n    }, [borderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderWidth\", borderWidth + \"px\");\r\n    }, [borderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderRadius\", borderRadius + \"px\");\r\n    }, [borderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderType\", borderType);\r\n    }, [borderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverColor, setHoverColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuButtonHoverColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuButtonHoverColor\", hoverColor);\r\n    }, [hoverColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverBkgr, setHoverBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuButtonHoverBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuButtonHoverBkgr\", hoverBkgr);\r\n    }, [hoverBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [padding, setPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuPadding\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuPadding\", padding + \"px\");\r\n    }, [padding]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Font</legend>\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={fontColor}\r\n                        setColor={setFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Font Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={11}\r\n                        max={30}\r\n                        step=\"1\"\r\n                        value={fontSize}\r\n                        onChange={(e) => setFontSize(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background</legend>\r\n                <div>\r\n                    <label>Background Color:</label>\r\n                    <ColorPicker\r\n                        color={bkgColor}\r\n                        setColor={setBkgColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Padding:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={padding}\r\n                        onChange={(e) => setPadding(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Hover</legend>\r\n                <div>\r\n                    <label>Hover Color:</label>\r\n                    <ColorPicker\r\n                        color={hoverColor}\r\n                        setColor={setHoverColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Background Color:</label>\r\n                    <ColorPicker\r\n                        color={hoverBkgr}\r\n                        setColor={setHoverBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};\r\n","// Definitions allows for user personalization of the app aspect and style. See individual components for reference.\r\n\r\nimport { useState, useContext } from \"react\";\r\nimport { Global } from \"./Pages/Global.jsx\";\r\nimport { DesktopPreview, Desktop } from \"./Pages/Desktop.jsx\";\r\nimport { WindowPreview, Window } from \"./Pages/Windows/Window.jsx\";\r\nimport { MenuPreview, Menu } from \"./Pages/Windows/Menu.jsx\";\r\nimport { AppPreview, App } from \"./Pages/Windows/App.jsx\";\r\nimport { DialogPreview, Dialog } from \"./Pages/Windows/Dialog.jsx\";\r\nimport { TaskBarPreview, TaskBar } from \"./Pages/Taskbar/TaskBar.jsx\";\r\nimport { StartPreview, Start } from \"./Pages/Taskbar/Start.jsx\";\r\nimport { StartMenuPreview, StartMenu } from \"./Pages/Taskbar/StartMenu.jsx\";\r\nimport { LiveAppsPreview, LiveApps } from \"./Pages/Taskbar/LiveApps.jsx\";\r\nimport { TrayPreview, Tray } from \"./Pages/Taskbar/Tray.jsx\";\r\nimport { TrayWindowPreview, TrayWindow } from \"./Pages/Taskbar/Window.jsx\";\r\nimport { ContextMenuPreview, ContextMenu } from \"./Pages/ContextMenu.jsx\";\r\nimport Scenario from \"../../System/Desktop/Scenario.jsx\";\r\nimport { BackgroundContext } from \"../../System/Desktop/BackgroundContext.js\";\r\nimport \"./style.css\";\r\n\r\nexport default function Definitions() {\r\n  const [subMenu, setSubMenu] = useState(\"none\");\r\n  const [defPage, setDefPage] = useState(\"Global\");\r\n  const background = useContext(BackgroundContext);\r\n  const menuList = [\r\n    \"Global\",\r\n    \"Desktop\",\r\n    [\"Taskbar\",[\"Taskbar\", \"Start\", \"Start Menu\", \"Live Apps\"]],\r\n    [\"Window\",[\"Window\", \"Menu\", \"App\", \"Dialog\"]],\r\n    [\"Tray\",[\"Tray\", \"Tray Window\"]],\r\n    \"Context Menu\",\r\n  ];\r\n  return (\r\n    <settings-container>\r\n      <nav>\r\n        {menuList.map((menu, index) => {\r\n          if (typeof menu !== \"string\") {\r\n            return (\r\n              <>\r\n                <div\r\n                  key={index}\r\n                  className={subMenu === menu[0] ? \"defMenuButton defMenuButtonON\" : \"defMenuButton\"}\r\n                  onClick={() => {setDefPage(menu[0]);setSubMenu(menu[0])}}\r\n                >{menu[0]}\r\n                </div>\r\n                <div\r\n                  key={index+\"sub\"}\r\n                  className={subMenu === menu[0] ? \"defSubMenu\" : \"defSubMenu defSubMenuHidden\"}\r\n                >\r\n                  {menu[1].map((submenu, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={defPage === submenu ? \"defMenuButton defMenuButtonON\" : \"defMenuButton\"}\r\n                      onClick={() => setDefPage(submenu)}\r\n                    >\r\n                      {submenu}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </>\r\n            );\r\n          } else {\r\n            return (\r\n              <div\r\n                key={index}\r\n                className={defPage === menu ? \"defMenuButton defMenuButtonON\" : \"defMenuButton\"}\r\n                onClick={() => {setDefPage(menu); setSubMenu(\"none\")}}\r\n              >\r\n                {menu}\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n      </nav>\r\n      <form onSubmit={(e) => e.preventDefault()}>\r\n        <div className=\"defPreview\">\r\n          {background.state.active === \"scenario\" ? <Scenario /> : <></>}\r\n          {defPage === \"Desktop\" ? <DesktopPreview /> : <></>}\r\n          {defPage === \"Taskbar\" ? <TaskBarPreview /> : <></>}\r\n          {defPage === \"Start\" ? <StartPreview /> : <></>}\r\n          {defPage === \"Start Menu\" ? <StartMenuPreview /> : <></>}\r\n          {defPage === \"Live Apps\" ? <LiveAppsPreview /> : <></>}\r\n          {defPage === \"Tray\" ? <TrayPreview /> : <></>}\r\n          {defPage === \"Tray Window\" ? <TrayWindowPreview /> : <></>}\r\n          {defPage === \"Window\" ? <WindowPreview /> : <></>}\r\n          {defPage === \"Menu\" ? <MenuPreview /> : <></>}\r\n          {defPage === \"App\" ? <AppPreview /> : <></>}\r\n          {defPage === \"Dialog\" ? <DialogPreview /> : <></>}\r\n          {defPage === \"Context Menu\" ? <ContextMenuPreview /> : <></>}\r\n        </div>\r\n        {defPage === \"Global\" ? <Global /> : <></>}\r\n        {defPage === \"Desktop\" ? <Desktop /> : <></>}\r\n        {defPage === \"Taskbar\" ? <TaskBar /> : <></>}\r\n        {defPage === \"Start\" ? <Start /> : <></>}\r\n        {defPage === \"Start Menu\" ? <StartMenu /> : <></>}\r\n        {defPage === \"Live Apps\" ? <LiveApps /> : <></>}\r\n        {defPage === \"Tray\" ? <Tray /> : <></>}\r\n        {defPage === \"Tray Window\" ? <TrayWindow /> : <></>}\r\n        {defPage === \"Window\" ? <Window /> : <></>}\r\n        {defPage === \"App\" ? <App /> : <></>}\r\n        {defPage === \"Menu\" ? <Menu /> : <></>}\r\n        {defPage === \"Dialog\" ? <Dialog /> : <></>}\r\n        {defPage === \"Context Menu\" ? <ContextMenu /> : <></>}\r\n      </form>\r\n    </settings-container>\r\n  );\r\n};\r\n","import { Canvas } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\nimport { useRef, useMemo, useContext, Suspense } from \"react\";\r\nimport { BackgroundContext } from \"./BackgroundContext.js\";\r\nimport { OrbitControls, Plane, Stars, Sky } from \"@react-three/drei\";\r\nimport { extend, useFrame, useThree, useLoader } from \"@react-three/fiber\";\r\nimport { Water } from \"three-stdlib\";\r\nimport * as WaterNormals from \"./Textures/waternormals.jpeg\";\r\nimport * as HillsNormals from \"./Textures/DesertNormal.png\";\r\nimport * as SandTexture from \"./Textures/SandTexture1.jpg\";\r\n\r\nextend({ Water });\r\n\r\nexport default function Scenario() {\r\n  const background = useContext(BackgroundContext);\r\n  const Ocean = () => {\r\n    const ref = useRef();\r\n    const gl = useThree((state) => state.gl);\r\n    const waterNormals = useLoader(THREE.TextureLoader, WaterNormals.default);\r\n    waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping;\r\n    const geom = useMemo(() => new THREE.PlaneGeometry(1500, 1500), []);\r\n    const config = useMemo(\r\n      () => ({\r\n        textureWidth: 1036,\r\n        textureHeight: 1036,\r\n        waterNormals,\r\n        sunDirection: new THREE.Vector3(),\r\n        sunColor: 0xffffff,\r\n        waterColor: 0x001e0f,\r\n        distortionScale: 0.8,\r\n        fog: true,\r\n        format: gl.encoding,\r\n      }),\r\n      [waterNormals],\r\n    );\r\n    useFrame(\r\n      (state, delta) => (ref.current.material.uniforms.time.value += delta),\r\n    );\r\n    return <water ref={ref} args={[geom, config]} rotation-x={-Math.PI / 2} />;\r\n  };\r\n\r\n  const Desert = () => {\r\n    const ref = useRef();\r\n    const hillsNormals = useLoader(THREE.TextureLoader, HillsNormals.default);\r\n    hillsNormals.wrapS = hillsNormals.wrapT = THREE.ClampToEdgeWrapping;\r\n    const sandTexture = useLoader(THREE.TextureLoader, SandTexture.default);\r\n    sandTexture.wrapS = sandTexture.wrapT = THREE.RepeatWrapping;\r\n    sandTexture.repeat.set(100, 100);\r\n    return <Plane ref={ref} position={[0, -15, 0]} args={[1500, 1500, 150, 150]} rotation-x={-Math.PI / 2}>\r\n      <meshStandardMaterial\r\n        color=\"white\"\r\n        metalness={0.5}\r\n        roughness={0.8}\r\n        map={sandTexture}\r\n        normalMap={hillsNormals}\r\n        normalScale={new THREE.Vector2(0.8, 0.8)}\r\n        displacementMap={hillsNormals}\r\n        displacementScale={50} />\r\n    </Plane>;\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      style={{\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        zIndex: \"-1\",\r\n      }}\r\n      dpr={window.devicePixelRatio}\r\n      camera={{ position: [0, 25, 10], near: 2 }}\r\n    >\r\n      {background.state[\"scenario\"][\"fog\"].isActive &&\r\n        <fog\r\n          attach=\"fog\"\r\n          color={background.state[\"scenario\"][\"fog\"].color}\r\n          near={background.state[\"scenario\"][\"fog\"].near}\r\n          far={background.state[\"scenario\"][\"fog\"].far}\r\n        />}\r\n      <OrbitControls target={[0, 25, 0]} />\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"sun\"].isActive &&\r\n          <Sky\r\n            distance={450000}\r\n            inclination={background.state[\"scenario\"][\"sun\"].inclination}\r\n            azimuth={background.state[\"scenario\"][\"sun\"].azimuth}\r\n            rayleigh={background.state[\"scenario\"][\"sun\"].rayleight}\r\n            turbidity={background.state[\"scenario\"][\"sun\"].turbidity}\r\n            exposure={background.state[\"scenario\"][\"sun\"].exposure}\r\n          />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"stars\"].isActive &&\r\n          <Stars\r\n            radius={440}\r\n            count={background.state[\"scenario\"][\"stars\"].count}\r\n          />}\r\n      </Suspense>\r\n      {background.state[\"scenario\"][\"directionalLight\"].isActive &&\r\n        <pointLight\r\n          color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n          intensity={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n          position={[0, 10000, -1500]}\r\n        />}\r\n      {background.state[\"scenario\"][\"ambientLight\"].isActive &&\r\n        <ambientLight\r\n          intensity={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n          color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n        />}\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"ocean\"].isActive && <Ocean />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"desert\"].isActive && <Desert />}\r\n      </Suspense>\r\n    </Canvas>\r\n  );\r\n};\r\n","export default function rgbToHsl(rgb) {\r\n    let r = rgb[0],\r\n        g = rgb[1],\r\n        b = rgb[2];\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n        cmax = Math.max(r, g, b),\r\n        delta = cmax - cmin,\r\n        h = 0,\r\n        s = 0,\r\n        l = ((cmax + cmin) / 2);\r\n    if (delta === 0) {\r\n        s = 0;\r\n        h = 0;\r\n    }else {\r\n        if (l <= 0.5) {\r\n            s = delta / (cmax + cmin);\r\n        } else {\r\n            s = delta / (2 - cmax-cmin);\r\n        };\r\n        if (cmax === r) {\r\n            h = (g - b) / delta;\r\n        } else if (cmax === g) {\r\n            h = ((b - r) / delta) + 2;\r\n        } else if(cmax === b) {\r\n            h = ((r - g) / delta) + 4;\r\n        }\r\n    }\r\n    h = Math.round(h * 60);\r\n    if (h < 0) {\r\n        h += 360;\r\n    }\r\n    s = Math.abs(s * 100).toFixed(0);\r\n    l = (l * 100 ).toFixed(0);\r\n    let hsl = [h, s + '%', l + '%'];\r\n    return hsl;\r\n}","export default function rgbaToHsla(rgba) {\r\n    var r = rgba[0],\r\n        g = rgba[1],\r\n        b = rgba[2],\r\n        a = rgba[3];\r\n        var r = parseInt(rgba[1], 16);\r\n        var g = parseInt(rgba[2], 16);\r\n        var b = parseInt(rgba[3], 16);\r\n        var a = parseInt(rgba[4], 16);\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n        let cmin = Math.min(r, g, b),\r\n            cmax = Math.max(r, g, b),\r\n            delta = cmax - cmin,\r\n            h = 0,\r\n            s = 0,\r\n            l = ((cmax + cmin) / 2);\r\n        if (delta === 0) {\r\n            s = 0;\r\n            h = 0;\r\n        }else {\r\n            if (l <= 0.5) {\r\n                s = delta / (cmax + cmin);\r\n            } else {\r\n                s = delta / (2 - cmax-cmin);\r\n            };\r\n            if (cmax === r) {\r\n                h = (g - b) / delta;\r\n            } else if (cmax === g) {\r\n                h = ((b - r) / delta) + 2;\r\n            } else if(cmax === b) {\r\n                h = ((r - g) / delta) + 4;\r\n            }\r\n        }\r\n        h = Math.round(h * 60);\r\n        if (h < 0) {\r\n            h += 360;\r\n        }\r\n        s = Math.abs(s * 100).toFixed(0);\r\n        l = (l * 100 ).toFixed(0);\r\n        let hsla = [h, s + '%', l + '%', a];\r\n        return hsla;\r\n    }","/*\r\nCustom color picker to replace default color picker from input[type=\"color\"],\r\nallowing for the use of alpha channel. The color picker is open on click,\r\nand closes on blur. \r\nThe color preview is set on color change, and applied when confirmed, by use \r\nof the callback function setColor, which is passed as props.\r\nThe return value is always in hsl or hsla format.\r\nThe alpha channel is used only if the useAlpha prop is true.\r\n\r\nTODO: \r\nAdd support for gradients,\r\nAdd support for color values RGB, RGBA, hex, and hex with alpha\r\n*/\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport hexToRgb from \"./Converters/hexToRgb\";\r\nimport hexToRgba from \"./Converters/hexToRgba\";\r\nimport rgbToHsl from \"./Converters/rgbToHsl\";\r\nimport rgbaToHsla from \"./Converters/rgbaToHsla\";\r\nimport nameToHsl from \"./Converters/nameToHsl\";\r\nimport \"../styles.css\";\r\n\r\nexport default function ColorPicker({ color, setColor, useAlpha }) {\r\n    const colorPickerRef = useRef(null);\r\n    const hueLumRef = useRef(null);\r\n    const saturationRef = useRef(null);\r\n    const alphaRef = useRef(null);\r\n    const [colorSelectorPos, setColorSelectorPos] = useState({ x: 0, y: 0 });\r\n    const [saturationSliderPos, setSaturationSliderPos] = useState(0);\r\n    const [alphaSliderPos, setAlphaSliderPos] = useState(0);\r\n    const [open, setOpen] = useState(false);\r\n    const [hue, setHue] = useState(0);\r\n    const [lightness, setLightness] = useState(50);\r\n    const [saturation, setSaturation] = useState(100);\r\n    const [alpha, setAlpha] = useState(100);\r\n\r\n    // Focus color picker when open, allowing its closing on blur\r\n    useEffect(() => {\r\n        if (open) {\r\n            colorPickerRef.current.focus();\r\n        }\r\n    }, [open]);\r\n\r\n    // Closes color picker on blur\r\n    const handleBlur = (event) => {\r\n        if (!event.currentTarget.contains(event.relatedTarget)) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    // Set displayed color based on current hue, saturation, and lightness, and uptades slider positions\r\n    useEffect(() => {\r\n        if (color) {\r\n            if (useAlpha) {\r\n                let hslaColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslaColor = rgbaToHsla(hexToRgba(color));\r\n                } else if (color.slice(0, 4) === \"rgba\") {\r\n                    hslaColor = rgbaToHsla(color);\r\n                } else if (color.slice(0, 4) === \"hsla\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslaColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslaColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                }\r\n                setHue(Number(hslaColor[0]));\r\n                setSaturation(Number(hslaColor[1].slice(0, hslaColor[1].length - 1)));\r\n                setLightness(Number(hslaColor[2].slice(0, hslaColor[2].length - 1)));\r\n                setAlpha(Number(hslaColor[3]));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslaColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslaColor[2].slice(0, hslaColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslaColor[1].slice(0, hslaColor[1].length - 1)) / 100) * saturationRect.height);\r\n                    const alphaRect = alphaRef.current.getBoundingClientRect();\r\n                    setAlphaSliderPos(hslaColor[3] * alphaRect.width);\r\n                }\r\n            } else {\r\n                let hslColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslColor = rgbToHsl(hexToRgb(color));\r\n                } else if (color.slice(0, 3) === \"rgb\") {\r\n                    hslColor = rgbToHsl(color);\r\n                } else if (color.slice(0, 3) === \"hsl\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    hslColor = nameToHsl(color);\r\n                }\r\n                setHue(Number(hslColor[0]));\r\n                setSaturation(Number(hslColor[1].slice(0, hslColor[1].length - 1)));\r\n                setLightness(Number(hslColor[2].slice(0, hslColor[2].length - 1)));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslColor[2].slice(0, hslColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslColor[1].slice(0, hslColor[1].length - 1)) / 100) * saturationRect.height);\r\n                }\r\n            }\r\n        }\r\n    }, [open, color, useAlpha])\r\n\r\n    // Draw color map for hue on the x axis and lightness on the y axis, for the current saturation value\r\n    const drawColorMap = (ctx) => {\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        let blockwidth = ctx.canvas.width / 360;\r\n        let blockheight = ctx.canvas.height / 100;\r\n        for (let i = 0; i < 360; i++) {\r\n            for (let j = 0; j < 100; j++) {\r\n                ctx.fillStyle = `hsl(${i},${saturation}%,${100 - j}%)`;\r\n                ctx.fillRect(i * blockwidth, j * blockheight, (i + 1) * blockwidth, (j + 1) * blockheight);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates color map when saturation changes\r\n    useEffect(() => {\r\n        if (hueLumRef.current) {\r\n            const ctxColorPicker = hueLumRef.current.getContext(\"2d\", { alpha: false });\r\n            drawColorMap(ctxColorPicker);\r\n        }\r\n\r\n    }, [open, saturation]);\r\n\r\n    //Updates hue and luminance map slider positions when mouse moves, as well as their respective values\r\n    const handleHueLumMap = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = hueLumRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setColorSelectorPos({ x, y });\r\n                setHue(Math.floor(360 * x / rect.width));\r\n                setLightness(100 - Math.floor(100 * y / rect.height));\r\n            }\r\n        }\r\n    };\r\n    const touchHueLumMap = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = hueLumRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setColorSelectorPos({ x, y });\r\n                setHue(Math.floor(360 * x / rect.width));\r\n                setLightness(100 - Math.floor(100 * y / rect.height));\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates saturation slider position when mouse moves, as well as its value\r\n    const handleSaturationSlider = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = saturationRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setSaturation(100 - Math.floor(100 * y / rect.height));\r\n                setSaturationSliderPos(y);\r\n            }\r\n        }\r\n    };\r\n    const touchSaturationSlider = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = saturationRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setSaturation(100 - Math.floor(100 * y / rect.height));\r\n                setSaturationSliderPos(y);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates alpha slider position when mouse moves, as well as its value\r\n    const handleAlphaSlider = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = alphaRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setAlpha((Math.floor(100 * x / rect.width)) / 100);\r\n                setAlphaSliderPos(x);\r\n            }\r\n        }\r\n    };\r\n    const touchAlphaSlider = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = alphaRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setAlpha((Math.floor(100 * x / rect.width)) / 100);\r\n                setAlphaSliderPos(x);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const handleHueInput = (value) => {\r\n        setHue(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, x: value / 360 * rect.width });\r\n    };\r\n\r\n    const handleLumInput = (value) => {\r\n        setLightness(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, y: (100 - value) / 100 * rect.height });\r\n    };\r\n\r\n    const handleSaturationInput = (value) => {\r\n        setSaturation(value);\r\n        const rect = saturationRef.current.getBoundingClientRect();\r\n        setSaturationSliderPos(((100 - value) / 100) * rect.height);\r\n    };\r\n\r\n    const handleAlphaInput = (value) => {\r\n        setAlpha(value);\r\n        const rect = alphaRef.current.getBoundingClientRect();\r\n        setAlphaSliderPos(value * rect.width);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <color-picker-button onClick={() => setOpen(!open)} >\r\n                <div>\r\n                    <button style={{ background: color }} />\r\n                </div>\r\n            </color-picker-button>\r\n            {open && createPortal(\r\n                <color-picker-window\r\n                    tabIndex=\"0\"\r\n                    ref={colorPickerRef}\r\n                    onBlur={(e) => handleBlur(e)}\r\n                >\r\n                    <div>\r\n                        <hue-light-map>\r\n                            <canvas\r\n                                onMouseDown={(e) => handleHueLumMap(e)}\r\n                                onMouseMove={(e) => handleHueLumMap(e)}\r\n                                onTouchMove={(e) => touchHueLumMap(e)}\r\n                                onTouchStart={(e) => touchHueLumMap(e)}\r\n                                onTouchEnd={(e) => touchHueLumMap(e)}\r\n                                ref={hueLumRef} width=\"180\" height=\"180\"\r\n                                style={{ opacity: useAlpha ? alpha : 1 }}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: colorSelectorPos.y,\r\n                                    left: colorSelectorPos.x,\r\n                                    background:\r\n                                        useAlpha ?\r\n                                            `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` :\r\n                                            `hsl(${hue},${saturation}%,${lightness}%)`\r\n                                }}\r\n                                onMouseDown={(e) => handleHueLumMap(e)}\r\n                                onMouseMove={(e) => handleHueLumMap(e)}\r\n                                onTouchMove={(e) => touchHueLumMap(e)}\r\n                                onTouchStart={(e) => touchHueLumMap(e)}\r\n                                onTouchEnd={(e) => touchHueLumMap(e)}\r\n                            />\r\n                        </hue-light-map>\r\n                        <saturation-slider title=\"Saturation\">\r\n                            <div\r\n                                ref={saturationRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(0deg, hsl(${hue},0%,${lightness}%), hsla(${hue},100%,${lightness}%))`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                                onTouchMove={(e) => touchSaturationSlider(e)}\r\n                                onTouchStart={(e) => touchSaturationSlider(e)}\r\n                                onTouchEnd={(e) => touchSaturationSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: saturationSliderPos,\r\n                                    background: `hsla(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                                onTouchMove={(e) => touchSaturationSlider(e)}\r\n                                onTouchStart={(e) => touchSaturationSlider(e)}\r\n                                onTouchEnd={(e) => touchSaturationSlider(e)}\r\n                            />\r\n                        </saturation-slider>\r\n                    </div>\r\n                    {useAlpha &&\r\n                        <alpha-slider title=\"Alpha\">\r\n                            <div\r\n                                ref={alphaRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(90deg, hsla(${hue},${saturation}%,${lightness}%, 0), hsla(${hue},${saturation}%,${lightness}%, 1))`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                                onTouchMove={(e) => touchAlphaSlider(e)}\r\n                                onTouchStart={(e) => touchAlphaSlider(e)}\r\n                                onTouchEnd={(e) => touchAlphaSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    left: alphaSliderPos,\r\n                                    background: `hsl(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                                onTouchMove={(e) => touchAlphaSlider(e)}\r\n                                onTouchStart={(e) => touchAlphaSlider(e)}\r\n                                onTouchEnd={(e) => touchAlphaSlider(e)}\r\n                            />\r\n                        </alpha-slider>\r\n                    }\r\n                    <color-inputs>\r\n                        <div>\r\n                            Hue\r\n                            <input type=\"number\" min=\"0\" max=\"360\" value={hue}\r\n                                onChange={(e) => handleHueInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Lum.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={lightness}\r\n                                onChange={(e) => handleLumInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Sat.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={saturation}\r\n                                onChange={(e) => handleSaturationInput(e.target.value)} />\r\n                        </div>\r\n                        {useAlpha &&\r\n                            <div>\r\n                                Alpha\r\n                                <input type=\"number\" min=\"0\" max=\"1\" step=\"0.01\" value={alpha}\r\n                                    onChange={(e) => handleAlphaInput(e.target.value)} />\r\n                            </div>\r\n                        }\r\n                    </color-inputs>\r\n                    <color-button >\r\n                        <button\r\n                            style={{\r\n                                background: useAlpha ? `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` : `hsl(${hue},${saturation}%,${lightness}%)`\r\n                            }}\r\n                            onClick={() => { useAlpha ? setColor(`hsla(${hue},${saturation}%,${lightness}%, ${alpha})`) : setColor(`hsl(${hue},${saturation}%,${lightness}%)`) }}\r\n                        >\r\n                            Apply\r\n                        </button>\r\n                    </color-button>\r\n                </color-picker-window>\r\n                , document.getElementById(\"root\"))}\r\n        </>\r\n    );\r\n}","export default function hexToRgba(hex) {\r\n    var result;\r\n    if (hex.length === 5) {\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n        if(result[4] == 0){\r\n            result[4] = 'ff';\r\n        }\r\n    } else if(hex.length === 9) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }else if(hex.length === 8) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        result[4] = 'ff';\r\n    }\r\n        return result\r\n            ? [\r\n                parseInt(result[1], 16),\r\n                parseInt(result[2], 16),\r\n                parseInt(result[3], 16),\r\n                parseInt(result[4], 16) / 255,\r\n            ]\r\n            : null;\r\n}","export default function hexToRgb(hex) {\r\n    var result;\r\n    if(hex.length === 4){\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n    }else{\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }\r\n    return result\r\n        ? [\r\n               parseInt(result[1], 16),\r\n               parseInt(result[2], 16),\r\n               parseInt(result[3], 16),\r\n          ]\r\n        : null;\r\n}","export default function nameToHsl(name) {\r\n    switch(name){\r\n        case \"red\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"green\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"blue\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"yellow\":\r\n            return [60, \"100%\", \"50%\"];\r\n        case \"cyan\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"magenta\":\r\n            return [300, \"100%\", \"50%\"];\r\n        case \"black\":\r\n            return [0, \"0%\", \"0%\"];\r\n        case \"white\":\r\n            return [0, \"0%\", \"100%\"];\r\n        case \"gray\":\r\n        case \"grey\":\r\n            return [0, \"0%\", \"50%\"];\r\n        case \"lightgray\":\r\n        case \"lightgrey\":\r\n            return [0, \"0%\", \"75%\"];\r\n        case \"darkgray\":\r\n        case \"darkgrey\":\r\n            return [0, \"0%\", \"25%\"];\r\n        case \"brown\":\r\n            return [30, \"50%\", \"50%\"];\r\n        case \"orange\":\r\n            return [30, \"100%\", \"50%\"];\r\n        case \"purple\":\r\n            return [270, \"100%\", \"50%\"];\r\n        case \"pink\":\r\n            return [330, \"100%\", \"50%\"];\r\n        case \"lime\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"teal\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"aqua\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"maroon\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"navy\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"olive\":\r\n            return [60, \"100%\", \"50%\"];\r\n        default:\r\n            return [0, \"0%\", \"0%\"];\r\n    }\r\n}"],"names":["Global","theme","useContext","ThemeContext","device","DeviceContext","document","documentElement","_jsxs","_Fragment","children","_jsx","value","deviceType","onChange","e","setDeviceType","target","deviceTypeList","map","setTheme","themeList","mode","setMode","modeList","DesktopPreview","className","style","zIndex","FcGlobe","Desktop","background","BackgroundContext","backgroundMenu","setBackgroundMenu","useState","state","active","root","querySelector","desktopBkgrColor","setDesktopBkgrColor","getComputedStyle","getPropertyValue","useEffect","setProperty","desktopBkgrImage","setDesktopBkgrImage","desktopBkgrSize","setDesktopBkgrSize","desktopBkgrPosition","setDesktopBkgrPosition","desktopBkgrRepeat","setDesktopBkgrRepeat","desktopFontSize","setDesktopFontSize","slice","desktopIconSize","setDesktopIconSize","color","type","gradient","degree","color1","color2","image","url","position","size","repeat","onClick","setActive","ColorPicker","setColor","useAlpha","htmlFor","id","accept","file","reader","FileReader","readAsDataURL","onload","readerEvent","setImage","result","uploadImage","files","cursor","setScenario","isActive","checked","min","max","step","inclination","azimuth","turbidity","rayleight","intensity","count","near","far","Number","WindowPreview","themeContext","top","left","width","height","backgroundColor","borderColor","topBarIconTheme","FaRegWindowMinimize","FaWindowMaximize","AiOutlineClose","RiCloseLargeLine","Window","windowFontColor","setWindowFontColor","windowFontColorInactive","setWindowFontColorInactive","fontSize","setFontSize","topbarTitleAlign","setTopbarTitleAlign","topbarFontColor","setTopbarFontColor","bkgColor","setBkgColor","windowPadding","setWindowPadding","topbarFlexDirection","setTopbarFlexDirection","topbarBkgColor","setTopbarBkgColor","topBarHeight","setTopBarHeight","topBarIconSize","setTopBarIconSize","borderWidth","setBorderWidth","borderRadius","setBorderRadius","borderType","setBorderType","setBorderColor","shadowXOffset","setShadowXOffset","shadowYOffset","setShadowYOffset","shadowBlur","setShadowBlur","shadowSpread","setShadowSpread","shadowColor","setShadowColor","inactiveBorderColor","setInactiveBorderColor","inactiveTopBarBkgColor","setInactiveTopBarBkgColor","topbarFontColorInactive","setTopbarFontColorInactive","inactiveBkgColor","setInactiveBkgColor","windowBackgroundFX","setWindowBackgroundFX","backgroundFXList","backgroundFX","setTopBarIconTheme","topBarIconThemeList","iconTheme","MenuPreview","NavMenu","Fragment","disabled","name","paddingTop","navMenuLocation","Menu","navBkgrColor","setNavBkgrColor","navBkgrColorInactive","setNavBkgrColorInactive","setBackgroundColor","fontColor","setFontColor","hoverFontColor","setHoverFontColor","hoverBkgr","setHoverBkgr","navButtonBkgr","setNavButtonBkgr","navButtonFontColor","setNavButtonFontColor","navButtonHoverBkgr","setNavButtonHoverBkgr","navButtonHoverFontColor","setNavButtonHoverFontColor","navButtonBorderColor","setNavButtonBorderColor","navButtonBorderWidth","setNavButtonBorderWidth","navButtonBorderRadius","setNavButtonBorderRadius","navButtonBorderType","setNavButtonBorderType","setNavMenuLocation","navMenuLocationList","location","AppPreview","textAlign","App","fontColorInactive","setFontColorInactive","bkgColorInactive","setBkgColorInactive","borderColorInactive","setBorderColorInactive","alpha","DialogPreview","buttonClassNeutral","setButtonClassNeutral","buttonClassSuggested","setButtonClassSuggested","buttonClassClose","setButtonClassClose","dialogButtonTheme","setButtonClass","DialogButtonsBar","transform","marginBottom","dialogButtonsLocation","Dialog","dialogBkgrColor","setDialogBkgrColor","dialogBorderColor","setDialogBorderColor","dialogBorderWidth","setDialogBorderWidth","dialogBorderRadius","setDialogBorderRadius","dialogBorderType","setDialogBorderType","dialogInfoBkgr","setDialogInfoBkgr","dialogInfoFontColor","setDialogInfoFontColor","dialogInfoFontSize","setDialogInfoFontSize","dialogInfoBorderColor","setDialogInfoBorderColor","dialogInfoBorderWidth","setDialogInfoBorderWidth","dialogInfoBorderRadius","setDialogInfoBorderRadius","dialogInfoBorderType","setDialogInfoBorderType","dialogPadding","setDialogPadding","dialogTopBarBkgr","setDialogTopBarBkgr","dialogTopBarFontSize","setDialogTopBarFontSize","dialogTopBarFontColor","setDialogTopBarFontColor","dialogButtonBarBkgr","setDialogButtonBarBkgr","dialogButtonBkgr","setDialogButtonBkgr","dialogButtonFontColor","setDialogButtonFontColor","dialogButtonFontSize","setDialogButtonFontSize","dialogButtonBorderColor","setDialogButtonBorderColor","dialogButtonBorderWidth","setDialogButtonBorderWidth","dialogButtonBorderRadius","setDialogButtonBorderRadius","dialogButtonBorderType","setDialogButtonBorderType","setDialogButtonsLocation","dialogButtonsLocationList","buttonLocation","setDialogButtonTheme","dialogButtonThemeList","buttonTheme","TaskBarPreview","startButtonClass","ans","startButtonTheme","display","flexDirection","justifyContent","bottom","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backdropFilter","isolation","viewBox","fill","xmlns","gradientTransform","offset","stopColor","d","stroke","strokeWidth","isSelected","liveAppsTheme","LiveAppsClass","TaskBar","taskbarHeight","setTaskbarHeight","taskbarIconSize","setTaskbarIconSize","taskbarBkgr","setTaskbarBkgr","taskbarFontSize","setTaskbarFontSize","taskbarVerticalBorderColor","setTaskbarVerticalBorderColor","taskbarVerticalBorderWidth","setTaskbarVerticalBorderWidth","taskbarVerticalBorderType","setTaskbarVerticalBorderType","taskbarHorizontalBorderColor","setTaskbarHorizontalBorderColor","taskbarHorizontalBorderWidth","setTaskbarHorizontalBorderWidth","taskbarHorizontalBorderType","setTaskbarHorizontalBorderType","taskbarBackgroundFX","setTaskbarBackgroundFX","fx","StartPreview","open","setOpen","mixBlendMode","transition","Start","startButtonBkgr","setStartButtonBkgr","startButtonBkgrHover","setStartButtonBkgrHover","startButtonBkgrActive","setStartButtonBkgrActive","startButtonIconSize","setStartButtonIconSize","startButtonHeight","setStartButtonHeight","startButtonMargin","setStartButtonMargin","startButtonPadding","setStartButtonPadding","startButtonBorderWidth","setStartButtonBorderWidth","startButtonBorderColor","setStartButtonBorderColor","startButtonBorderType","setStartButtonBorderType","startButtonBorderRadius","setStartButtonBorderRadius","startButtonFontVisibility","setStartButtonFontVisibility","startButtonFontColor","setStartButtonFontColor","startButtonFontSize","setStartButtonFontSize","setStartButtonTheme","startButtonThemeList","StartMenuPreview","class","FaGear","MdOutlineRestartAlt","RiShutDownLine","FcInfo","FcSettings","StartMenu","startMenuBkgr","setStartMenuBkgr","startMenuFlexDirection","setStartMenuFlexDirection","startMenuPadding","setStartMenuPadding","startMenuBorderColor","setStartMenuBorderColor","startMenuBorderWidth","setStartMenuBorderWidth","startMenuBorderRadius","setStartMenuBorderRadius","startMenuBorderType","setStartMenuBorderType","startMenuPrimaryBkgr","setStartMenuPrimaryBkgr","startMenuPrimaryBkgrHover","setStartMenuPrimaryBkgrHover","startMenuPrimaryBkgrActive","setStartMenuPrimaryBkgrActive","startMenuPrimaryFontColor","setStartMenuPrimaryFontColor","startMenuPrimaryFontColorHover","setStartMenuPrimaryFontColorHover","startMenuPrimaryFontColorActive","setStartMenuPrimaryFontColorActive","startMenuPrimaryFontSize","setStartMenuPrimaryFontSize","startMenuPrimaryIconSize","setStartMenuPrimaryIconSize","startMenuPrimaryMargin","setStartMenuPrimaryMargin","startMenuPrimaryPadding","setStartMenuPrimaryPadding","startMenuPrimaryBorderColor","setStartMenuPrimaryBorderColor","startMenuPrimaryBorderWidth","setStartMenuPrimaryBorderWidth","startMenuPrimaryBorderRadius","setStartMenuPrimaryBorderRadius","startMenuPrimaryBorderType","setStartMenuPrimaryBorderType","startMenuSecondaryBkgr","setStartMenuSecondaryBkgr","startMenuSecondaryBkgrHover","setStartMenuSecondaryBkgrHover","startMenuSecondaryBkgrActive","setStartMenuSecondaryBkgrActive","startMenuSecondaryFontVisibility","setStartMenuSecondaryFontVisibility","startMenuSecondaryFontColor","setStartMenuSecondaryFontColor","startMenuSecondaryFontColorHover","setStartMenuSecondaryFontColorHover","startMenuSecondaryFontColorActive","setStartMenuSecondaryFontColorActive","startMenuSecondaryFontSize","setStartMenuSecondaryFontSize","startMenuSecondaryIconSize","setStartMenuSecondaryIconSize","startMenuSecondaryMargin","setStartMenuSecondaryMargin","startMenuSecondaryPadding","setStartMenuSecondaryPadding","startMenuSecondaryBorderColor","setStartMenuSecondaryBorderColor","startMenuSecondaryBorderWidth","setStartMenuSecondaryBorderWidth","startMenuSecondaryBorderRadius","setStartMenuSecondaryBorderRadius","startMenuSecondaryBorderType","setStartMenuSecondaryBorderType","startMenuBackgroundFX","setStartMenuBackgroundFX","LiveAppsPreview","FcCalculator","LiveApps","liveAppsBkgr","setLiveAppsBkgr","liveAppsBkgrHover","setLiveAppsBkgrHover","liveAppsBkgrActive","setLiveAppsBkgrActive","liveAppsIconSize","setLiveAppsIconSize","liveAppsFontSize","setLiveAppsFontSize","liveAppsFontColor","setLiveAppsFontColor","liveAppsFontColorHover","setLiveAppsFontColorHover","liveAppsFontColorActive","setLiveAppsFontColorActive","liveAppsFontColorActiveHover","setLiveAppsFontColorActiveHover","liveAppsFontVisibility","setLiveAppsFontVisibility","liveAppsHeight","setLiveAppsHeight","liveAppsMargin","setLiveAppsMargin","liveAppsPadding","setLiveAppsPadding","liveAppsBorderWidth","setLiveAppsBorderWidth","liveAppsBorderRadius","setLiveAppsBorderRadius","liveAppsBorderColor","setLiveAppsBorderColor","liveAppsBorderType","setLiveAppsBorderType","setLiveAppsTheme","liveAppsThemeList","TrayPreview","WiCloudy","Tray","taskbarTrayBkgr","setTaskbarTrayBkgr","taskbarTrayMargin","setTaskbarTrayMargin","taskbarTrayPadding","setTaskbarTrayPadding","taskbarTrayBorderColor","setTaskbarTrayBorderColor","taskbarTrayBorderRadius","setTaskbarTrayBorderRadius","taskbarTrayBorderWidth","setTaskbarTrayBorderWidth","taskbarTrayBorderType","setTaskbarTrayBorderType","taskbarTrayButtonBkgr","setTaskbarTrayButtonBkgr","taskbarTrayButtonBkgrHover","setTaskbarTrayButtonBkgrHover","taskbarTrayButtonBkgrActive","setTaskbarTrayButtonBkgrActive","taskbarTrayButtonColor","setTaskbarTrayButtonColor","taskbarTrayButtonColorHover","setTaskbarTrayButtonColorHover","taskbarTrayButtonColorActive","setTaskbarTrayButtonColorActive","taskbarTrayButtonMargin","setTaskbarTrayButtonMargin","taskbarTrayButtonPadding","setTaskbarTrayButtonPadding","taskbarTrayButtonBorderColor","setTaskbarTrayButtonBorderColor","taskbarTrayButtonBorderRadius","setTaskbarTrayButtonBorderRadius","taskbarTrayButtonBorderWidth","setTaskbarTrayButtonBorderWidth","taskbarTrayButtonBorderType","setTaskbarTrayButtonBorderType","TrayWindowPreview","alignItems","FaCog","FaArrowLeft","FaArrowRight","TrayWindow","taskbarWindowBkgr","setTaskbarWindowBkgr","taskbarWindowPadding","setTaskbarWindowPadding","taskbarWindowBorderColor","setTaskbarWindowBorderColor","taskbarWindowBorderRadius","setTaskbarWindowBorderRadius","taskbarWindowBorderWidth","setTaskbarWindowBorderWidth","taskbarWindowBorderType","setTaskbarWindowBorderType","taskbarWindowShadowXOffset","setTaskbarWindowShadowXOffset","taskbarWindowShadowYOffset","setTaskbarWindowShadowYOffset","taskbarWindowShadowBlur","setTaskbarWindowShadowBlur","taskbarWindowShadowSpread","setTaskbarWindowShadowSpread","taskbarWindowShadowColor","setTaskbarWindowShadowColor","taskbarWindowHeaderBkgr","setTaskbarWindowHeaderBkgr","taskbarWindowHeaderColor","setTaskbarWindowHeaderColor","taskbarWindowHeaderMargin","setTaskbarWindowHeaderMargin","taskbarWindowHeaderPadding","setTaskbarWindowHeaderPadding","taskbarWindowHeaderBorderColor","setTaskbarWindowHeaderBorderColor","taskbarWindowHeaderBorderRadius","setTaskbarWindowHeaderBorderRadius","taskbarWindowHeaderBorderWidth","setTaskbarWindowHeaderBorderWidth","taskbarWindowHeaderBorderType","setTaskbarWindowHeaderBorderType","taskbarWindowNavBkgr","setTaskbarWindowNavBkgr","taskbarWindowNavColor","setTaskbarWindowNavColor","taskbarWindowNavMargin","setTaskbarWindowNavMargin","taskbarWindowNavPadding","setTaskbarWindowNavPadding","taskbarWindowNavBorderColor","setTaskbarWindowNavBorderColor","taskbarWindowNavBorderRadius","setTaskbarWindowNavBorderRadius","taskbarWindowNavBorderWidth","setTaskbarWindowNavBorderWidth","taskbarWindowNavBorderType","setTaskbarWindowNavBorderType","taskbarWindowBodyBkgr","setTaskbarWindowBodyBkgr","taskbarWindowBodyColor","setTaskbarWindowBodyColor","taskbarWindowBodyMargin","setTaskbarWindowBodyMargin","taskbarWindowBodyPadding","setTaskbarWindowBodyPadding","taskbarWindowBodyBorderColor","setTaskbarWindowBodyBorderColor","taskbarWindowBodyBorderRadius","setTaskbarWindowBodyBorderRadius","taskbarWindowBodyBorderWidth","setTaskbarWindowBodyBorderWidth","taskbarWindowBodyBorderType","setTaskbarWindowBodyBorderType","taskbarWindowFooterBkgr","setTaskbarWindowFooterBkgr","taskbarWindowFooterColor","setTaskbarWindowFooterColor","taskbarWindowFooterMargin","setTaskbarWindowFooterMargin","taskbarWindowFooterPadding","setTaskbarWindowFooterPadding","taskbarWindowFooterBorderColor","setTaskbarWindowFooterBorderColor","taskbarWindowFooterBorderRadius","setTaskbarWindowFooterBorderRadius","taskbarWindowFooterBorderWidth","setTaskbarWindowFooterBorderWidth","taskbarWindowFooterBorderType","setTaskbarWindowFooterBorderType","taskbarWindowBackgroundFX","setTaskbarWindowBackgroundFX","ContextMenuPreview","checkbox1","setCheckbox1","checkbox2","setCheckbox2","radio","setRadio","readOnly","ContextMenu","hoverColor","setHoverColor","padding","setPadding","Definitions","subMenu","setSubMenu","defPage","setDefPage","menu","index","submenu","onSubmit","preventDefault","Scenario","Ocean","ref","useRef","gl","useThree","waterNormals","useLoader","THREE","WaterNormals","wrapS","wrapT","geom","useMemo","config","textureWidth","textureHeight","sunDirection","sunColor","waterColor","distortionScale","fog","format","encoding","useFrame","delta","current","material","uniforms","time","args","Math","PI","Desert","hillsNormals","HillsNormals","sandTexture","SandTexture","set","Plane","metalness","roughness","normalMap","normalScale","displacementMap","displacementScale","Canvas","dpr","window","devicePixelRatio","camera","attach","OrbitControls","Suspense","fallback","Sky","distance","rayleigh","exposure","Stars","radius","extend","Water","rgbToHsl","rgb","r","g","b","cmin","cmax","h","s","l","round","abs","toFixed","rgbaToHsla","rgba","a","parseInt","_ref","colorPickerRef","hueLumRef","saturationRef","alphaRef","colorSelectorPos","setColorSelectorPos","x","y","saturationSliderPos","setSaturationSliderPos","alphaSliderPos","setAlphaSliderPos","hue","setHue","lightness","setLightness","saturation","setSaturation","setAlpha","focus","hslaColor","hex","length","exec","hexToRgba","i","start","end","push","hueLumRect","getBoundingClientRect","saturationRect","alphaRect","hslColor","hexToRgb","nameToHsl","ctx","clearRect","canvas","blockwidth","blockheight","j","fillStyle","fillRect","drawColorMap","getContext","handleHueLumMap","event","buttons","rect","clientX","clientY","floor","touchHueLumMap","touches","handleSaturationSlider","touchSaturationSlider","handleAlphaSlider","touchAlphaSlider","createPortal","tabIndex","onBlur","currentTarget","contains","relatedTarget","onMouseDown","onMouseMove","onTouchMove","onTouchStart","onTouchEnd","opacity","title","handleHueInput","handleLumInput","handleSaturationInput","handleAlphaInput","getElementById"],"sourceRoot":""}