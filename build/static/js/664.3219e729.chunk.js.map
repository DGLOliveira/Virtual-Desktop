{"version":3,"file":"static/js/664.3219e729.chunk.js","mappings":"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","sources":["Apps/Definitions/Pages/Global.jsx","Apps/Definitions/Pages/Desktop.jsx","Apps/Definitions/Pages/Window.jsx","Apps/Definitions/Pages/Taskbar.jsx","Apps/Definitions/Pages/ContextMenu.jsx","Apps/Definitions/index.jsx","System/Desktop/Scenario.jsx","System/GlobalComponents/ColorPicker/Converters/rgbToHsl.js","System/GlobalComponents/ColorPicker/Converters/rgbaToHsla.js","System/GlobalComponents/ColorPicker/ColorPicker.jsx","System/GlobalComponents/ColorPicker/Converters/hexToRgba.js","System/GlobalComponents/ColorPicker/Converters/hexToRgb.js","System/GlobalComponents/ColorPicker/Converters/nameToHsl.js"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"./../../../System/ThemeManager/context.jsx\";\r\n\r\nexport const Global = () => {\r\n    const theme = useContext(ThemeContext);\r\n    /*\r\n    To be moved outside of the component, due to interfering with theme change\r\n    const fontFamilyList = [\r\n    \"Arial\",\r\n    \"Times New Roman\",\r\n    \"Monospace\",\r\n    \"Verdana\",\r\n    \"Georgia\",\r\n    \"Courier New\",\r\n    \"Tahoma\",\r\n    \"Garamond\",\r\n    \"Trebuchet MS\",\r\n    \"Impact\",\r\n    \"Helvetica\",\r\n    \"Arial Black\",\r\n    \"Comic Sans MS\",\r\n    \"Lucida Console\",\r\n    \"Lucida Sans Unicode\",\r\n    \"Lucida Sans\",\r\n    \"Palatino Linotype\",\r\n    \"Book Antiqua\",\r\n    \"Arial Narrow\",\r\n    \"Arial Rounded MT Bold\",\r\n    \"Brush Script MT\",\r\n    \"Century Gothic\",\r\n    \"Century Schoolbook\"\r\n];\r\n    const [fontFamily, setFontFamily] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--GeneralFontFamily\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--GeneralFontFamily\", fontFamily);\r\n    }, [fontFamily]);\r\n    \r\n            <fieldset>\r\n                <legend>Font Family:</legend>\r\n                <select\r\n                    value={fontFamily}\r\n                    onChange={(e) => setFontFamily(e.target.value)}\r\n                >\r\n                    {fontFamilyList.sort().map((font) => (\r\n                        <option key={font} style={{ fontFamily: font }}>\r\n                            {font}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </fieldset>\r\n    */\r\n    \r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Theme:</legend>\r\n                <select\r\n                    value={theme.theme}\r\n                    onChange={(e) => theme.setTheme(e.target.value)}\r\n                >\r\n                    {theme.themeList.map((theme) => (\r\n                        <option key={theme}>{theme}</option>\r\n                    ))}\r\n                </select>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}","//Allows changing desktop shortcuts and background, relying on BackgroundContext\r\n\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { BackgroundContext } from \"../../../System/Desktop/BackgroundContext.js\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const DesktopPreview = () => {\r\n  return (\r\n    <>\r\n      <div className=\"desktopShortcut\" style={{ zIndex: 1 }}>\r\n        <FcGlobe className=\"desktopIcon\" />\r\n        Shortcut\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Desktop = () => {\r\n  const background = useContext(BackgroundContext);\r\n  const [backgroundMenu, setBackgroundMenu] = useState(background.state.active);\r\n  var root = document.querySelector(\":root\");\r\n  const [desktopBkgrColor, setDesktopBkgrColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrColor\"),\r\n  );\r\n  const [desktopBkgrImage, setDesktopBkgrImage] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrImage\"),\r\n  );\r\n  const [desktopBkgrSize, setDesktopBkgrSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrSize\"),\r\n  );\r\n  const [desktopBkgrPosition, setDesktopBkgrPosition] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrPosition\"),\r\n  );\r\n  const [desktopBkgrRepeat, setDesktopBkgrRepeat] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrRepeat\"),\r\n  );\r\n  const [desktopFontSize, setDesktopFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopFontSize\").slice(0, -2),\r\n  );\r\n  const [desktopIconSize, setDesktopIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopIconSize\").slice(0, -2),\r\n  );\r\n  //Upload Image\r\n  const uploadImage = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = (readerEvent) => {\r\n      background.setImage(\r\n        readerEvent.target.result,\r\n        background.state.image.position,\r\n        background.state.image.size,\r\n        background.state.image.repeat);\r\n    }\r\n  };\r\n\r\n  //Update styles\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrColor\", desktopBkgrColor);\r\n    root.style.setProperty(\"--DesktopBkgrImage\", desktopBkgrImage);\r\n    root.style.setProperty(\"--DesktopBkgrSize\", desktopBkgrSize);\r\n    root.style.setProperty(\"--DesktopBkgrPosition\", desktopBkgrPosition);\r\n    root.style.setProperty(\"--DesktopBkgrRepeat\", desktopBkgrRepeat);\r\n    root.style.setProperty(\"--DesktopFontSize\", desktopFontSize + \"px\");\r\n    root.style.setProperty(\"--DesktopIconSize\", desktopIconSize + \"px\");\r\n  }, [desktopBkgrColor, desktopBkgrImage, desktopBkgrSize, desktopBkgrPosition, desktopBkgrRepeat, desktopFontSize, desktopIconSize]);\r\n  //Update background context\r\n  useEffect(() => {\r\n    if (background.state.active === \"color\") {\r\n      if (background.state.color.type === \"color\") {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(\"none\");\r\n      } else if (background.state.color.type === \"gradient\") {\r\n        if (background.state.color.gradient.type === \"linear\") {\r\n          setDesktopBkgrColor(`linear-gradient(${background.state.color.gradient.degree}deg, ${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        } else if (background.state.color.gradient.type === \"radial\") {\r\n          setDesktopBkgrColor(`radial-gradient(${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        }\r\n      }\r\n    } else if (background.state.active === \"image\") {\r\n      if (background.state.image.url) {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(`url(${background.state.image.url})`);\r\n        setDesktopBkgrPosition(background.state.image.position);\r\n        setDesktopBkgrSize(background.state.image.size);\r\n        setDesktopBkgrRepeat(background.state.image.repeat);\r\n      }\r\n    }\r\n  }, [background.state]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Background:\r\n          <div>\r\n            <select value={backgroundMenu} onChange={(e) => setBackgroundMenu(e.target.value)}>\r\n              <option value=\"color\">Color</option>\r\n              <option value=\"image\">Image</option>\r\n              <option value=\"scenario\">3D Scenario</option>\r\n            </select>\r\n          </div></legend>\r\n        {backgroundMenu === \"color\" ? (\r\n          <>\r\n            <div\r\n              className={\r\n                background.state.active === \"color\"\r\n                  ? \"defMenuButton defMenuButtonON\"\r\n                  : \"defMenuButton\"\r\n              }\r\n              onClick={() => background.setActive(\"color\")}\r\n            >\r\n              Use Simple Color\r\n            </div>\r\n            <label>Set Background Color: </label>\r\n            <ColorPicker\r\n              color={desktopBkgrColor}\r\n              setColor={setDesktopBkgrColor}\r\n              useAlpha={false}\r\n            />\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"image\" ? (\r\n          <>\r\n            <div\r\n              className={\r\n                background.state.active === \"image\"\r\n                  ? \"defMenuButton defMenuButtonON\"\r\n                  : \"defMenuButton\"\r\n              }\r\n              onClick={() => background.setActive(\"image\")}\r\n            >\r\n              Use Image\r\n            </div>\r\n            <label htmlFor=\"imageUpload\">Upload Image: </label>\r\n            <input\r\n              id=\"imageUpload\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={(e) => { uploadImage(e.target.files[0]) }} />\r\n            <label htmlFor=\"imagePosition\">Position: </label>\r\n            <select id=\"imagePosition\"\r\n              value={background.state.image.position}\r\n              onChange={(e) => {\r\n                background.setImage(\r\n                  background.state.image.file,\r\n                  e.target.value,\r\n                  background.state.image.size,\r\n                  background.state.image.repeat\r\n                );\r\n                setDesktopBkgrPosition(e.target.value);\r\n              }}>\r\n              <option value=\"top\">Top</option>\r\n              <option value=\"left top\">Top Left</option>\r\n              <option value=\"right top\">Top Right</option>\r\n              <option value=\"center\">Center</option>\r\n              <option value=\"bottom\">Bottom</option>\r\n              <option value=\"left bottom\">Bottom Left</option>\r\n              <option value=\"right bottom\">Bottom Right</option>\r\n              <option value=\"left\">Left</option>\r\n              <option value=\"right\">Right</option>\r\n            </select>\r\n            <label htmlFor=\"imageSize\">Size: </label>\r\n            <select id=\"imageSize\"\r\n              value={background.state.image.size}\r\n              onChange={(e) => {\r\n                background.setImage(\r\n                  background.state.image.file,\r\n                  background.state.image.position,\r\n                  e.target.value,\r\n                  background.state.image.repeat\r\n                );\r\n                setDesktopBkgrSize(e.target.value);\r\n              }}>\r\n              <option value=\"auto\">Auto</option>\r\n              <option value=\"contain\">Contain</option>\r\n              <option value=\"cover\">Cover</option>\r\n              <option value=\"100vw 100vh\">Stretch</option>\r\n            </select>\r\n            <label htmlFor=\"imageRepeat\">Repeat: </label>\r\n            <select id=\"imageRepeat\"\r\n              value={background.state.image.repeat}\r\n              onChange={(e) => {\r\n                background.setImage(\r\n                  background.state.image.file,\r\n                  background.state.image.position,\r\n                  background.state.image.size,\r\n                  e.target.value\r\n                );\r\n                setDesktopBkgrRepeat(e.target.value);\r\n              }}\r\n            >\r\n              <option value=\"no-repeat\">No Repeat</option>\r\n              <option value=\"repeat\">Repeat</option>\r\n              <option value=\"repeat-x\">Repeat X</option>\r\n              <option value=\"repeat-y\">Repeat Y</option>\r\n            </select>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"Shader\" ? <></> : <></>}\r\n        {backgroundMenu === \"scenario\" ? (\r\n          <>\r\n            <div\r\n              className={\r\n                background.state.active === \"scenario\"\r\n                  ? \"defMenuButton defMenuButtonON\"\r\n                  : \"defMenuButton\"\r\n              }\r\n              onClick={() => background.setActive(\"scenario\")}\r\n            >\r\n              Use Scenario\r\n            </div>\r\n            <fieldset>\r\n              <legend\r\n              style={{cursor:\"pointer\"}}\r\n              onClick={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n              > \r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"sun\"].isActive}\r\n                  onChange={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n                />\r\n                Sun & Sky\r\n              </legend>\r\n              {background.state[\"scenario\"][\"sun\"].isActive &&\r\n                <><div>\r\n                  <label>Inclination:</label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                </div>\r\n                  <div>\r\n                    <label>Azimuth:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Turbidity:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Rayleight:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Ambient Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                <ColorPicker\r\n                  color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n                  setColor={(color) => \r\n                    background.setScenario(\"ambientLight\", \"color\", color)}\r\n                  useAlpha={false}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Directional Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                    <ColorPicker\r\n                      color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n                      setColor={(color) => \r\n                        background.setScenario(\"directionalLight\", \"color\", color)}\r\n                      useAlpha={false}\r\n                    />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend \r\n              style={{cursor:\"pointer\"}}\r\n              onClick={() => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"stars\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n                />\r\n                Stars\r\n              </legend>\r\n              {background.state[\"scenario\"][\"stars\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Star Count:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"100000\"\r\n                      value={background.state[\"scenario\"][\"stars\"].count}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"stars\", \"count\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend \r\n              style={{cursor:\"pointer\"}}\r\n              onClick={() => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"fog\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}\r\n                />\r\n                Fog\r\n              </legend>\r\n              {background.state[\"scenario\"][\"fog\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Color:</label>\r\n                    <ColorPicker\r\n                      color={background.state[\"scenario\"][\"fog\"].color}\r\n                      setColor={(color) => background.setScenario(\"fog\", \"color\", color)}\r\n                      useAlpha={false}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Near:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Far:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend> Terrain </legend>\r\n              <div>\r\n                <label>Sea:</label>\r\n                <input type=\"checkbox\" \r\n                checked={background.state[\"scenario\"][\"ocean\"].isActive} \r\n                onChange={() => background.setScenario(\"ocean\", \"isActive\", !background.state[\"scenario\"][\"ocean\"].isActive)}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Dunes:</label>\r\n                <input type=\"checkbox\" \r\n                checked={background.state[\"scenario\"][\"desert\"].isActive} \r\n                onChange={() => background.setScenario(\"desert\", \"isActive\", !background.state[\"scenario\"][\"desert\"].isActive)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Shortcuts</legend>\r\n        <div>\r\n          <label>Icon Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={36}\r\n            max={120}\r\n            step=\"1\"\r\n            value={Number(desktopIconSize)}\r\n            onChange={(e) => setDesktopIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={32}\r\n            step=\"1\"\r\n            value={Number(desktopFontSize)}\r\n            onChange={(e) => setDesktopFontSize(e.target.value)}\r\n          /></div>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","//Allows to change the style of individual tasks windows\r\n\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\nimport {\r\n  FaRegWindowMinimize,\r\n  FaWindowMaximize,\r\n} from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\n\r\nimport {ThemeContext} from \"../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\n\r\nexport const WindowPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  const [buttonClassNeutral, setButtonClassNeutral] = useState(\"appDialogButtonFluent\");\r\n  const [buttonClassSuggested, setButtonClassSuggested] = useState(\"appDialogButtonFluent\");\r\n  const [buttonClassClose, setButtonClassClose] = useState(\"appDialogButtonFluent buttonActiveRed\");\r\n  useEffect(() => {\r\n      switch(themeContext.theme) {\r\n          case \"Aqua\":\r\n              setButtonClassNeutral(\"appDialogButtonAqua appDialogButtonAquaNeutral\");\r\n              setButtonClassSuggested(\"appDialogButtonAqua appDialogButtonAquaBlue\");\r\n              setButtonClassClose(\"appDialogButtonAqua appDialogButtonAquaRed\");\r\n              break;\r\n          default:\r\n              setButtonClassNeutral(\"appDialogButtonFluent\");\r\n              setButtonClassSuggested(\"appDialogButtonFluent\");\r\n              setButtonClassClose(\"appDialogButtonFluent buttonActiveRed\");\r\n              break;\r\n      }\r\n  },[themeContext.theme]);\r\n\r\n  const setButtonClass = (name) => {\r\n      switch(name){\r\n       case \"Close\":\r\n          return buttonClassClose;\r\n      case \"Save\":\r\n      case \"Ok\":\r\n          return buttonClassSuggested;\r\n      default:\r\n          return buttonClassNeutral;\r\n      }\r\n  }\r\n  return (\r\n    <>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"10px\",\r\n          left: \"10px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          backgroundColor: \"var(--WindowBkgrColorInactive)\",\r\n          borderColor: \"var(--WindowBorderColorInactive)\"\r\n        }}\r\n        className=\"app appInactive\"\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowTopBarFontColorInactive)\",\r\n            backgroundColor: \"var(--WindowTopBarBkgrColorInactive)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Inactive</h1>\r\n          {themeContext.topBarIconTheme === \"Aqua\" && (\r\n            <>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaGreen\">+</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaYellow\">-</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaRed\">x</button>\r\n            </>\r\n          )}\r\n          {themeContext.topBarIconTheme === \"Default\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverRed \">\r\n                <AiOutlineClose />\r\n              </button></>}\r\n        </app-top-bar>\r\n        <app-container></app-container>\r\n      </app-window>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50px\",\r\n          left: \"60px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          backgroundColor: \"var(--WindowBkgrColor)\"\r\n        }}\r\n        className=\"app\"\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowTopBarFontColor)\",\r\n            backgroundColor: \"var(--WindowTopBarBkgrColor)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Active</h1>\r\n          {themeContext.topBarIconTheme === \"Aqua\" && (\r\n            <>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaGreen\">+</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaYellow\">-</button>\r\n              <button className=\"appTopBarButtonAqua appTopBarButtonAquaRed\">x</button>\r\n            </>\r\n          )}\r\n          {themeContext.topBarIconTheme === \"Default\" &&\r\n            <>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaRegWindowMinimize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverGray\">\r\n                <FaWindowMaximize />\r\n              </button>\r\n              <button className=\"appTopBarButtonFluent appTopBarButtonFluentHoverRed\">\r\n                <AiOutlineClose />\r\n              </button></>}\r\n        </app-top-bar>\r\n        <app-container></app-container>\r\n      </app-window>\r\n      <app-dialog\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"100px\",\r\n          left: \"320px\",\r\n        }}\r\n      >\r\n        <app-dialog-top-bar>\r\n          Dialog\r\n        </app-dialog-top-bar>\r\n        <app-dialog-info>\r\n          Information\r\n        </app-dialog-info>\r\n        <app-dialog-actions>\r\n          <button className={setButtonClass(\"Ok\")}>Ok</button>\r\n          <button className={setButtonClass(\"Cancel\")}>Cancel</button>\r\n          <button className={setButtonClass(\"Close\")}>Close</button>\r\n        </app-dialog-actions>\r\n      </app-dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Window = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  var root = document.querySelector(\":root\");\r\n  const [windowFontColor, setWindowFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColor\"),\r\n  );\r\n  const [windowFontColorInactive, setWindowFontColorInactive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColorInactive\"),\r\n  )\r\n  const [fontSize, setFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontSize\").slice(0, -2),\r\n  );\r\n  const [topbarTitleAlign, setTopbarTitleAlign] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontAlign\"),\r\n  );\r\n  const [topbarFontColor, setTopbarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontColor\"),\r\n  );\r\n  const [bkgColor, setBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgrColor\"),\r\n  );\r\n  const [windowPadding, setWindowPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowPadding\").slice(0, -2),\r\n  )\r\n  const [topbarFlexDirection, setTopbarFlexDirection] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFlexDirection\"),\r\n  );\r\n  const [topbarBkgColor, setTopbarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgrColor\"),\r\n  );\r\n  const [topBarHeight, setTopBarHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarHeight\").slice(0, -2),\r\n  );\r\n  const [topBarIconSize, setTopBarIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarIconSize\").slice(0, -2),\r\n  );\r\n  const [borderWidth, setBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderWidth\").slice(0, -2),\r\n  );\r\n  const [borderRadius, setBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderRadius\").slice(0, -2),\r\n  );\r\n  const [borderType, setBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderType\"),\r\n  );\r\n  const [borderColor, setBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColor\"),\r\n  );\r\n  const [shadowXOffset, setShadowXOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowXOffset\").slice(0, -2),\r\n  );\r\n  const [shadowYOffset, setShadowYOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowYOffset\").slice(0, -2),\r\n  );\r\n  const [shadowBlur, setShadowBlur] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowBlur\").slice(0, -2),\r\n  );\r\n  const [shadowSpread, setShadowSpread] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowSpread\").slice(0, -2),\r\n  );\r\n  const [shadowColor, setShadowColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowColor\"),\r\n  );\r\n  const [inactiveBorderColor, setInactiveBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColorInactive\"),\r\n  );\r\n  const [inactiveTopBarBkgColor, setInactiveTopBarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgrColorInactive\"),\r\n  );\r\n  const [topbarFontColorInactive, setTopbarFontColorInactive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontColorInactive\"),\r\n  );\r\n  const [inactiveBkgColor, setInactiveBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgrColorInactive\"),\r\n  );\r\n  const [dialogBkgrColor, setDialogBkgrColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBkgrColor\"),\r\n  );\r\n  const [dialogBorderColor, setDialogBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderColor\"),\r\n  );\r\n  const [dialogBorderWidth, setDialogBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderWidth\").slice(0, -2),\r\n  );\r\n  const [dialogBorderRadius, setDialogBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderRadius\").slice(0, -2),\r\n  );\r\n  const [dialogBorderType, setDialogBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderType\"),\r\n  );\r\n  const [dialogInfoBkgr, setDialogInfoBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBkgr\"),\r\n  );\r\n  const [dialogInfoFontColor, setDialogInfoFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontColor\"),\r\n  );\r\n  const [dialogInfoFontSize, setDialogInfoFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontSize\").slice(0, -2),\r\n  );\r\n  const [dialogInfoBorderColor, setDialogInfoBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderColor\"),\r\n  )\r\n  const [dialogInfoBorderWidth, setDialogInfoBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderWidth\").slice(0, -2),\r\n  );\r\n  const [dialogInfoBorderRadius, setDialogInfoBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderRadius\").slice(0, -2),\r\n  );\r\n  const [dialogInfoBorderType, setDialogInfoBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderType\"),\r\n  );\r\n  const [dialogPadding, setDialogPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogPadding\").slice(0, -2),\r\n  )\r\n  const [dialogTopBarBkgr, setDialogTopBarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarBkgr\"),\r\n  );\r\n  const [dialogTopBarFontSize, setDialogTopBarFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontSize\").slice(0, -2),\r\n  );\r\n  const [dialogTopBarFontColor, setDialogTopBarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontColor\"),\r\n  );\r\n  const [dialogButtonBkgr, setDialogButtonBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBkgr\"),\r\n  );\r\n  const [dialogButtonFontColor, setDialogButtonFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontColor\"),\r\n  );\r\n  const [dialogButtonFontSize, setDialogButtonFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontSize\").slice(0, -2),\r\n  );\r\n  const [dialogButtonBorderColor, setDialogButtonBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderColor\"),\r\n  );\r\n  const [dialogButtonBorderWidth, setDialogButtonBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderWidth\").slice(0, -2),\r\n  );\r\n  const [dialogButtonBorderRadius, setDialogButtonBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderRadius\").slice(0, -2),\r\n  );\r\n  const [dialogButtonBorderType, setDialogButtonBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderType\"),\r\n  )\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowFontColor\", windowFontColor);\r\n    root.style.setProperty(\"--WindowFontColorInactive\", windowFontColorInactive);\r\n    root.style.setProperty(\"--WindowPadding\", windowPadding + \"px\");\r\n    root.style.setProperty(\"--WindowTopBarFontSize\", fontSize + \"px\");\r\n    root.style.setProperty(\"--WindowTopBarFontAlign\", topbarTitleAlign);\r\n    root.style.setProperty(\"--WindowTopBarFontColor\", topbarFontColor);\r\n    root.style.setProperty(\"--WindowBkgrColor\", bkgColor);\r\n    root.style.setProperty(\"--WindowTopBarFlexDirection\", topbarFlexDirection);\r\n    root.style.setProperty(\"--WindowTopBarBkgrColor\", topbarBkgColor);\r\n    root.style.setProperty(\"--WindowTopBarHeight\", topBarHeight + \"px\");\r\n    root.style.setProperty(\r\n      \"--WindowTopBarBkgrColorInactive\",\r\n      inactiveTopBarBkgColor,\r\n    );\r\n    root.style.setProperty(\"--WindowTopBarIconSize\", topBarIconSize + \"px\");\r\n    root.style.setProperty(\"--WindowBorderWidth\", borderWidth + \"px\");\r\n    root.style.setProperty(\"--WindowBorderRadius\", borderRadius + \"px\");\r\n    root.style.setProperty(\"--WindowBorderType\", borderType);\r\n    root.style.setProperty(\"--WindowBorderColor\", borderColor);\r\n    root.style.setProperty(\"--WindowBorderColorInactive\", inactiveBorderColor);\r\n    root.style.setProperty(\"--WindowTopBarFontColorInactive\", topbarFontColorInactive);\r\n    root.style.setProperty(\"--WindowBkgrColorInactive\", inactiveBkgColor);\r\n    root.style.setProperty(\"--DialogBkgrColor\", dialogBkgrColor);\r\n    root.style.setProperty(\"--DialogBorderColor\", dialogBorderColor);\r\n    root.style.setProperty(\"--DialogBorderWidth\", dialogBorderWidth + \"px\");\r\n    root.style.setProperty(\"--DialogBorderRadius\", dialogBorderRadius + \"px\");\r\n    root.style.setProperty(\"--DialogBorderType\", dialogBorderType);\r\n    root.style.setProperty(\"--DialogInfoBkgr\", dialogInfoBkgr);\r\n    root.style.setProperty(\"--DialogInfoFontColor\", dialogInfoFontColor);\r\n    root.style.setProperty(\"--DialogInfoFontSize\", dialogInfoFontSize + \"px\");\r\n    root.style.setProperty(\"--DialogInfoBorderColor\", dialogInfoBorderColor);\r\n    root.style.setProperty(\"--DialogInfoBorderWidth\", dialogInfoBorderWidth + \"px\");\r\n    root.style.setProperty(\"--DialogInfoBorderRadius\", dialogInfoBorderRadius + \"px\");\r\n    root.style.setProperty(\"--DialogInfoBorderType\", dialogInfoBorderType);\r\n    root.style.setProperty(\"--DialogPadding\", dialogPadding + \"px\");\r\n    root.style.setProperty(\"--DialogTopBarBkgr\", dialogTopBarBkgr);\r\n    root.style.setProperty(\"--DialogTopBarFontSize\", dialogTopBarFontSize + \"px\");\r\n    root.style.setProperty(\"--DialogTopBarFontColor\", dialogTopBarFontColor);\r\n    root.style.setProperty(\"--DialogButtonBkgr\", dialogButtonBkgr);\r\n    root.style.setProperty(\"--DialogButtonFontColor\", dialogButtonFontColor);\r\n    root.style.setProperty(\"--DialogButtonFontSize\", dialogButtonFontSize + \"px\");\r\n    root.style.setProperty(\"--DialogButtonBorderColor\", dialogButtonBorderColor);\r\n    root.style.setProperty(\"--DialogButtonBorderWidth\", dialogButtonBorderWidth + \"px\");\r\n    root.style.setProperty(\"--DialogButtonBorderRadius\", dialogButtonBorderRadius + \"px\");\r\n    root.style.setProperty(\"--DialogButtonBorderType\", dialogButtonBorderType);\r\n    root.style.setProperty(\"--WindowShadowXOffset\", shadowXOffset + \"px\");\r\n    root.style.setProperty(\"--WindowShadowYOffset\", shadowYOffset + \"px\");\r\n    root.style.setProperty(\"--WindowShadowBlur\", shadowBlur + \"px\");\r\n    root.style.setProperty(\"--WindowShadowColor\", shadowColor);\r\n    root.style.setProperty(\"--WindowShadowSpread\", shadowSpread + \"px\");\r\n  }, [\r\n    windowFontColor,\r\n    windowFontColorInactive,\r\n    windowPadding,\r\n    fontSize,\r\n    topbarTitleAlign,\r\n    topbarFontColor,\r\n    bkgColor,\r\n    topbarFlexDirection,\r\n    topbarBkgColor,\r\n    topBarHeight,\r\n    topBarIconSize,\r\n    borderColor,\r\n    borderWidth,\r\n    borderRadius,\r\n    borderType,\r\n    shadowXOffset,\r\n    shadowYOffset,\r\n    shadowBlur,\r\n    shadowSpread,\r\n    shadowColor,\r\n    inactiveTopBarBkgColor,\r\n    topbarFontColorInactive,\r\n    inactiveBkgColor,\r\n    inactiveBorderColor,\r\n    dialogBkgrColor,\r\n    dialogBorderColor,\r\n    dialogBorderWidth,\r\n    dialogBorderRadius,\r\n    dialogBorderType,\r\n    dialogInfoBkgr,\r\n    dialogInfoFontColor,\r\n    dialogInfoFontSize,\r\n    dialogInfoBorderColor,\r\n    dialogInfoBorderWidth,\r\n    dialogInfoBorderRadius,\r\n    dialogInfoBorderType,\r\n    dialogPadding,\r\n    dialogTopBarBkgr,\r\n    dialogTopBarFontSize,\r\n    dialogTopBarFontColor,\r\n    dialogButtonBkgr,\r\n    dialogButtonFontColor,\r\n    dialogButtonFontSize,\r\n    dialogButtonBorderColor,\r\n    dialogButtonBorderWidth,\r\n    dialogButtonBorderRadius,\r\n    dialogButtonBorderType,\r\n  ]);\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Window</legend>\r\n        <div>\r\n          <label>Background Effect:</label>\r\n          <select\r\n            value={themeContext.windowBackgroundFX}\r\n            onChange={(e) => themeContext.setWindowBackgroundFX(e.target.value)}\r\n          >\r\n            {themeContext.backgroundFXList.map((backgroundFX) => (\r\n              <option key={backgroundFX} value={backgroundFX}>\r\n                {backgroundFX}\r\n              </option>\r\n          ))}\r\n          </select>\r\n        </div>\r\n        <fieldset>\r\n          <legend>Top Bar</legend>\r\n        <div>\r\n          <label>Icon Theme:</label>\r\n          <select\r\n            value={themeContext.topBarIconTheme}\r\n            onChange={(e) => themeContext.setTopBarIconTheme(e.target.value)}\r\n          >\r\n            {themeContext.topBarIconThemeList.map((iconTheme) => (\r\n              <option key={iconTheme} value={iconTheme}>\r\n                {iconTheme}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n          <div>\r\n            <label>Direction:</label>\r\n            <select\r\n              value={topbarFlexDirection}\r\n              onChange={(e) => setTopbarFlexDirection(e.target.value)}\r\n            >\r\n              <option value=\"row\">Close on the Right</option>\r\n              <option value=\"row-reverse\">Close on the Left</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Align Title</label>\r\n            <select\r\n              value={topbarTitleAlign}\r\n              onChange={(e) => setTopbarTitleAlign(e.target.value)}\r\n            >\r\n              <option value=\"left\">Left</option>\r\n              <option value=\"center\">Center</option>\r\n              <option value=\"right\">Right</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Height:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={20}\r\n              max={64}\r\n              step=\"1\"\r\n              value={topBarHeight}\r\n              onChange={(e) => setTopBarHeight(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Icon Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={16}\r\n              max={60}\r\n              step=\"1\"\r\n              value={topBarIconSize}\r\n              onChange={(e) => setTopBarIconSize(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={fontSize}\r\n              onChange={(e) => setFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Border Thickness:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={borderWidth}\r\n              onChange={(e) => setBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={20}\r\n              step=\"1\"\r\n              value={borderRadius}\r\n              onChange={(e) => setBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Type:</label>\r\n            <select\r\n              value={borderType}\r\n              onChange={(e) => setBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Padding:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={windowPadding}\r\n              onChange={(e) => setWindowPadding(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Shadow</legend>\r\n          <div>\r\n            <label>Y-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowYOffset}\r\n              onChange={(e) => setShadowYOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>X-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowXOffset}\r\n              onChange={(e) => setShadowXOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Spread</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowSpread}\r\n              onChange={(e) => setShadowSpread(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Blur</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowBlur}\r\n              onChange={(e) => setShadowBlur(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={shadowColor}\r\n              setColor={setShadowColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Active Window</legend>\r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={topbarBkgColor}\r\n              setColor={setTopbarBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={topbarFontColor}\r\n              setColor={setTopbarFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={bkgColor}\r\n              setColor={setBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color: </label>\r\n            <ColorPicker\r\n              color={windowFontColor}\r\n              setColor={setWindowFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={borderColor}\r\n              setColor={setBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Inactive Window</legend>\r\n          \r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveTopBarBkgColor}\r\n              setColor={setInactiveTopBarBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={topbarFontColorInactive}\r\n              setColor={setTopbarFontColorInactive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBkgColor}\r\n              setColor={setInactiveBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color: </label>\r\n            <ColorPicker\r\n              color={windowFontColorInactive}\r\n              setColor={setWindowFontColorInactive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBorderColor}\r\n              setColor={setInactiveBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Dialog Window</legend>\r\n        <div>\r\n          <label>Background Color: </label>\r\n          <ColorPicker\r\n            color={dialogBkgrColor}\r\n            setColor={setDialogBkgrColor}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background Effect:</label>\r\n          <select\r\n            value={themeContext.windowBackgroundFX}\r\n            onChange={(e) => themeContext.setWindowBackgroundFX(e.target.value)}\r\n          >\r\n            {themeContext.backgroundFXList.map((backgroundFX) => (\r\n              <option key={backgroundFX} value={backgroundFX}>\r\n                {backgroundFX}\r\n              </option>\r\n          ))}\r\n          </select>\r\n        </div>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Color: </label>\r\n            <ColorPicker\r\n              color={dialogBorderColor}\r\n              setColor={setDialogBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Thickness: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogBorderWidth}\r\n              onChange={(e) => setDialogBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={25}\r\n              step=\"1\"\r\n              value={dialogBorderRadius}\r\n              onChange={(e) => setDialogBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Type: </label>\r\n            <select\r\n              value={dialogBorderType}\r\n              onChange={(e) => setDialogBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">Solid</option>\r\n              <option value=\"dashed\">Dashed</option>\r\n              <option value=\"dotted\">Dotted</option>\r\n              <option value=\"double\">Double</option>\r\n              <option value=\"groove\">Groove</option>\r\n              <option value=\"ridge\">Ridge</option>\r\n              <option value=\"inset\">Inset</option>\r\n              <option value=\"outset\">Outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Top Bar</legend>\r\n          <div>\r\n            <label>Background:</label>\r\n            <ColorPicker\r\n              color={dialogTopBarBkgr}\r\n              setColor={setDialogTopBarBkgr}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color:</label>\r\n            <ColorPicker\r\n              color={dialogTopBarFontColor}\r\n              setColor={setDialogTopBarFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={dialogTopBarFontSize}\r\n              onChange={(e) => setDialogTopBarFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Info</legend>\r\n          <div>\r\n            <label>Background:</label>\r\n            <ColorPicker\r\n              color={dialogInfoBkgr}\r\n              setColor={setDialogInfoBkgr}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={dialogInfoFontSize}\r\n              onChange={(e) => setDialogInfoFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color:</label>\r\n            <ColorPicker\r\n              color={dialogInfoFontColor}\r\n              setColor={setDialogInfoFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Color: </label>\r\n            <ColorPicker\r\n              color={dialogInfoBorderColor}\r\n              setColor={setDialogInfoBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Thickness: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogInfoBorderWidth}\r\n              onChange={(e) => setDialogInfoBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={12}\r\n              step=\"1\"\r\n              value={dialogInfoBorderRadius}\r\n              onChange={(e) => setDialogInfoBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Type: </label>\r\n            <select\r\n              value={dialogInfoBorderType}\r\n              onChange={(e) => setDialogInfoBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">Solid</option>\r\n              <option value=\"dashed\">Dashed</option>\r\n              <option value=\"dotted\">Dotted</option>\r\n              <option value=\"double\">Double</option>\r\n              <option value=\"groove\">Groove</option>\r\n              <option value=\"ridge\">Ridge</option>\r\n              <option value=\"inset\">Inset</option>\r\n              <option value=\"outset\">Outset</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Margin Distance</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogPadding}\r\n              onChange={(e) => setDialogPadding(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Button</legend>\r\n          <div>\r\n            <label>Background:</label>\r\n            <ColorPicker\r\n              color={dialogButtonBkgr}\r\n              setColor={setDialogButtonBkgr}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color:</label>\r\n            <ColorPicker\r\n              color={dialogButtonFontColor}\r\n              setColor={setDialogButtonFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={dialogButtonFontSize}\r\n              onChange={(e) => setDialogButtonFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color:</label>\r\n            <ColorPicker\r\n              color={dialogButtonBorderColor}\r\n              setColor={setDialogButtonBorderColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Width:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogButtonBorderWidth}\r\n              onChange={(e) => setDialogButtonBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Radius:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={25}\r\n              step=\"1\"\r\n              value={dialogButtonBorderRadius}\r\n              onChange={(e) => setDialogButtonBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Style:</label>\r\n            <select\r\n              value={dialogButtonBorderType}\r\n              onChange={(e) => setDialogButtonBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">Solid</option>\r\n              <option value=\"dashed\">Dashed</option>\r\n              <option value=\"dotted\">Dotted</option>\r\n              <option value=\"double\">Double</option>\r\n              <option value=\"groove\">Groove</option>\r\n              <option value=\"ridge\">Ridge</option>\r\n              <option value=\"inset\">Inset</option>\r\n              <option value=\"outset\">Outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n      </fieldset >\r\n    </>\r\n  );\r\n};\r\n","//Allows personalization of the taskbar style\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FaGear } from \"react-icons/fa6\";\r\nimport { MdOutlineRestartAlt } from \"react-icons/md\";\r\nimport { RiShutDownLine } from \"react-icons/ri\";\r\nimport { FcGlobe, FcInfo, FcSettings } from \"react-icons/fc\";\r\nimport { WiCloudy } from \"react-icons/wi\";\r\n\r\nexport const TaskbarPreview = () => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          background: \"var(--TaskbarBkgr)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <start-button\r\n        >\r\n          <button>\r\n        <svg width=\"400\" height=\"400\" viewBox=\"0 0 400 400\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path\r\n            className=\"hex hex1\"\r\n            style={{\r\n              mixBlendMode: \"screen\",\r\n              fill: \"#FF0000\",\r\n              transform: \"translate(45%, 23%) scale(1.5)\",\r\n            }}\r\n            d=\"M41.0481 108.077L105 71.1547L168.952 108.077V181.923L105 218.845L41.0481 181.923V108.077Z\"\r\n            stroke=\"#808080\"\r\n            strokeWidth=\"8\"\r\n          />\r\n          <path\r\n            className=\"hex hex2\"\r\n            style={{\r\n              mixBlendMode: \"screen\",\r\n              fill: \"#00FF00\",\r\n              transform: \"translate(-45%, 23%) scale(1.5)\",\r\n            }}\r\n            d=\"M231.048 108.077L295 71.1547L358.952 108.077V181.923L295 218.845L231.048 181.923V108.077Z\"\r\n            stroke=\"#808080\"\r\n            strokeWidth=\"8\"\r\n          />\r\n          <path\r\n            className=\"hex hex3\"\r\n            style={{\r\n              mixBlendMode: \"screen\",\r\n              fill: \"#0000FF\",\r\n              transform: \"translate(0, -45%) scale(1.5)\"\r\n            }}\r\n            d=\"M136.048 273.077L200 236.155L263.952 273.077V346.923L200 383.845L136.048 346.923V273.077Z\"\r\n            stroke=\"#808080\"\r\n            strokeWidth=\"8\"\r\n          />\r\n          <path className=\"axis\" d=\"M200 200L200 60\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n          <path className=\"axis\" d=\"M200 200L78.7564 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n          <path className=\"axis\" d=\"M200 200L321.244 270\" stroke=\"#808080\" strokeWidth=\"8\" />\r\n        </svg>\r\n          </button>\r\n          <start-list class={\"expandHeight expandWidth\"} style={{ left: 0, transition: \"0s\" }}>\r\n            <ul>\r\n              <li>\r\n                <button>\r\n                  <FcGlobe />\r\n                  {\" \"}Program 1\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcInfo />\r\n                  {\" \"}Program 2\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcSettings />\r\n                  {\" \"}Program 3\r\n                </button>\r\n              </li>\r\n            </ul>\r\n            <div style={{ transition: \"0s\" }}>\r\n              <button>\r\n                <FaGear />\r\n                Settings\r\n              </button>\r\n              <button>\r\n                <MdOutlineRestartAlt />\r\n                Refresh\r\n              </button>\r\n              <button className=\"buttonActiveRed\">\r\n                <RiShutDownLine />\r\n                Close\r\n              </button>\r\n            </div>\r\n          </start-list>\r\n        </start-button>\r\n        <live-apps>\r\n          <button>\r\n            <FcGlobe />\r\n          </button>\r\n        </live-apps>\r\n        <taskbar-weather>\r\n          <button>\r\n            <WiCloudy /> 20°C\r\n          </button>\r\n        </taskbar-weather>\r\n        <vertical-rect />\r\n        <task-bar-clock>\r\n          <button>\r\n            11:59\r\n            <br />\r\n            31/12/2000\r\n          </button>\r\n        </task-bar-clock>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport const Taskbar = () => {\r\n  var root = document.querySelector(\":root\");\r\n  const [taskbarHeight, setTaskbarHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHeight\").slice(0, -2),\r\n  );\r\n  const [taskbarBkgr, setTaskbarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarBkgr\"),\r\n  );\r\n  const [taskbarIconSize, setTaskbarIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarIconSize\").slice(0, -2),\r\n  );\r\n  const [taskbarFontSize, setTaskbarFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarFontSize\").slice(0, -2),\r\n  );\r\n  const [taskbarFontColor, setTaskbarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarFontColor\"),\r\n  );\r\n  const [startIconColor, setStartIconColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartIconColor\"),\r\n  );\r\n  const [startMenuBkgr, setStartMenuBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBkgr\"),\r\n  );\r\n  const [startMenuFontColor, setStartMenuFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuFontColor\"),\r\n  );\r\n  const [weatherColor, setWeatherColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarWeatherColor\"),\r\n  );\r\n  const [weatherBkgr, setWeatherBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WeatherBkgr\"),\r\n  );\r\n  const [weatherFontColor, setWeatherFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WeatherFontColor\"),\r\n  );\r\n  const [clockColor, setClockColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarClockColor\"),\r\n  );\r\n  const [clockBkgr, setClockBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--ClockBkgr\"),\r\n  );\r\n  const [clockFontColor, setClockFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--ClockFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHeight\", taskbarHeight + \"px\");\r\n    root.style.setProperty(\"--TaskbarBkgr\", taskbarBkgr);\r\n    root.style.setProperty(\"--TaskbarIconSize\", taskbarIconSize + \"px\");\r\n    root.style.setProperty(\"--TaskbarFontSize\", taskbarFontSize + \"px\");\r\n    root.style.setProperty(\"--TaskbarFontColor\", taskbarFontColor);\r\n    root.style.setProperty(\"--StartMenuBkgr\", startMenuBkgr);\r\n    root.style.setProperty(\"--StartMenuFontColor\", startMenuFontColor);\r\n    root.style.setProperty(\"--StartIconColor\", startIconColor);\r\n    root.style.setProperty(\"--TaskbarWeatherColor\", weatherColor);\r\n    root.style.setProperty(\"--WeatherBkgr\", weatherBkgr);\r\n    root.style.setProperty(\"--WeatherFontColor\", weatherFontColor);\r\n    root.style.setProperty(\"--TaskbarClockColor\", clockColor);\r\n    root.style.setProperty(\"--ClockBkgr\", clockBkgr);\r\n    root.style.setProperty(\"--ClockFontColor\", clockFontColor);\r\n  }, [\r\n    taskbarHeight,\r\n    taskbarBkgr,\r\n    taskbarIconSize,\r\n    taskbarFontSize,\r\n    taskbarFontColor,\r\n    startMenuBkgr,\r\n    startMenuFontColor,\r\n    startIconColor,\r\n    weatherColor,\r\n    weatherBkgr,\r\n    weatherFontColor,\r\n    clockColor,\r\n    clockBkgr,\r\n    clockFontColor,\r\n  ]);\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Taskbar</legend>\r\n        <div>\r\n          <label>Height:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={20}\r\n            max={60}\r\n            step=\"1\"\r\n            value={taskbarHeight}\r\n            onChange={(e) => setTaskbarHeight(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Icon Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={10}\r\n            max={60}\r\n            step=\"1\"\r\n            value={taskbarIconSize}\r\n            onChange={(e) => setTaskbarIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={10}\r\n            max={26}\r\n            step=\"1\"\r\n            value={taskbarFontSize}\r\n            onChange={(e) => setTaskbarFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={taskbarBkgr}\r\n            setColor={setTaskbarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Start Menu</legend>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={startMenuFontColor}\r\n            setColor={setStartMenuFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={startMenuBkgr}\r\n            setColor={setStartMenuBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Extras</legend>\r\n        <fieldset>\r\n          <legend>Weather</legend>\r\n          <div>\r\n            <label>Tray Color:</label>\r\n            <ColorPicker\r\n              color={weatherColor}\r\n              setColor={setWeatherColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Window Background:</label>\r\n            <ColorPicker\r\n              color={weatherBkgr}\r\n              setColor={setWeatherBkgr}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Window Font Color:</label>\r\n            <ColorPicker\r\n              color={weatherFontColor}\r\n              setColor={setWeatherFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Clock</legend>\r\n          <div>\r\n            <label>Tray Color:</label>\r\n            <ColorPicker\r\n              color={clockColor}\r\n              setColor={setClockColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Window Background:</label>\r\n            <ColorPicker\r\n              color={clockBkgr}\r\n              setColor={setClockBkgr}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Window Font Color:</label>\r\n            <ColorPicker\r\n              color={clockFontColor}\r\n              setColor={setClockFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","//Allows personalization of the Context Menu style\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const ContextMenuPreview = () => {\r\n    const [checkbox1, setCheckbox1] = useState(false);\r\n    const [checkbox2, setCheckbox2] = useState(false);\r\n    const [radio, setRadio] = useState(\"1\");\r\n    return (\r\n        <>\r\n            <context-menu style={{ left: 5, top: 5 }}>\r\n                <button>\r\n                    <div>Button</div>\r\n                    <span />\r\n                </button>\r\n                <button>\r\n                    <div>Button with Keybind</div>\r\n                    <span />\r\n                    <kbd>key1 + key2</kbd>\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setCheckbox1(!checkbox1)}>\r\n                    <div>Checkbox 1</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox1} readOnly />\r\n                </button>\r\n                <button onClick={() => setCheckbox2(!checkbox2)}>\r\n                    <div>Checkbox 2</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox2} readOnly />\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setRadio(\"1\")}>\r\n                    <div>Radio 1</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"1\"} readOnly />\r\n                </button>\r\n                <button onClick={() => setRadio(\"2\")}>\r\n                    <div>Radio 2</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"2\"} readOnly />\r\n                </button>\r\n            </context-menu>\r\n        </>\r\n    );\r\n};\r\nexport const ContextMenu = () => {\r\n    var root = document.querySelector(\":root\");\r\n    const [fontSize, setFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontSize\").slice(0, -2),\r\n    );\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontColor\"),\r\n    );\r\n    const [bkgColor, setBkgColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBkgr\"),\r\n    );\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderColor\"),\r\n    );\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderWidth\").slice(0, -2),\r\n    );\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderRadius\").slice(0, -2),\r\n    );\r\n    const [borderType, setBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderType\"),\r\n    );\r\n    const [hoverColor, setHoverColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuButtonHoverBkgr\"),\r\n    );\r\n\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuFontSize\", fontSize + \"px\");\r\n        root.style.setProperty(\"--ContextMenuFontColor\", fontColor);\r\n        root.style.setProperty(\"--ContextMenuBkgr\", bkgColor);\r\n        root.style.setProperty(\"--ContextMenuBorderColor\", borderColor);\r\n        root.style.setProperty(\"--ContextMenuBorderWidth\", borderWidth + \"px\");\r\n        root.style.setProperty(\"--ContextMenuBorderRadius\", borderRadius + \"px\");\r\n        root.style.setProperty(\"--ContextMenuBorderType\", borderType);\r\n        root.style.setProperty(\"--ContextMenuButtonHoverBkgr\", hoverColor);\r\n    }, [fontSize, \r\n        fontColor, \r\n        bkgColor, \r\n        borderColor, \r\n        borderWidth, \r\n        borderRadius, \r\n        borderType,\r\n        hoverColor\r\n    ]);\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Font</legend>\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                      color={fontColor}\r\n                      setColor={setFontColor}\r\n                      useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Font Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={11}\r\n                        max={30}\r\n                        step=\"1\"\r\n                        value={fontSize}\r\n                        onChange={(e) => setFontSize(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background</legend>\r\n                <div>\r\n                    <label>Background Color:</label>\r\n                    <ColorPicker\r\n                      color={bkgColor}\r\n                      setColor={setBkgColor}\r\n                      useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                      color={borderColor}\r\n                      setColor={setBorderColor}\r\n                      useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Hover</legend>\r\n                <div>\r\n                    <label>Hover Color:</label>\r\n                    <ColorPicker\r\n                      color={hoverColor}\r\n                      setColor={setHoverColor}\r\n                      useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};\r\n","// Definitions allows for user personalization of the app aspect and style. See individual components for reference.\r\n\r\nimport { useState, useContext } from \"react\";\r\nimport { Global } from \"./Pages/Global.jsx\";\r\nimport { DesktopPreview, Desktop } from \"./Pages/Desktop.jsx\";\r\nimport { WindowPreview, Window } from \"./Pages/Window.jsx\";\r\nimport { TaskbarPreview, Taskbar } from \"./Pages/Taskbar.jsx\";\r\nimport { ContextMenuPreview, ContextMenu } from \"./Pages/ContextMenu.jsx\";\r\nimport Scenario from \"../../System/Desktop/Scenario.jsx\";\r\nimport { BackgroundContext } from \"../../System/Desktop/BackgroundContext.js\";\r\nimport \"./style.css\";\r\n\r\nexport default function Definitions() {\r\n  const [defPage, setDefPage] = useState(\"Global\");\r\n  const background = useContext(BackgroundContext);\r\n  return (\r\n    <settings-container>\r\n      <nav>\r\n        <div\r\n          onClick={() => setDefPage(\"Global\")}\r\n          className={defPage === \"Global\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Global\r\n        </div>\r\n        <div\r\n          onClick={() => setDefPage(\"Desktop\")}\r\n          className={defPage === \"Desktop\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Desktop\r\n        </div>\r\n        <div\r\n          onClick={() => setDefPage(\"Start\")}\r\n          className={defPage === \"Start\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Taskbar\r\n        </div>\r\n        <div\r\n          onClick={() => setDefPage(\"Window\")}\r\n          className={defPage === \"Window\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Window\r\n        </div>\r\n        <div\r\n          onClick={() => setDefPage(\"ContextMenu\")}\r\n          className={defPage === \"ContextMenu\" ? \"defMenuButtonON\" : \"\"}\r\n        >\r\n          Context Menu\r\n        </div>\r\n      </nav>\r\n      <form onSubmit={(e) => e.preventDefault()}>\r\n        <div className=\"defPreview\">\r\n          {background.state.active===\"scenario\" ? <Scenario /> : <></>}\r\n          {defPage === \"Desktop\" ? <DesktopPreview /> : <></>}\r\n          {defPage === \"Start\" ? <TaskbarPreview /> : <></>}\r\n          {defPage === \"Window\" ? <WindowPreview /> : <></>}\r\n          {defPage === \"ContextMenu\" ? <ContextMenuPreview /> : <></>}\r\n        </div>\r\n        {defPage === \"Global\" ? <Global /> : <></>}\r\n        {defPage === \"Desktop\" ? <Desktop /> : <></>}\r\n        {defPage === \"Start\" ? <Taskbar /> : <></>}\r\n        {defPage === \"Window\" ? <Window /> : <></>}\r\n        {defPage === \"ContextMenu\" ? <ContextMenu /> : <></>}\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n      </form>\r\n    </settings-container>\r\n  );\r\n};\r\n","import { Canvas } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\nimport { useRef, useMemo, useContext, Suspense } from \"react\";\r\nimport { BackgroundContext } from \"./BackgroundContext.js\";\r\nimport { OrbitControls, Plane, Stars, Sky } from \"@react-three/drei\";\r\nimport { extend, useFrame, useThree, useLoader } from \"@react-three/fiber\";\r\nimport { Water } from \"three-stdlib\";\r\nimport * as WaterNormals from \"./Textures/waternormals.jpeg\";\r\nimport * as HillsNormals from \"./Textures/DesertNormal.png\";\r\nimport * as SandTexture from \"./Textures/SandTexture1.jpg\";\r\n\r\nextend({ Water });\r\n\r\nexport default function Scenario() {\r\n  const background = useContext(BackgroundContext);\r\n  const Ocean = () => {\r\n    const ref = useRef();\r\n    const gl = useThree((state) => state.gl);\r\n    const waterNormals = useLoader(THREE.TextureLoader, WaterNormals.default);\r\n    waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping;\r\n    const geom = useMemo(() => new THREE.PlaneGeometry(1500, 1500), []);\r\n    const config = useMemo(\r\n      () => ({\r\n        textureWidth: 1036,\r\n        textureHeight: 1036,\r\n        waterNormals,\r\n        sunDirection: new THREE.Vector3(),\r\n        sunColor: 0xffffff,\r\n        waterColor: 0x001e0f,\r\n        distortionScale: 0.8,\r\n        fog: true,\r\n        format: gl.encoding,\r\n      }),\r\n      [waterNormals],\r\n    );\r\n    useFrame(\r\n      (state, delta) => (ref.current.material.uniforms.time.value += delta),\r\n    );\r\n    return <water ref={ref} args={[geom, config]} rotation-x={-Math.PI / 2} />;\r\n  };\r\n\r\n  const Desert = () => {\r\n    const ref = useRef();\r\n    const hillsNormals = useLoader(THREE.TextureLoader, HillsNormals.default);\r\n    hillsNormals.wrapS = hillsNormals.wrapT = THREE.ClampToEdgeWrapping;\r\n    const sandTexture = useLoader(THREE.TextureLoader, SandTexture.default);\r\n    sandTexture.wrapS = sandTexture.wrapT = THREE.RepeatWrapping;\r\n    sandTexture.repeat.set(100, 100);\r\n    return <Plane ref={ref} position={[0, -15, 0]} args={[1500, 1500, 150, 150]} rotation-x={-Math.PI / 2}>\r\n      <meshStandardMaterial\r\n        color=\"white\"\r\n        metalness={0.5}\r\n        roughness={0.8}\r\n        map={sandTexture}\r\n        normalMap={hillsNormals}\r\n        normalScale={new THREE.Vector2(0.8, 0.8)}\r\n        displacementMap={hillsNormals}\r\n        displacementScale={50} />\r\n    </Plane>;\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      style={{\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        zIndex: \"-1\",\r\n      }}\r\n      dpr={window.devicePixelRatio}\r\n      camera={{ position: [0, 25, 10], near: 2 }}\r\n    >\r\n      {background.state[\"scenario\"][\"fog\"].isActive &&\r\n        <fog\r\n          attach=\"fog\"\r\n          color={background.state[\"scenario\"][\"fog\"].color}\r\n          near={background.state[\"scenario\"][\"fog\"].near}\r\n          far={background.state[\"scenario\"][\"fog\"].far}\r\n        />}\r\n      <OrbitControls target={[0, 25, 0]} />\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"sun\"].isActive &&\r\n          <Sky\r\n            distance={450000}\r\n            inclination={background.state[\"scenario\"][\"sun\"].inclination}\r\n            azimuth={background.state[\"scenario\"][\"sun\"].azimuth}\r\n            rayleigh={background.state[\"scenario\"][\"sun\"].rayleight}\r\n            turbidity={background.state[\"scenario\"][\"sun\"].turbidity}\r\n            exposure={background.state[\"scenario\"][\"sun\"].exposure}\r\n          />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"stars\"].isActive &&\r\n          <Stars\r\n            radius={440}\r\n            count={background.state[\"scenario\"][\"stars\"].count}\r\n          />}\r\n      </Suspense>\r\n      {background.state[\"scenario\"][\"directionalLight\"].isActive &&\r\n        <pointLight\r\n          color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n          intensity={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n          position={[0, 10000, -1500]}\r\n        />}\r\n      {background.state[\"scenario\"][\"ambientLight\"].isActive &&\r\n        <ambientLight\r\n          intensity={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n          color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n        />}\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"ocean\"].isActive && <Ocean />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"desert\"].isActive && <Desert />}\r\n      </Suspense>\r\n    </Canvas>\r\n  );\r\n};\r\n","export default function rgbToHsl(rgb) {\r\n    let r = rgb[0],\r\n        g = rgb[1],\r\n        b = rgb[2];\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n        cmax = Math.max(r, g, b),\r\n        delta = cmax - cmin,\r\n        h = 0,\r\n        s = 0,\r\n        l = ((cmax + cmin) / 2);\r\n    if (delta === 0) {\r\n        s = 0;\r\n        h = 0;\r\n    }else {\r\n        if (l <= 0.5) {\r\n            s = delta / (cmax + cmin);\r\n        } else {\r\n            s = delta / (2 - cmax-cmin);\r\n        };\r\n        if (cmax === r) {\r\n            h = (g - b) / delta;\r\n        } else if (cmax === g) {\r\n            h = ((b - r) / delta) + 2;\r\n        } else if(cmax === b) {\r\n            h = ((r - g) / delta) + 4;\r\n        }\r\n    }\r\n    h = Math.round(h * 60);\r\n    if (h < 0) {\r\n        h += 360;\r\n    }\r\n    s = Math.abs(s * 100).toFixed(0);\r\n    l = (l * 100 ).toFixed(0);\r\n    let hsl = [h, s + '%', l + '%'];\r\n    return hsl;\r\n}","export default function rgbaToHsla(rgba) {\r\n    var r = rgba[0],\r\n        g = rgba[1],\r\n        b = rgba[2],\r\n        a = rgba[3];\r\n        var r = parseInt(rgba[1], 16);\r\n        var g = parseInt(rgba[2], 16);\r\n        var b = parseInt(rgba[3], 16);\r\n        var a = parseInt(rgba[4], 16);\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n        let cmin = Math.min(r, g, b),\r\n            cmax = Math.max(r, g, b),\r\n            delta = cmax - cmin,\r\n            h = 0,\r\n            s = 0,\r\n            l = ((cmax + cmin) / 2);\r\n        if (delta === 0) {\r\n            s = 0;\r\n            h = 0;\r\n        }else {\r\n            if (l <= 0.5) {\r\n                s = delta / (cmax + cmin);\r\n            } else {\r\n                s = delta / (2 - cmax-cmin);\r\n            };\r\n            if (cmax === r) {\r\n                h = (g - b) / delta;\r\n            } else if (cmax === g) {\r\n                h = ((b - r) / delta) + 2;\r\n            } else if(cmax === b) {\r\n                h = ((r - g) / delta) + 4;\r\n            }\r\n        }\r\n        h = Math.round(h * 60);\r\n        if (h < 0) {\r\n            h += 360;\r\n        }\r\n        s = Math.abs(s * 100).toFixed(0);\r\n        l = (l * 100 ).toFixed(0);\r\n        let hsla = [h, s + '%', l + '%', a];\r\n        return hsla;\r\n    }","/*\r\nCustom color picker to replace default color picker from input[type=\"color\"],\r\nallowing for the use of alpha channel. The color picker is open on click,\r\nand closes on blur. \r\nThe color preview is set on color change, and applied when confirmed, by use \r\nof the callback function setColor, which is passed as props.\r\nThe return value is always in hsl or hsla format.\r\nThe alpha channel is used only if the useAlpha prop is true.\r\n\r\nTODO: \r\nAdd support for gradients,\r\nAdd support for color values RGB, RGBA, hex, and hex with alpha\r\n*/\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport hexToRgb from \"./Converters/hexToRgb\";\r\nimport hexToRgba from \"./Converters/hexToRgba\";\r\nimport rgbToHsl from \"./Converters/rgbToHsl\";\r\nimport rgbaToHsla from \"./Converters/rgbaToHsla\";\r\nimport nameToHsl from \"./Converters/nameToHsl\";\r\nimport \"../styles.css\";\r\n\r\nexport default function ColorPicker({ color, setColor, useAlpha }) {\r\n    const colorPickerRef = useRef(null);\r\n    const hueLumRef = useRef(null);\r\n    const saturationRef = useRef(null);\r\n    const alphaRef = useRef(null);\r\n    const [colorSelectorPos, setColorSelectorPos] = useState({ x: 0, y: 0 });\r\n    const [saturationSliderPos, setSaturationSliderPos] = useState(0);\r\n    const [alphaSliderPos, setAlphaSliderPos] = useState(0);\r\n    const [open, setOpen] = useState(false);\r\n    const [hue, setHue] = useState(0);\r\n    const [lightness, setLightness] = useState(50);\r\n    const [saturation, setSaturation] = useState(100);\r\n    const [alpha, setAlpha] = useState(100);\r\n\r\n    // Focus color picker when open, allowing its closing on blur\r\n    useEffect(() => {\r\n        if (open) {\r\n            colorPickerRef.current.focus();\r\n        }\r\n    }, [open]);\r\n\r\n    // Closes color picker on blur\r\n    const handleBlur = (event) => {\r\n        if (!event.currentTarget.contains(event.relatedTarget)) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    // Set displayed color based on current hue, saturation, and lightness, and uptades slider positions\r\n    useEffect(() => {\r\n        if (color) {\r\n            if (useAlpha) {\r\n                let hslaColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslaColor = rgbaToHsla(hexToRgba(color));\r\n                } else if (color.slice(0, 4) === \"rgba\") {\r\n                    hslaColor = rgbaToHsla(color);\r\n                } else if (color.slice(0, 4) === \"hsla\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslaColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslaColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                }\r\n                setHue(Number(hslaColor[0]));\r\n                setSaturation(Number(hslaColor[1].slice(0, hslaColor[1].length - 1)));\r\n                setLightness(Number(hslaColor[2].slice(0, hslaColor[2].length - 1)));\r\n                setAlpha(Number(hslaColor[3]));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslaColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslaColor[2].slice(0, hslaColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslaColor[1].slice(0, hslaColor[1].length - 1)) / 100) * saturationRect.height);\r\n                    const alphaRect = alphaRef.current.getBoundingClientRect();\r\n                    setAlphaSliderPos(hslaColor[3] * alphaRect.width);\r\n                }\r\n            } else {\r\n                let hslColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslColor = rgbToHsl(hexToRgb(color));\r\n                } else if (color.slice(0, 3) === \"rgb\") {\r\n                    hslColor = rgbToHsl(color);\r\n                } else if (color.slice(0, 3) === \"hsl\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    hslColor = nameToHsl(color);\r\n                }\r\n                setHue(Number(hslColor[0]));\r\n                setSaturation(Number(hslColor[1].slice(0, hslColor[1].length - 1)));\r\n                setLightness(Number(hslColor[2].slice(0, hslColor[2].length - 1)));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslColor[2].slice(0, hslColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslColor[1].slice(0, hslColor[1].length - 1)) / 100) * saturationRect.height);\r\n                }\r\n            }\r\n        }\r\n    }, [open, color, useAlpha])\r\n\r\n    // Draw color map for hue on the x axis and lightness on the y axis, for the current saturation value\r\n    const drawColorMap = (ctx) => {\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        let blockwidth = ctx.canvas.width / 360;\r\n        let blockheight = ctx.canvas.height / 100;\r\n        for (let i = 0; i < 360; i++) {\r\n            for (let j = 0; j < 100; j++) {\r\n                ctx.fillStyle = `hsl(${i},${saturation}%,${100 - j}%)`;\r\n                ctx.fillRect(i * blockwidth, j * blockheight, (i + 1) * blockwidth, (j + 1) * blockheight);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates color map when saturation changes\r\n    useEffect(() => {\r\n        if (hueLumRef.current) {\r\n            const ctxColorPicker = hueLumRef.current.getContext(\"2d\", { alpha: false });\r\n            drawColorMap(ctxColorPicker);\r\n        }\r\n\r\n    }, [open, saturation]);\r\n\r\n    //Updates hue and luminance map slider positions when mouse moves, as well as their respective values\r\n    const handleHueLumMap = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = hueLumRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setColorSelectorPos({ x, y });\r\n                setHue(Math.floor(360 * x / rect.width));\r\n                setLightness(100 - Math.floor(100 * y / rect.height));\r\n            }\r\n        }\r\n    };\r\n    const touchHueLumMap = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = hueLumRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setColorSelectorPos({ x, y });\r\n                setHue(Math.floor(360 * x / rect.width));\r\n                setLightness(100 - Math.floor(100 * y / rect.height));\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates saturation slider position when mouse moves, as well as its value\r\n    const handleSaturationSlider = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = saturationRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setSaturation(100 - Math.floor(100 * y / rect.height));\r\n                setSaturationSliderPos(y);\r\n            }\r\n        }\r\n    };\r\n    const touchSaturationSlider = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = saturationRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setSaturation(100 - Math.floor(100 * y / rect.height));\r\n                setSaturationSliderPos(y);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates alpha slider position when mouse moves, as well as its value\r\n    const handleAlphaSlider = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = alphaRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setAlpha((Math.floor(100 * x / rect.width)) / 100);\r\n                setAlphaSliderPos(x);\r\n            }\r\n        }\r\n    };\r\n    const touchAlphaSlider = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = alphaRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setAlpha((Math.floor(100 * x / rect.width)) / 100);\r\n                setAlphaSliderPos(x);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const handleHueInput = (value) => {\r\n        setHue(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, x: value / 360 * rect.width });\r\n    };\r\n\r\n    const handleLumInput = (value) => {\r\n        setLightness(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, y: (100 - value) / 100 * rect.height });\r\n    };\r\n\r\n    const handleSaturationInput = (value) => {\r\n        setSaturation(value);\r\n        const rect = saturationRef.current.getBoundingClientRect();\r\n        setSaturationSliderPos(((100 - value) / 100) * rect.height);\r\n    };\r\n\r\n    const handleAlphaInput = (value) => {\r\n        setAlpha(value);\r\n        const rect = alphaRef.current.getBoundingClientRect();\r\n        setAlphaSliderPos(value * rect.width);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <color-picker-button onClick={() => setOpen(!open)} >\r\n                <div>\r\n                    <button style={{ background: color }} />\r\n                </div>\r\n            </color-picker-button>\r\n            {open && createPortal(\r\n                <color-picker-window\r\n                    tabIndex=\"0\"\r\n                    ref={colorPickerRef}\r\n                    onBlur={(e) => handleBlur(e)}\r\n                >\r\n                    <div>\r\n                        <hue-light-map>\r\n                            <canvas\r\n                                onMouseDown={(e) => handleHueLumMap(e)}\r\n                                onMouseMove={(e) => handleHueLumMap(e)}\r\n                                onTouchMove={(e) => touchHueLumMap(e)}\r\n                                onTouchStart={(e) => touchHueLumMap(e)}\r\n                                onTouchEnd={(e) => touchHueLumMap(e)}\r\n                                ref={hueLumRef} width=\"180\" height=\"180\"\r\n                                style={{ opacity: useAlpha ? alpha : 1 }}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: colorSelectorPos.y,\r\n                                    left: colorSelectorPos.x,\r\n                                    background:\r\n                                        useAlpha ?\r\n                                            `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` :\r\n                                            `hsl(${hue},${saturation}%,${lightness}%)`\r\n                                }}\r\n                                onMouseDown={(e) => handleHueLumMap(e)}\r\n                                onMouseMove={(e) => handleHueLumMap(e)}\r\n                                onTouchMove={(e) => touchHueLumMap(e)}\r\n                                onTouchStart={(e) => touchHueLumMap(e)}\r\n                                onTouchEnd={(e) => touchHueLumMap(e)}\r\n                            />\r\n                        </hue-light-map>\r\n                        <saturation-slider title=\"Saturation\">\r\n                            <div\r\n                                ref={saturationRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(0deg, hsl(${hue},0%,${lightness}%), hsla(${hue},100%,${lightness}%))`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                                onTouchMove={(e) => touchSaturationSlider(e)}\r\n                                onTouchStart={(e) => touchSaturationSlider(e)}\r\n                                onTouchEnd={(e) => touchSaturationSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: saturationSliderPos,\r\n                                    background: `hsla(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                                onTouchMove={(e) => touchSaturationSlider(e)}\r\n                                onTouchStart={(e) => touchSaturationSlider(e)}\r\n                                onTouchEnd={(e) => touchSaturationSlider(e)}\r\n                            />\r\n                        </saturation-slider>\r\n                    </div>\r\n                    {useAlpha &&\r\n                        <alpha-slider title=\"Alpha\">\r\n                            <div\r\n                                ref={alphaRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(90deg, hsla(${hue},${saturation}%,${lightness}%, 0), hsla(${hue},${saturation}%,${lightness}%, 1))`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                                onTouchMove={(e) => touchAlphaSlider(e)}\r\n                                onTouchStart={(e) => touchAlphaSlider(e)}\r\n                                onTouchEnd={(e) => touchAlphaSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    left: alphaSliderPos,\r\n                                    background: `hsl(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                                onTouchMove={(e) => touchAlphaSlider(e)}\r\n                                onTouchStart={(e) => touchAlphaSlider(e)}\r\n                                onTouchEnd={(e) => touchAlphaSlider(e)}\r\n                            />\r\n                        </alpha-slider>\r\n                    }\r\n                    <color-inputs>\r\n                        <div>\r\n                            Hue\r\n                            <input type=\"number\" min=\"0\" max=\"360\" value={hue}\r\n                                onChange={(e) => handleHueInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Lum.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={lightness}\r\n                                onChange={(e) => handleLumInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Sat.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={saturation}\r\n                                onChange={(e) => handleSaturationInput(e.target.value)} />\r\n                        </div>\r\n                        {useAlpha &&\r\n                            <div>\r\n                                Alpha\r\n                                <input type=\"number\" min=\"0\" max=\"1\" step=\"0.01\" value={alpha}\r\n                                    onChange={(e) => handleAlphaInput(e.target.value)} />\r\n                            </div>\r\n                        }\r\n                    </color-inputs>\r\n                    <color-button >\r\n                        <button\r\n                            style={{\r\n                                background: useAlpha ? `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` : `hsl(${hue},${saturation}%,${lightness}%)`\r\n                            }}\r\n                            onClick={() => { useAlpha ? setColor(`hsla(${hue},${saturation}%,${lightness}%, ${alpha})`) : setColor(`hsl(${hue},${saturation}%,${lightness}%)`) }}\r\n                        >\r\n                            Apply\r\n                        </button>\r\n                    </color-button>\r\n                </color-picker-window>\r\n                , document.getElementById(\"root\"))}\r\n        </>\r\n    );\r\n}","export default function hexToRgba(hex) {\r\n    var result;\r\n    if (hex.length === 5) {\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n        if(result[4] == 0){\r\n            result[4] = 'ff';\r\n        }\r\n    } else if(hex.length === 9) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }else if(hex.length === 8) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        result[4] = 'ff';\r\n    }\r\n        return result\r\n            ? [\r\n                parseInt(result[1], 16),\r\n                parseInt(result[2], 16),\r\n                parseInt(result[3], 16),\r\n                parseInt(result[4], 16) / 255,\r\n            ]\r\n            : null;\r\n}","export default function hexToRgb(hex) {\r\n    var result;\r\n    if(hex.length === 4){\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n    }else{\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }\r\n    return result\r\n        ? [\r\n               parseInt(result[1], 16),\r\n               parseInt(result[2], 16),\r\n               parseInt(result[3], 16),\r\n          ]\r\n        : null;\r\n}","export default function nameToHsl(name) {\r\n    switch(name){\r\n        case \"red\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"green\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"blue\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"yellow\":\r\n            return [60, \"100%\", \"50%\"];\r\n        case \"cyan\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"magenta\":\r\n            return [300, \"100%\", \"50%\"];\r\n        case \"black\":\r\n            return [0, \"0%\", \"0%\"];\r\n        case \"white\":\r\n            return [0, \"0%\", \"100%\"];\r\n        case \"gray\":\r\n        case \"grey\":\r\n            return [0, \"0%\", \"50%\"];\r\n        case \"lightgray\":\r\n        case \"lightgrey\":\r\n            return [0, \"0%\", \"75%\"];\r\n        case \"darkgray\":\r\n        case \"darkgrey\":\r\n            return [0, \"0%\", \"25%\"];\r\n        case \"brown\":\r\n            return [30, \"50%\", \"50%\"];\r\n        case \"orange\":\r\n            return [30, \"100%\", \"50%\"];\r\n        case \"purple\":\r\n            return [270, \"100%\", \"50%\"];\r\n        case \"pink\":\r\n            return [330, \"100%\", \"50%\"];\r\n        case \"lime\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"teal\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"aqua\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"maroon\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"navy\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"olive\":\r\n            return [60, \"100%\", \"50%\"];\r\n        default:\r\n            return [0, \"0%\", \"0%\"];\r\n    }\r\n}"],"names":["Global","theme","useContext","ThemeContext","_jsx","_Fragment","children","_jsxs","value","onChange","e","setTheme","target","themeList","map","DesktopPreview","className","style","zIndex","FcGlobe","Desktop","background","BackgroundContext","backgroundMenu","setBackgroundMenu","useState","state","active","root","document","querySelector","desktopBkgrColor","setDesktopBkgrColor","getComputedStyle","getPropertyValue","desktopBkgrImage","setDesktopBkgrImage","desktopBkgrSize","setDesktopBkgrSize","desktopBkgrPosition","setDesktopBkgrPosition","desktopBkgrRepeat","setDesktopBkgrRepeat","desktopFontSize","setDesktopFontSize","slice","desktopIconSize","setDesktopIconSize","useEffect","setProperty","color","type","gradient","degree","color1","color2","image","url","position","size","repeat","onClick","setActive","ColorPicker","setColor","useAlpha","htmlFor","id","accept","file","reader","FileReader","readAsDataURL","onload","readerEvent","setImage","result","uploadImage","files","cursor","setScenario","isActive","checked","min","max","step","inclination","azimuth","turbidity","rayleight","intensity","count","near","far","Number","WindowPreview","themeContext","buttonClassNeutral","setButtonClassNeutral","buttonClassSuggested","setButtonClassSuggested","buttonClassClose","setButtonClassClose","setButtonClass","name","top","left","width","height","backgroundColor","borderColor","topBarIconTheme","FaRegWindowMinimize","FaWindowMaximize","AiOutlineClose","Window","windowFontColor","setWindowFontColor","windowFontColorInactive","setWindowFontColorInactive","fontSize","setFontSize","topbarTitleAlign","setTopbarTitleAlign","topbarFontColor","setTopbarFontColor","bkgColor","setBkgColor","windowPadding","setWindowPadding","topbarFlexDirection","setTopbarFlexDirection","topbarBkgColor","setTopbarBkgColor","topBarHeight","setTopBarHeight","topBarIconSize","setTopBarIconSize","borderWidth","setBorderWidth","borderRadius","setBorderRadius","borderType","setBorderType","setBorderColor","shadowXOffset","setShadowXOffset","shadowYOffset","setShadowYOffset","shadowBlur","setShadowBlur","shadowSpread","setShadowSpread","shadowColor","setShadowColor","inactiveBorderColor","setInactiveBorderColor","inactiveTopBarBkgColor","setInactiveTopBarBkgColor","topbarFontColorInactive","setTopbarFontColorInactive","inactiveBkgColor","setInactiveBkgColor","dialogBkgrColor","setDialogBkgrColor","dialogBorderColor","setDialogBorderColor","dialogBorderWidth","setDialogBorderWidth","dialogBorderRadius","setDialogBorderRadius","dialogBorderType","setDialogBorderType","dialogInfoBkgr","setDialogInfoBkgr","dialogInfoFontColor","setDialogInfoFontColor","dialogInfoFontSize","setDialogInfoFontSize","dialogInfoBorderColor","setDialogInfoBorderColor","dialogInfoBorderWidth","setDialogInfoBorderWidth","dialogInfoBorderRadius","setDialogInfoBorderRadius","dialogInfoBorderType","setDialogInfoBorderType","dialogPadding","setDialogPadding","dialogTopBarBkgr","setDialogTopBarBkgr","dialogTopBarFontSize","setDialogTopBarFontSize","dialogTopBarFontColor","setDialogTopBarFontColor","dialogButtonBkgr","setDialogButtonBkgr","dialogButtonFontColor","setDialogButtonFontColor","dialogButtonFontSize","setDialogButtonFontSize","dialogButtonBorderColor","setDialogButtonBorderColor","dialogButtonBorderWidth","setDialogButtonBorderWidth","dialogButtonBorderRadius","setDialogButtonBorderRadius","dialogButtonBorderType","setDialogButtonBorderType","windowBackgroundFX","setWindowBackgroundFX","backgroundFXList","backgroundFX","setTopBarIconTheme","topBarIconThemeList","iconTheme","TaskbarPreview","display","flexDirection","justifyContent","bottom","viewBox","fill","xmlns","mixBlendMode","transform","d","stroke","strokeWidth","class","transition","FcInfo","FcSettings","FaGear","MdOutlineRestartAlt","RiShutDownLine","WiCloudy","Taskbar","taskbarHeight","setTaskbarHeight","taskbarBkgr","setTaskbarBkgr","taskbarIconSize","setTaskbarIconSize","taskbarFontSize","setTaskbarFontSize","taskbarFontColor","setTaskbarFontColor","startIconColor","setStartIconColor","startMenuBkgr","setStartMenuBkgr","startMenuFontColor","setStartMenuFontColor","weatherColor","setWeatherColor","weatherBkgr","setWeatherBkgr","weatherFontColor","setWeatherFontColor","clockColor","setClockColor","clockBkgr","setClockBkgr","clockFontColor","setClockFontColor","ContextMenuPreview","checkbox1","setCheckbox1","checkbox2","setCheckbox2","radio","setRadio","readOnly","ContextMenu","fontColor","setFontColor","hoverColor","setHoverColor","Definitions","defPage","setDefPage","onSubmit","preventDefault","Scenario","Ocean","ref","useRef","gl","useThree","waterNormals","useLoader","THREE","WaterNormals","wrapS","wrapT","geom","useMemo","config","textureWidth","textureHeight","sunDirection","sunColor","waterColor","distortionScale","fog","format","encoding","useFrame","delta","current","material","uniforms","time","args","Math","PI","Desert","hillsNormals","HillsNormals","sandTexture","SandTexture","set","Plane","metalness","roughness","normalMap","normalScale","displacementMap","displacementScale","Canvas","dpr","window","devicePixelRatio","camera","attach","OrbitControls","Suspense","fallback","Sky","distance","rayleigh","exposure","Stars","radius","extend","Water","rgbToHsl","rgb","r","g","b","cmin","cmax","h","s","l","round","abs","toFixed","rgbaToHsla","rgba","a","parseInt","_ref","colorPickerRef","hueLumRef","saturationRef","alphaRef","colorSelectorPos","setColorSelectorPos","x","y","saturationSliderPos","setSaturationSliderPos","alphaSliderPos","setAlphaSliderPos","open","setOpen","hue","setHue","lightness","setLightness","saturation","setSaturation","alpha","setAlpha","focus","hslaColor","hex","length","exec","hexToRgba","i","start","end","push","hueLumRect","getBoundingClientRect","saturationRect","alphaRect","hslColor","hexToRgb","nameToHsl","ctx","clearRect","canvas","blockwidth","blockheight","j","fillStyle","fillRect","drawColorMap","getContext","handleHueLumMap","event","buttons","rect","clientX","clientY","floor","touchHueLumMap","touches","handleSaturationSlider","touchSaturationSlider","handleAlphaSlider","touchAlphaSlider","createPortal","tabIndex","onBlur","currentTarget","contains","relatedTarget","onMouseDown","onMouseMove","onTouchMove","onTouchStart","onTouchEnd","opacity","title","handleHueInput","handleLumInput","handleSaturationInput","handleAlphaInput","getElementById"],"sourceRoot":""}