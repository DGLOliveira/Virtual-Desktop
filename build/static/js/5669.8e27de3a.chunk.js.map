{"version":3,"file":"static/js/5669.8e27de3a.chunk.js","mappings":"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","sources":["Apps/Definitions/Pages/Global.jsx","Apps/Definitions/Pages/Desktop.jsx","Apps/Definitions/Pages/Windows/Window.jsx","Apps/Definitions/Pages/Windows/Menu.jsx","Apps/Definitions/Pages/Windows/App.jsx","Apps/Definitions/Pages/Windows/Dialog.jsx","Apps/Definitions/Pages/Taskbar/TaskBar.jsx","Apps/Definitions/Pages/Taskbar/MainButtons.jsx","Apps/Definitions/Pages/Taskbar/StartMenu.jsx","Apps/Definitions/Pages/Taskbar/AppList.jsx","Apps/Definitions/Pages/Taskbar/LiveApps.jsx","Apps/Definitions/Pages/Taskbar/Tray.jsx","Apps/Definitions/Pages/Taskbar/TrayCollapsed.jsx","Apps/Definitions/Pages/Taskbar/TrayExpanded.jsx","Apps/Definitions/Pages/Taskbar/Window.jsx","Apps/Definitions/Pages/ContextMenu.jsx","Apps/Definitions/index.jsx","System/Desktop/Scenario.jsx","System/GlobalComponents/ColorPicker/Converters/rgbToHsl.js","System/GlobalComponents/ColorPicker/Converters/rgbaToHsla.js","System/GlobalComponents/ColorPicker/ColorPicker.jsx","System/GlobalComponents/ColorPicker/Converters/hexToRgba.js","System/GlobalComponents/ColorPicker/Converters/hexToRgb.js","System/GlobalComponents/ColorPicker/Converters/nameToHsl.js"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"./../../../System/ThemeManager/context.jsx\";\r\nimport { DeviceContext } from \"./../../../System/DeviceManager/context.jsx\";\r\n\r\nexport const Global = () => {\r\n    const theme = useContext(ThemeContext);\r\n    const device = useContext(DeviceContext);\r\n    const root = document.documentElement;\r\n    /*\r\n    Disabled due to interference with theme change \r\n        const fontFamilyList = [\r\n            \"Arial\",\r\n            \"Times New Roman\",\r\n            \"Monospace\",\r\n            \"Verdana\",\r\n            \"Georgia\",\r\n            \"Courier New\",\r\n            \"Tahoma\",\r\n            \"Garamond\",\r\n            \"Trebuchet MS\",\r\n            \"Impact\",\r\n            \"Helvetica\",\r\n            \"Arial Black\",\r\n            \"Comic Sans MS\",\r\n            \"Lucida Console\",\r\n            \"Lucida Sans Unicode\",\r\n            \"Lucida Sans\",\r\n            \"Palatino Linotype\",\r\n            \"Book Antiqua\",\r\n            \"Arial Narrow\",\r\n            \"Arial Rounded MT Bold\",\r\n            \"Brush Script MT\",\r\n            \"Century Gothic\",\r\n            \"Century Schoolbook\"\r\n        ];\r\n        const [fontFamily, setFontFamily] = useState(\r\n            getComputedStyle(root).getPropertyValue(\"--GeneralFontFamily\"));\r\n        \r\n        useEffect(() => {\r\n            root.style.setProperty(\"--GeneralFontFamily\", fontFamily);\r\n        }, [fontFamily]);\r\n    \r\n        useEffect(()=>{\r\n                setFontFamily(getComputedStyle(root).getPropertyValue(\"--GeneralFontFamily\"));\r\n        },[theme.theme]);\r\n        \r\n                    <div>\r\n                        <label>Font Family:</label>\r\n                        <select\r\n                            value={fontFamily}\r\n                            onChange={(e) => setFontFamily(e.target.value)}\r\n                        >\r\n                            {fontFamilyList.sort().map((font) => (\r\n                                <option key={font} style={{ fontFamily: font }}>\r\n                                    {font}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>*/\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Device</legend>\r\n                <div>\r\n                    <label>Type:</label>\r\n                    <select\r\n                        value={device.deviceType}\r\n                        onChange={(e) => device.setDeviceType(e.target.value)}\r\n                    >\r\n                        {device.deviceTypeList.map((device) => (\r\n                            <option key={device}>{device}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Global Theme</legend>\r\n                <div>\r\n                    <label>Theme:</label>\r\n                    <select\r\n                        value={theme.theme}\r\n                        onChange={(e) => theme.setTheme(e.target.value)}\r\n                    >\r\n                        {theme.themeList.map((theme) => (\r\n                            <option key={theme}>{theme}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Dark Mode:</label>\r\n                    <select\r\n                        value={theme.mode}\r\n                        onChange={(e) => theme.setMode(e.target.value)}\r\n                    >\r\n                        {theme.modeList.map((mode) => (\r\n                            <option key={mode}>{mode}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { BackgroundContext } from \"../../../System/Desktop/BackgroundContext.js\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const DesktopPreview = () => {\r\n  return (\r\n    <>\r\n      <div className=\"desktopShortcut\" style={{ zIndex: 1 }}>\r\n        <FcGlobe className=\"desktopIcon\" />\r\n        Shortcut\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Desktop = () => {\r\n  const background = useContext(BackgroundContext);\r\n  const [backgroundMenu, setBackgroundMenu] = useState(background.state.active);\r\n  var root = document.querySelector(\":root\");\r\n\r\n  const [desktopBkgrColor, setDesktopBkgrColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrColor\", desktopBkgrColor);\r\n  }, [desktopBkgrColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrImage, setDesktopBkgrImage] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrImage\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrImage\", desktopBkgrImage);\r\n  }, [desktopBkgrImage]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrSize, setDesktopBkgrSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrSize\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrSize\", desktopBkgrSize);\r\n  }, [desktopBkgrSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrPosition, setDesktopBkgrPosition] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrPosition\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrPosition\", desktopBkgrPosition);\r\n  }, [desktopBkgrPosition]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopBkgrRepeat, setDesktopBkgrRepeat] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopBkgrRepeat\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopBkgrRepeat\", desktopBkgrRepeat);\r\n  }, [desktopBkgrRepeat]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopFontSize, setDesktopFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopFontSize\", desktopFontSize + \"px\");\r\n  }, [desktopFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [desktopIconSize, setDesktopIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DesktopIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DesktopIconSize\", desktopIconSize + \"px\");\r\n  }, [desktopIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n\r\n  //Upload Image\r\n  const uploadImage = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = (readerEvent) => {\r\n      background.setImage(\r\n        readerEvent.target.result,\r\n        background.state.image.position,\r\n        background.state.image.size,\r\n        background.state.image.repeat);\r\n    }\r\n  };\r\n\r\n  //Update background context\r\n  useEffect(() => {\r\n    if (background.state.active === \"color\") {\r\n      if (background.state.color.type === \"color\") {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(\"none\");\r\n      } else if (background.state.color.type === \"gradient\") {\r\n        if (background.state.color.gradient.type === \"linear\") {\r\n          setDesktopBkgrColor(`linear-gradient(${background.state.color.gradient.degree}deg, ${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        } else if (background.state.color.gradient.type === \"radial\") {\r\n          setDesktopBkgrColor(`radial-gradient(${background.state.color.gradient.color1}, ${background.state.color.gradient.color2})`);\r\n          setDesktopBkgrImage(\"none\");\r\n        }\r\n      }\r\n    } else if (background.state.active === \"image\") {\r\n      if (background.state.image.url) {\r\n        setDesktopBkgrColor(background.state.color.color);\r\n        setDesktopBkgrImage(`url(${background.state.image.url})`);\r\n        setDesktopBkgrPosition(background.state.image.position);\r\n        setDesktopBkgrSize(background.state.image.size);\r\n        setDesktopBkgrRepeat(background.state.image.repeat);\r\n      }\r\n    }\r\n  }, [background.state]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Background:\r\n          <div>\r\n            <select value={backgroundMenu} onChange={(e) => setBackgroundMenu(e.target.value)}>\r\n              <option value=\"color\">Color</option>\r\n              <option value=\"image\">Image</option>\r\n              <option value=\"scenario\">3D Scenario</option>\r\n            </select>\r\n          </div></legend>\r\n        {backgroundMenu === \"color\" ? (\r\n          <>\r\n            <button\r\n              className={\r\n                background.state.active === \"color\"\r\n                  ? \"defFormButtonON\"\r\n                  : \"defFormButton\"\r\n              }\r\n              onClick={() => background.setActive(\"color\")}\r\n            >\r\n              Use Simple Color\r\n            </button>\r\n            <div>\r\n              <label>Set Background Color: </label>\r\n              <ColorPicker\r\n                color={desktopBkgrColor}\r\n                setColor={setDesktopBkgrColor}\r\n                useAlpha={false}\r\n              /></div>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"image\" ? (\r\n          <>\r\n            <button\r\n              className={\r\n                background.state.active === \"image\"\r\n                  ? \"defFormButtonON\"\r\n                  : \"defFormButton\"\r\n              }\r\n              onClick={() => background.setActive(\"image\")}\r\n            >\r\n              Use Image\r\n            </button>\r\n            <div>\r\n              <label htmlFor=\"imageUpload\">Upload Image: </label>\r\n              <input\r\n                id=\"imageUpload\"\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={(e) => { uploadImage(e.target.files[0]) }} />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"imagePosition\">Position: </label>\r\n              <select id=\"imagePosition\"\r\n                value={background.state.image.position}\r\n                onChange={(e) => {\r\n                  background.setImage(\r\n                    background.state.image.file,\r\n                    e.target.value,\r\n                    background.state.image.size,\r\n                    background.state.image.repeat\r\n                  );\r\n                  setDesktopBkgrPosition(e.target.value);\r\n                }}>\r\n                <option value=\"top\">Top</option>\r\n                <option value=\"left top\">Top Left</option>\r\n                <option value=\"right top\">Top Right</option>\r\n                <option value=\"center\">Center</option>\r\n                <option value=\"bottom\">Bottom</option>\r\n                <option value=\"left bottom\">Bottom Left</option>\r\n                <option value=\"right bottom\">Bottom Right</option>\r\n                <option value=\"left\">Left</option>\r\n                <option value=\"right\">Right</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"imageSize\">Size: </label>\r\n              <select id=\"imageSize\"\r\n                value={background.state.image.size}\r\n                onChange={(e) => {\r\n                  background.setImage(\r\n                    background.state.image.file,\r\n                    background.state.image.position,\r\n                    e.target.value,\r\n                    background.state.image.repeat\r\n                  );\r\n                  setDesktopBkgrSize(e.target.value);\r\n                }}>\r\n                <option value=\"auto\">Auto</option>\r\n                <option value=\"contain\">Contain</option>\r\n                <option value=\"cover\">Cover</option>\r\n                <option value=\"100vw 100vh\">Stretch</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"imageRepeat\">Repeat: </label>\r\n              <select id=\"imageRepeat\"\r\n                value={background.state.image.repeat}\r\n                onChange={(e) => {\r\n                  background.setImage(\r\n                    background.state.image.file,\r\n                    background.state.image.position,\r\n                    background.state.image.size,\r\n                    e.target.value\r\n                  );\r\n                  setDesktopBkgrRepeat(e.target.value);\r\n                }}\r\n              >\r\n                <option value=\"no-repeat\">No Repeat</option>\r\n                <option value=\"repeat\">Repeat</option>\r\n                <option value=\"repeat-x\">Repeat X</option>\r\n                <option value=\"repeat-y\">Repeat Y</option>\r\n              </select>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {backgroundMenu === \"Shader\" ? <></> : <></>}\r\n        {backgroundMenu === \"scenario\" ? (\r\n          <>\r\n            <button\r\n              className={\r\n                background.state.active === \"scenario\"\r\n                  ? \"defFormButtonON\"\r\n                  : \"defFormButton\"\r\n              }\r\n              onClick={() => background.setActive(\"scenario\")}\r\n            >\r\n              Use Scenario\r\n            </button>\r\n            <fieldset>\r\n              <legend\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"sun\"].isActive}\r\n                  onChange={() => background.setScenario(\"sun\", \"isActive\", !background.state[\"scenario\"][\"sun\"].isActive)}\r\n                />\r\n                Sun & Sky\r\n              </legend>\r\n              {background.state[\"scenario\"][\"sun\"].isActive &&\r\n                <><div>\r\n                  <label>Inclination:</label>\r\n                  <input\r\n                    type=\"range\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0.48\"\r\n                    max=\"1\"\r\n                    step=\"0.001\"\r\n                    value={background.state[\"scenario\"][\"sun\"].inclination}\r\n                    onChange={(e) =>\r\n                      background.setScenario(\"sun\", \"inclination\", e.target.value)\r\n                    }\r\n                  />\r\n                </div>\r\n                  <div>\r\n                    <label>Azimuth:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].azimuth}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"azimuth\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Turbidity:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"10\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].turbidity}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"turbidity\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Rayleight:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"50\"\r\n                      step=\"0.01\"\r\n                      value={background.state[\"scenario\"][\"sun\"].rayleight}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"sun\", \"rayleight\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Ambient Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                <ColorPicker\r\n                  color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n                  setColor={(color) =>\r\n                    background.setScenario(\"ambientLight\", \"color\", color)}\r\n                  useAlpha={false}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"10\"\r\n                  step=\"0.1\"\r\n                  value={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n                  onChange={(e) =>\r\n                    background.setScenario(\"ambientLight\", \"intensity\", e.target.value)\r\n                  }\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend>Directional Light</legend>\r\n              <div>\r\n                <label>Color:</label>\r\n                <ColorPicker\r\n                  color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n                  setColor={(color) =>\r\n                    background.setScenario(\"directionalLight\", \"color\", color)}\r\n                  useAlpha={false}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Intensity:</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"200000000\"\r\n                  step=\"100\"\r\n                  value={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n                  onChange={(e) => background.setScenario(\"directionalLight\", \"intensity\", e.target.value)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"stars\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"stars\", \"isActive\", !background.state[\"scenario\"][\"stars\"].isActive)}\r\n                />\r\n                Stars\r\n              </legend>\r\n              {background.state[\"scenario\"][\"stars\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Star Count:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"100000\"\r\n                      value={background.state[\"scenario\"][\"stars\"].count}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"stars\", \"count\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"fog\"].isActive}\r\n                  onChange={(e) => background.setScenario(\"fog\", \"isActive\", !background.state[\"scenario\"][\"fog\"].isActive)}\r\n                />\r\n                Fog\r\n              </legend>\r\n              {background.state[\"scenario\"][\"fog\"].isActive &&\r\n                <>\r\n                  <div>\r\n                    <label>Color:</label>\r\n                    <ColorPicker\r\n                      color={background.state[\"scenario\"][\"fog\"].color}\r\n                      setColor={(color) => background.setScenario(\"fog\", \"color\", color)}\r\n                      useAlpha={false}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Near:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].near}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"near\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <label>Far:</label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"1500\"\r\n                      step=\"1\"\r\n                      value={background.state[\"scenario\"][\"fog\"].far}\r\n                      onChange={(e) =>\r\n                        background.setScenario(\"fog\", \"far\", e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </>}\r\n            </fieldset>\r\n            <fieldset>\r\n              <legend> Terrain </legend>\r\n              <div>\r\n                <label>Sea:</label>\r\n                <input type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"ocean\"].isActive}\r\n                  onChange={() => background.setScenario(\"ocean\", \"isActive\", !background.state[\"scenario\"][\"ocean\"].isActive)}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label>Dunes:</label>\r\n                <input type=\"checkbox\"\r\n                  checked={background.state[\"scenario\"][\"desert\"].isActive}\r\n                  onChange={() => background.setScenario(\"desert\", \"isActive\", !background.state[\"scenario\"][\"desert\"].isActive)}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n          </>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Shortcuts</legend>\r\n        <div>\r\n          <label>Icon Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={36}\r\n            max={120}\r\n            step=\"1\"\r\n            value={Number(desktopIconSize)}\r\n            onChange={(e) => setDesktopIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={32}\r\n            step=\"1\"\r\n            value={Number(desktopFontSize)}\r\n            onChange={(e) => setDesktopFontSize(e.target.value)}\r\n          /></div>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect, useContext, useCallback, lazy, Suspense } from \"react\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\nimport TopBarButtonsDefault from \"../../../../System/AppManager/Components/AppTopBarButtonsDefault.jsx\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const WindowPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n\r\n  const TopBarButtons = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${themeContext.TopBarButtonsPath}`).catch(\r\n      (error) => {\r\n        console.error(\"Failed to import thematic top bar buttons\");\r\n        return {\r\n          default: TopBarButtonsDefault\r\n        }\r\n      }))\r\n  ), [themeContext.TopBarButtonsPath]);\r\n\r\n  const topBarButtonTitles = {\r\n    minimize: \"Minimize (Alt + ⇩)\",\r\n    maximize: \"Maximize (Alt + ⇧)\",\r\n    restore: \"Restore (Alt + ⇩)\",\r\n    close: \"Close (Ctrl + Shift + F4)\"\r\n  };\r\n\r\n  const showButtons = {\r\n    minimize: true,\r\n    maximize: true,\r\n    close: true\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"10px\",\r\n          left: \"10px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          color: \"var(--WindowFontColorInactive)\",\r\n          backgroundColor: \"var(--WindowBkgrColorInactive)\",\r\n          borderWidth: \"var(--WindowBorderWidth)\",\r\n          borderColor: \"var(--WindowBorderColorInactive)\",\r\n          borderRadius: \"var(--WindowBorderRadius)\",\r\n          borderColor: \"var(--WindowBorderColorInactive)\"\r\n        }}\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowTopBarFontColorInactive)\",\r\n            backgroundColor: \"var(--WindowTopBarBkgrColorInactive)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Inactive</h1>\r\n          <Suspense fallback={null}>\r\n            <TopBarButtons\r\n              title={topBarButtonTitles}\r\n              click={() => { }}\r\n              isMaximized={false}\r\n              showButtons={showButtons}\r\n            />\r\n          </Suspense>\r\n        </app-top-bar>\r\n        <app-container\r\n          style={{\r\n            color: \"var(--AppFontColorInactive)\",\r\n            backgroundColor: \"var(--AppBkgrColorInactive)\",\r\n            borderColor: \"var(--AppBorderColorInactive)\"\r\n          }}></app-container>\r\n      </app-window>\r\n      <app-window\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50px\",\r\n          left: \"60px\",\r\n          width: \"80%\",\r\n          height: \"120px\",\r\n          color: \"var(--WindowFontColor)\",\r\n          backgroundColor: \"var(--WindowBkgrColor)\",\r\n          borderWidth: \"var(--WindowBorderWidth)\",\r\n          borderColor: \"var(--WindowBorderColor)\",\r\n          borderRadius: \"var(--WindowBorderRadius)\",\r\n          borderColor: \"var(--WindowBorderColor)\"\r\n        }}\r\n      >\r\n        <app-top-bar\r\n          style={{\r\n            color: \"var(--WindowTopBarFontColor)\",\r\n            backgroundColor: \"var(--WindowTopBarBkgrColor)\"\r\n          }}>\r\n          <FcGlobe />\r\n          <h1>Active</h1>\r\n          <Suspense fallback={null}>\r\n            <TopBarButtons\r\n              title={topBarButtonTitles}\r\n              click={() => { }}\r\n              isMaximized={false}\r\n              showButtons={showButtons}\r\n            />\r\n          </Suspense>\r\n        </app-top-bar>\r\n        <app-container\r\n          style={{\r\n            color: \"var(--AppFontColor)\",\r\n            backgroundColor: \"var(--AppBkgrColor)\",\r\n            borderColor: \"var(--AppBorderColor)\"\r\n          }}></app-container>\r\n      </app-window>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Window = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  var root = document.querySelector(\":root\");\r\n\r\n  const [windowFontColor, setWindowFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowFontColor\", windowFontColor);\r\n  }, [windowFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [windowFontColorInactive, setWindowFontColorInactive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowFontColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowFontColorInactive\", windowFontColorInactive);\r\n  }, [windowFontColorInactive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [fontSize, setFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontSize\", fontSize + \"px\");\r\n  }, [fontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarTitleAlign, setTopbarTitleAlign] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontAlign\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontAlign\", topbarTitleAlign);\r\n  }, [topbarTitleAlign]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarFontColor, setTopbarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontColor\", topbarFontColor);\r\n  }, [topbarFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [bkgColor, setBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBkgrColor\", bkgColor);\r\n  }, [bkgColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [windowPadding, setWindowPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowPadding\", windowPadding + \"px\");\r\n  }, [windowPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarFlexDirection, setTopbarFlexDirection] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFlexDirection\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFlexDirection\", topbarFlexDirection);\r\n  }, [topbarFlexDirection]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarBkgColor, setTopbarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarBkgrColor\", topbarBkgColor);\r\n  }, [topbarBkgColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topBarHeight, setTopBarHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarHeight\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarHeight\", topBarHeight + \"px\");\r\n  }, [topBarHeight]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topBarIconSize, setTopBarIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarIconSize\", topBarIconSize + \"px\");\r\n  }, [topBarIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderWidth, setBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderWidth\", borderWidth + \"px\");\r\n  }, [borderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderRadius, setBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderRadius\", borderRadius + \"px\");\r\n  }, [borderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderType, setBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderType\", borderType);\r\n  }, [borderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [borderColor, setBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderColor\", borderColor);\r\n  }, [borderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowXOffset, setShadowXOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowXOffset\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowXOffset\", shadowXOffset + \"px\");\r\n  }, [shadowXOffset]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowYOffset, setShadowYOffset] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowYOffset\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowYOffset\", shadowYOffset + \"px\");\r\n  }, [shadowYOffset]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowBlur, setShadowBlur] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowBlur\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowBlur\", shadowBlur + \"px\");\r\n  }, [shadowBlur]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowSpread, setShadowSpread] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowSpread\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowSpread\", shadowSpread + \"px\");\r\n  }, [shadowSpread]);\r\n  //----------------------------------------------------------------------------//\r\n  const [shadowColor, setShadowColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowShadowColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowShadowColor\", shadowColor);\r\n  }, [shadowColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [inactiveBorderColor, setInactiveBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBorderColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBorderColorInactive\", inactiveBorderColor);\r\n  }, [inactiveBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [inactiveTopBarBkgColor, setInactiveTopBarBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarBkgrColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarBkgrColorInactive\", inactiveTopBarBkgColor);\r\n  }, [inactiveTopBarBkgColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [topbarFontColorInactive, setTopbarFontColorInactive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowTopBarFontColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowTopBarFontColorInactive\", topbarFontColorInactive);\r\n  }, [topbarFontColorInactive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [inactiveBkgColor, setInactiveBkgColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--WindowBkgrColorInactive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--WindowBkgrColorInactive\", inactiveBkgColor);\r\n  }, [inactiveBkgColor]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Window</legend>\r\n        <div>\r\n          <label>Background Effect:</label>\r\n          <select\r\n            value={themeContext.windowBackgroundFX}\r\n            onChange={(e) => themeContext.setWindowBackgroundFX(e.target.value)}\r\n          >\r\n            {themeContext.backgroundFXList.map((backgroundFX) => (\r\n              <option key={backgroundFX} value={backgroundFX}>\r\n                {backgroundFX}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <fieldset>\r\n          <legend>Top Bar</legend>\r\n          <div>\r\n            <label>Icon Theme:</label>\r\n            <select\r\n              value={themeContext.topBarIconTheme}\r\n              onChange={(e) => themeContext.setTopBarIconTheme(e.target.value)}\r\n            >\r\n              {themeContext.topBarIconThemeList.map((iconTheme) => (\r\n                <option key={iconTheme} value={iconTheme}>\r\n                  {iconTheme}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Direction:</label>\r\n            <select\r\n              value={topbarFlexDirection}\r\n              onChange={(e) => setTopbarFlexDirection(e.target.value)}\r\n            >\r\n              <option value=\"row\">Close on the Right</option>\r\n              <option value=\"row-reverse\">Close on the Left</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Align Title</label>\r\n            <select\r\n              value={topbarTitleAlign}\r\n              onChange={(e) => setTopbarTitleAlign(e.target.value)}\r\n            >\r\n              <option value=\"left\">Left</option>\r\n              <option value=\"center\">Center</option>\r\n              <option value=\"right\">Right</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Height:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={20}\r\n              max={64}\r\n              step=\"1\"\r\n              value={topBarHeight}\r\n              onChange={(e) => setTopBarHeight(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Icon Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={16}\r\n              max={60}\r\n              step=\"1\"\r\n              value={topBarIconSize}\r\n              onChange={(e) => setTopBarIconSize(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={12}\r\n              max={60}\r\n              step=\"1\"\r\n              value={fontSize}\r\n              onChange={(e) => setFontSize(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Border Thickness:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={borderWidth}\r\n              onChange={(e) => setBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={20}\r\n              step=\"1\"\r\n              value={borderRadius}\r\n              onChange={(e) => setBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Type:</label>\r\n            <select\r\n              value={borderType}\r\n              onChange={(e) => setBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Padding:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={windowPadding}\r\n              onChange={(e) => setWindowPadding(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Shadow</legend>\r\n          <div>\r\n            <label>Y-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowYOffset}\r\n              onChange={(e) => setShadowYOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>X-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowXOffset}\r\n              onChange={(e) => setShadowXOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Spread</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowSpread}\r\n              onChange={(e) => setShadowSpread(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Blur</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={shadowBlur}\r\n              onChange={(e) => setShadowBlur(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={shadowColor}\r\n              setColor={setShadowColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Active Window</legend>\r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={topbarBkgColor}\r\n              setColor={setTopbarBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={topbarFontColor}\r\n              setColor={setTopbarFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={bkgColor}\r\n              setColor={setBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color: </label>\r\n            <ColorPicker\r\n              color={windowFontColor}\r\n              setColor={setWindowFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={borderColor}\r\n              setColor={setBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Inactive Window</legend>\r\n\r\n          <div>\r\n            <label>Top Bar Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveTopBarBkgColor}\r\n              setColor={setInactiveTopBarBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Top Bar Font Color: </label>\r\n            <ColorPicker\r\n              color={topbarFontColorInactive}\r\n              setColor={setTopbarFontColorInactive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Background Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBkgColor}\r\n              setColor={setInactiveBkgColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Color: </label>\r\n            <ColorPicker\r\n              color={windowFontColorInactive}\r\n              setColor={setWindowFontColorInactive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Color: </label>\r\n            <ColorPicker\r\n              color={inactiveBorderColor}\r\n              setColor={setInactiveBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect, useContext, Fragment } from \"react\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const MenuPreview = () => {\r\n    const theme = useContext(ThemeContext);\r\n    const NavMenu = () => <nav\r\n        className=\"appMenuBar\"\r\n        style={{\r\n            backgroundColor: \"var(--WindowMenuNavBkgr)\"\r\n        }}\r\n    >\r\n        <Fragment>\r\n            <drop-down>\r\n                <ul>\r\n                    <li>\r\n                        <button>\r\n                            <div>Button</div>\r\n                            <span />\r\n                            <kbd>keybind</kbd>\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <button disabled>\r\n                            <div>Disabled Button</div>\r\n                            <span />\r\n                            <kbd>keybind</kbd>\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <hr />\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            <div>Checkbox</div>\r\n                            <span />\r\n                            <input type=\"checkbox\" />\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <hr />\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            <div>Checkbox 1</div>\r\n                            <span />\r\n                            <input type=\"radio\" name=\"radio\" />\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            <div>Checkbox 2</div>\r\n                            <span />\r\n                            <input type=\"radio\" name=\"radio\" />\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </drop-down>\r\n            <button>\r\n                Menu 1\r\n            </button>\r\n        </Fragment>\r\n        <button>\r\n            Menu 3\r\n        </button>\r\n        <button>\r\n            Menu 4\r\n        </button>\r\n    </nav>;\r\n\r\n    return (\r\n        <>\r\n            <app-window\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: \"0px\",\r\n                    left: \"0px\",\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    color: \"var(--WindowFontColor)\",\r\n                    backgroundColor: \"var(--WindowBkgrColor)\",\r\n                    borderWidth: \"var(--WindowBorderWidth)\",\r\n                    borderColor: \"var(--WindowBorderColor)\",\r\n                    borderRadius: \"var(--WindowBorderRadius)\",\r\n                    borderColor: \"var(--WindowBorderColor)\"\r\n                }}\r\n            >\r\n                {theme.navMenuLocation === \"in top bar\" && <NavMenu />}\r\n                <app-container\r\n                    style={{\r\n                        color: \"var(--AppFontColor)\",\r\n                        backgroundColor: \"var(--AppBkgrColor)\",\r\n                        borderColor: \"var(--AppBorderColor)\"\r\n                    }}>\r\n                    {theme.navMenuLocation === \"in app\" && <NavMenu />}\r\n                </app-container>\r\n            </app-window>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const Menu = () => {\r\n    const root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n    const [navBkgrColor, setNavBkgrColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavBkgr\", navBkgrColor);\r\n    }, [navBkgrColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navBkgrColorInactive, setNavBkgrColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavBkgrInactive\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavBkgrInactive\", navBkgrColorInactive);\r\n    }, [navBkgrColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [backgroundColor, setBackgroundColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBkgr\", backgroundColor);\r\n    }, [backgroundColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuFontColor\", fontColor);\r\n    }, [fontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontSize, setFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuFontSize\", fontSize + \"px\");\r\n    }, [fontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderColor\", borderColor);\r\n    }, [borderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderWidth\", borderWidth + \"px\");\r\n    }, [borderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderRadius\", borderRadius + \"px\");\r\n    }, [borderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuBorderType\", borderType);\r\n    }, [borderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverFontColor, setHoverFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuHoverColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuHoverColor\", hoverFontColor);\r\n    }, [hoverFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverBkgr, setHoverBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuHoverBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuHoverBkgr\", hoverBkgr);\r\n    }, [hoverBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBkgr, setNavButtonBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBkgr\", navButtonBkgr);\r\n    }, [navButtonBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonFontColor, setNavButtonFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonColor\", navButtonFontColor);\r\n    }, [navButtonFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonHoverBkgr, setNavButtonHoverBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonHoverBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonHoverBkgr\", navButtonHoverBkgr);\r\n    }, [navButtonHoverBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonHoverFontColor, setNavButtonHoverFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonHoverColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonHoverColor\", navButtonHoverFontColor);\r\n    }, [navButtonHoverFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderColor, setNavButtonBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderColor\", navButtonBorderColor);\r\n    }, [navButtonBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderWidth, setNavButtonBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderWidth\", navButtonBorderWidth + \"px\");\r\n    }), [navButtonBorderWidth];\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderRadius, setNavButtonBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderRadius\", navButtonBorderRadius + \"px\");\r\n    }, [navButtonBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [navButtonBorderType, setNavButtonBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--WindowMenuNavButtonBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--WindowMenuNavButtonBorderType\", navButtonBorderType);\r\n    }, [navButtonBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Global</legend>\r\n                <div>\r\n                    <label>Font Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={11}\r\n                        max={30}\r\n                        step=\"1\"\r\n                        value={fontSize}\r\n                        onChange={(e) => setFontSize(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Position:</label>\r\n                    <select\r\n                        value={theme.navMenuLocation}\r\n                        onChange={(e) => theme.setNavMenuLocation(e.target.value)}\r\n                    >\r\n                        {theme.navMenuLocationList.map((location) => (\r\n                            <option value={location} key={location}>{location}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Navigation Bar</legend>\r\n                <div>\r\n                    <label>Nav Bar Background:</label>\r\n                    <ColorPicker\r\n                        color={navBkgrColor}\r\n                        setColor={setNavBkgrColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Nav Bar Background Inactive:</label>\r\n                    <ColorPicker\r\n                        color={navBkgrColorInactive}\r\n                        setColor={setNavBkgrColorInactive}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Navigation Buttons</legend>\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={navButtonFontColor}\r\n                        setColor={setNavButtonFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Font Color:</label>\r\n                    <ColorPicker\r\n                        color={navButtonHoverFontColor}\r\n                        setColor={setNavButtonHoverFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <legend>Background</legend>\r\n                    <ColorPicker\r\n                        color={navButtonBkgr}\r\n                        setColor={setNavButtonBkgr}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <legend>Hover Background</legend>\r\n                    <ColorPicker\r\n                        color={navButtonHoverBkgr}\r\n                        setColor={setNavButtonHoverBkgr}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                        color={navButtonBorderColor}\r\n                        setColor={setNavButtonBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={navButtonBorderWidth}\r\n                        onChange={(e) => setNavButtonBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={navButtonBorderRadius}\r\n                        onChange={(e) => setNavButtonBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select\r\n                        value={navButtonBorderType}\r\n                        onChange={(e) => setNavButtonBorderType(e.target.value)}\r\n                    >\r\n                        <option value=\"solid\">Solid</option>\r\n                        <option value=\"dotted\">Dotted</option>\r\n                        <option value=\"dashed\">Dashed</option>\r\n                        <option value=\"double\">Double</option>\r\n                        <option value=\"groove\">Groove</option>\r\n                        <option value=\"ridge\">Ridge</option>\r\n                        <option value=\"inset\">Inset</option>\r\n                        <option value=\"outset\">Outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n                <legend>Menu</legend>\r\n\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={fontColor}\r\n                        setColor={setFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Font Color:</label>\r\n                    <ColorPicker\r\n                        color={hoverFontColor}\r\n                        setColor={setHoverFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Background Color:</label>\r\n                    <ColorPicker\r\n                        color={backgroundColor}\r\n                        setColor={setBackgroundColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Background:</label>\r\n                    <ColorPicker\r\n                        color={hoverBkgr}\r\n                        setColor={setHoverBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};","import { useState, useEffect, useContext } from \"react\";\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport { DeviceContext } from \"../../../../System/DeviceManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const AppPreview = () => {\r\n    const themeContext = useContext(ThemeContext);\r\n    const deviceContext = useContext(DeviceContext);\r\n    return (\r\n        <>\r\n            {deviceContext.deviceType === \"Desktop\" && <app-window\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: \"10px\",\r\n                    left: \"10px\",\r\n                    width: \"80%\",\r\n                    height: \"120px\",\r\n                    color: \"var(--WindowFontColorInactive)\",\r\n                    backgroundColor: \"var(--WindowBkgrColorInactive)\",\r\n                    borderWidth: \"var(--WindowBorderWidth)\",\r\n                    borderColor: \"var(--WindowBorderColorInactive)\",\r\n                    borderRadius: \"var(--WindowBorderRadius)\",\r\n                }}\r\n            >\r\n                <app-top-bar\r\n                    style={{\r\n                        color: \"var(--WindowTopBarFontColorInactive)\",\r\n                        backgroundColor: \"var(--WindowTopBarBkgrColorInactive)\"\r\n                    }}>\r\n                    <FcGlobe />\r\n                    <h1>Inactive</h1>\r\n                </app-top-bar>\r\n                <app-container\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        color: \"var(--AppFontColorInactive)\",\r\n                        backgroundColor: \"var(--AppBkgrColorInactive)\",\r\n                        borderColor: \"var(--AppBorderColorInactive)\",\r\n                        marginLeft: \"var(--WindowPadding)\",\r\n                        marginRight: \"var(--WindowPadding)\",\r\n                        marginBottom: \"var(--WindowPadding)\",\r\n                        height: \"calc(100% - var(--WindowPadding))\",\r\n                        width: \"calc(100% -  2 *var(--WindowPadding))\",\r\n                    }}>{\"-Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"}</app-container>\r\n            </app-window>}\r\n            <app-window\r\n                style={{\r\n                    position: \"absolute\",\r\n                    backgroundColor: \"var(--WindowBkgrColor)\",\r\n                    top: deviceContext.deviceType !== \"Desktop\" ? \"0\" : \"50px\",\r\n                    left: deviceContext.deviceType !== \"Desktop\" ? \"0\" : \"60px\",\r\n                    width: deviceContext.deviceType !== \"Desktop\" ? \"100%\" : \"80%\",\r\n                    height: deviceContext.deviceType !== \"Desktop\" ? \"100%\" : \"120px\",\r\n                    backgroundColor: \"var(--WindowBkgrColor)\",\r\n                    color: \"var(--WindowFontColor)\",\r\n                    borderWidth: deviceContext.deviceType !== \"Desktop\" ? \"0\" : \"var(--WindowBorderWidth)\",\r\n                    borderColor: \"var(--WindowBorderColor)\",\r\n                    borderRadius: deviceContext.deviceType !== \"Desktop\" ? \"0\" : \"var(--WindowBorderRadius)\"\r\n                }}\r\n            >\r\n                {deviceContext.deviceType === \"Desktop\" && <app-top-bar\r\n                    style={{\r\n                        color: \"var(--WindowTopBarFontColor)\",\r\n                        backgroundColor: \"var(--WindowTopBarBkgrColor)\"\r\n                    }}>\r\n                    <FcGlobe />\r\n                    <h1>Active</h1>\r\n                </app-top-bar>}\r\n                <app-container\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        color: \"var(--AppFontColor)\",\r\n                        backgroundColor: \"var(--AppBkgrColor)\",\r\n                        borderColor: \"var(--AppBorderColor)\",\r\n                        marginLeft: deviceContext.deviceType !== \"Desktop\" ? \"0\" : \"var(--WindowPadding)\",\r\n                        marginRight: deviceContext.deviceType !== \"Desktop\" ? \"0\" : \"var(--WindowPadding)\",\r\n                        marginBottom: deviceContext.deviceType !== \"Desktop\" ? \"0\" : \"var(--WindowPadding)\",\r\n                        height: deviceContext.deviceType !== \"Desktop\" ? \"100%\" : \"calc(100% - var(--WindowPadding))\",\r\n                        width: deviceContext.deviceType !== \"Desktop\" ? \"100%\" : \"calc(100% -  2 *var(--WindowPadding))\",\r\n                    }}>{\"-Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"}</app-container>\r\n            </app-window>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const App = () => {\r\n    var root = document.querySelector(\":root\");\r\n\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppFontColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppFontColor\", fontColor);\r\n    }, [fontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColorInactive, setFontColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppFontColorInactive\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppFontColorInactive\", fontColorInactive);\r\n    }, [fontColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [bkgColor, setBkgColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBkgrColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBkgrColor\", bkgColor);\r\n    }, [bkgColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [bkgColorInactive, setBkgColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBkgrColorInactive\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBkgrColorInactive\", bkgColorInactive);\r\n    }, [bkgColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderColor\", borderColor);\r\n    }, [borderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColorInactive, setBorderColorInactive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderColorInactive\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderColorInactive\", borderColorInactive);\r\n    }, [borderColorInactive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderWidth\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderWidth\", borderWidth + \"px\");\r\n    }, [borderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--AppBorderRadius\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderRadius\", borderRadius + \"px\");\r\n    }, [borderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        root.style.getPropertyValue(\"--AppBorderType\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--AppBorderType\", borderType);\r\n    }, [borderType]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Font Color</legend>\r\n                <div>\r\n                    <label>Active</label>\r\n                    <ColorPicker\r\n                        color={fontColor}\r\n                        setColor={setFontColor}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Inactive</label>\r\n                    <ColorPicker\r\n                        color={fontColorInactive}\r\n                        setColor={setFontColorInactive}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background Color</legend>\r\n                <div>\r\n                    <label>Active</label>\r\n                    <ColorPicker\r\n                        color={bkgColor}\r\n                        setColor={setBkgColor}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Inactive</label>\r\n                    <ColorPicker\r\n                        color={bkgColorInactive}\r\n                        setColor={setBkgColorInactive}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Color Active</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Color Inactive</label>\r\n                    <ColorPicker\r\n                        color={borderColorInactive}\r\n                        setColor={setBorderColorInactive}\r\n                        alpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Radius</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Type</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};","import { useState, useEffect, useContext, useCallback, lazy, Suspense } from \"react\";\r\n\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const DialogPreview = () => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const ButtonDefault = ({ _type, name, click }) => {\r\n    return (\r\n      <button onClick={click}>\r\n        {name}\r\n      </button>\r\n    )\r\n  };\r\n  const Button = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${theme.DialogButtonPath}`).catch(\r\n      (_error) => {\r\n        console.error(\"Failed to import thematic dialog buttons\");\r\n        return {\r\n          default: ButtonDefault\r\n        }\r\n      }))\r\n  ), [theme.DialogButtonPath]);\r\n\r\n  const DialogButtonsBar = () =>\r\n    <Suspense fallback={null}>\r\n      <app-dialog-actions>\r\n        <Button type=\"Suggested\" name=\"Ok\" click={() => { }} />\r\n        <Button type=\"Neutral\" name=\"Cancel\" click={() => { }} />\r\n        <Button type=\"Warning\" name=\"Close\" click={() => { }} />\r\n      </app-dialog-actions >\r\n    </Suspense>\r\n    ;\r\n\r\n  return (\r\n    <>\r\n      <app-dialog\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n        }}\r\n      >\r\n        <app-dialog-top-bar>\r\n          Dialog\r\n        </app-dialog-top-bar>\r\n        <app-dialog-info\r\n          style={{\r\n            marginBottom: theme.dialogButtonsLocation === \"in window\" ? \"0px\" : \"var(--DialogPadding)\"\r\n          }}\r\n        >\r\n          <p>Information</p>\r\n          {theme.dialogButtonsLocation === \"in info container\" && <DialogButtonsBar />}\r\n        </app-dialog-info>\r\n        {theme.dialogButtonsLocation === \"in window\" && <DialogButtonsBar />}\r\n      </app-dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Dialog = () => {\r\n  const theme = useContext(ThemeContext);\r\n  var root = document.querySelector(\":root\");\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBkgrColor, setDialogBkgrColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBkgrColor\", dialogBkgrColor);\r\n  }, [dialogBkgrColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderColor, setDialogBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderColor\", dialogBorderColor);\r\n  }, [dialogBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderWidth, setDialogBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderWidth\", dialogBorderWidth + \"px\");\r\n  }, [dialogBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderRadius, setDialogBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderRadius\", dialogBorderRadius + \"px\");\r\n  }, [dialogBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogBorderType, setDialogBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogBorderType\", dialogBorderType);\r\n  }, [dialogBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBkgr, setDialogInfoBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBkgr\", dialogInfoBkgr);\r\n  }, [dialogInfoBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoFontColor, setDialogInfoFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoFontColor\", dialogInfoFontColor);\r\n  }, [dialogInfoFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoFontSize, setDialogInfoFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoFontSize\", dialogInfoFontSize + \"px\");\r\n  }, [dialogInfoFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderColor, setDialogInfoBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderColor\"),\r\n  )\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderColor\", dialogInfoBorderColor);\r\n  }, [dialogInfoBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderWidth, setDialogInfoBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderWidth\", dialogInfoBorderWidth + \"px\");\r\n  }, [dialogInfoBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderRadius, setDialogInfoBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderRadius\", dialogInfoBorderRadius + \"px\");\r\n  }, [dialogInfoBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogInfoBorderType, setDialogInfoBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogInfoBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogInfoBorderType\", dialogInfoBorderType);\r\n  }, [dialogInfoBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogPadding, setDialogPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogPadding\", dialogPadding + \"px\");\r\n  }, [dialogPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogTopBarBkgr, setDialogTopBarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogTopBarBkgr\", dialogTopBarBkgr);\r\n  }, [dialogTopBarBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogTopBarFontSize, setDialogTopBarFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogTopBarFontSize\", dialogTopBarFontSize + \"px\");\r\n  }, [dialogTopBarFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogTopBarFontColor, setDialogTopBarFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogTopBarFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogTopBarFontColor\", dialogTopBarFontColor);\r\n  }, [dialogTopBarFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBarBkgr, setDialogButtonBarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBarBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBarBkgr\", dialogButtonBarBkgr);\r\n  }, [dialogButtonBarBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBkgr, setDialogButtonBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBkgr\", dialogButtonBkgr);\r\n  }, [dialogButtonBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonFontColor, setDialogButtonFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonFontColor\", dialogButtonFontColor);\r\n  }, [dialogButtonFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonFontSize, setDialogButtonFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonFontSize\", dialogButtonFontSize + \"px\");\r\n  }, [dialogButtonFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderColor, setDialogButtonBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderColor\", dialogButtonBorderColor);\r\n  }, [dialogButtonBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderWidth, setDialogButtonBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderWidth\", dialogButtonBorderWidth + \"px\");\r\n  }, [dialogButtonBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderRadius, setDialogButtonBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderRadius\", dialogButtonBorderRadius + \"px\");\r\n  }, [dialogButtonBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [dialogButtonBorderType, setDialogButtonBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--DialogButtonBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--DialogButtonBorderType\", dialogButtonBorderType);\r\n  }, [dialogButtonBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n\r\n  return (\r\n\r\n    <fieldset>\r\n      <legend>Dialog Window</legend>\r\n      <div>\r\n        <label>Background Color: </label>\r\n        <ColorPicker\r\n          color={dialogBkgrColor}\r\n          setColor={setDialogBkgrColor}\r\n          useAlpha={true}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label>Background Effect:</label>\r\n        <select\r\n          value={theme.windowBackgroundFX}\r\n          onChange={(e) => theme.setWindowBackgroundFX(e.target.value)}\r\n        >\r\n          {theme.backgroundFXList.map((backgroundFX) => (\r\n            <option key={backgroundFX} value={backgroundFX}>\r\n              {backgroundFX}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <fieldset>\r\n        <legend>Border</legend>\r\n        <div>\r\n          <label>Color: </label>\r\n          <ColorPicker\r\n            color={dialogBorderColor}\r\n            setColor={setDialogBorderColor}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Thickness: </label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={10}\r\n            step=\"1\"\r\n            value={dialogBorderWidth}\r\n            onChange={(e) => setDialogBorderWidth(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Corner Curvature: </label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={25}\r\n            step=\"1\"\r\n            value={dialogBorderRadius}\r\n            onChange={(e) => setDialogBorderRadius(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Type: </label>\r\n          <select\r\n            value={dialogBorderType}\r\n            onChange={(e) => setDialogBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">Solid</option>\r\n            <option value=\"dashed\">Dashed</option>\r\n            <option value=\"dotted\">Dotted</option>\r\n            <option value=\"double\">Double</option>\r\n            <option value=\"groove\">Groove</option>\r\n            <option value=\"ridge\">Ridge</option>\r\n            <option value=\"inset\">Inset</option>\r\n            <option value=\"outset\">Outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Top Bar</legend>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={dialogTopBarBkgr}\r\n            setColor={setDialogTopBarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={dialogTopBarFontColor}\r\n            setColor={setDialogTopBarFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={60}\r\n            step=\"1\"\r\n            value={dialogTopBarFontSize}\r\n            onChange={(e) => setDialogTopBarFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Info</legend>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={dialogInfoBkgr}\r\n            setColor={setDialogInfoBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size: </label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={60}\r\n            step=\"1\"\r\n            value={dialogInfoFontSize}\r\n            onChange={(e) => setDialogInfoFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={dialogInfoFontColor}\r\n            setColor={setDialogInfoFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Color: </label>\r\n            <ColorPicker\r\n              color={dialogInfoBorderColor}\r\n              setColor={setDialogInfoBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Thickness: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogInfoBorderWidth}\r\n              onChange={(e) => setDialogInfoBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Corner Curvature: </label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={12}\r\n              step=\"1\"\r\n              value={dialogInfoBorderRadius}\r\n              onChange={(e) => setDialogInfoBorderRadius(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Type: </label>\r\n            <select\r\n              value={dialogInfoBorderType}\r\n              onChange={(e) => setDialogInfoBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">Solid</option>\r\n              <option value=\"dashed\">Dashed</option>\r\n              <option value=\"dotted\">Dotted</option>\r\n              <option value=\"double\">Double</option>\r\n              <option value=\"groove\">Groove</option>\r\n              <option value=\"ridge\">Ridge</option>\r\n              <option value=\"inset\">Inset</option>\r\n              <option value=\"outset\">Outset</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label>Margin Distance</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={10}\r\n              step=\"1\"\r\n              value={dialogPadding}\r\n              onChange={(e) => setDialogPadding(e.target.value)}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Button</legend>\r\n        <div>\r\n          <label>Location: </label>\r\n          <select\r\n            value={theme.dialogButtonsLocation}\r\n            onChange={(e) => theme.setDialogButtonsLocation(e.target.value)}\r\n          >\r\n            {theme.dialogButtonsLocationList.map((buttonLocation) => (\r\n              <option key={buttonLocation} value={buttonLocation}>\r\n                {buttonLocation}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Theme:</label>\r\n          <select\r\n            value={theme.dialogButtonTheme}\r\n            onChange={(e) => theme.setDialogButtonTheme(e.target.value)}\r\n          >\r\n            {theme.dialogButtonThemeList.map((buttonTheme) => (\r\n              <option key={buttonTheme} value={buttonTheme}>\r\n                {buttonTheme}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Bar Background Color:</label>\r\n          <ColorPicker\r\n            color={dialogButtonBarBkgr}\r\n            setColor={setDialogButtonBarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background:</label>\r\n          <ColorPicker\r\n            color={dialogButtonBkgr}\r\n            setColor={setDialogButtonBkgr}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Color:</label>\r\n          <ColorPicker\r\n            color={dialogButtonFontColor}\r\n            setColor={setDialogButtonFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={60}\r\n            step=\"1\"\r\n            value={dialogButtonFontSize}\r\n            onChange={(e) => setDialogButtonFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Color:</label>\r\n          <ColorPicker\r\n            color={dialogButtonBorderColor}\r\n            setColor={setDialogButtonBorderColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Width:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={10}\r\n            step=\"1\"\r\n            value={dialogButtonBorderWidth}\r\n            onChange={(e) => setDialogButtonBorderWidth(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Radius:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={25}\r\n            step=\"1\"\r\n            value={dialogButtonBorderRadius}\r\n            onChange={(e) => setDialogButtonBorderRadius(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Style:</label>\r\n          <select\r\n            value={dialogButtonBorderType}\r\n            onChange={(e) => setDialogButtonBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">Solid</option>\r\n            <option value=\"dashed\">Dashed</option>\r\n            <option value=\"dotted\">Dotted</option>\r\n            <option value=\"double\">Double</option>\r\n            <option value=\"groove\">Groove</option>\r\n            <option value=\"ridge\">Ridge</option>\r\n            <option value=\"inset\">Inset</option>\r\n            <option value=\"outset\">Outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n    </fieldset>\r\n  );\r\n}","import { useState, useEffect, useContext, useCallback, lazy, Suspense } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport { DeviceContext } from \"../../../../System/DeviceManager/context.jsx\";\r\nimport DefaultIcon from \"../../../../System/Taskbar/Components/LiveApps/DefaultIcon.jsx\";\r\nimport DefaultLogo from \"../../../../System/Taskbar/Components/Start/DefaultLogo.jsx\";\r\nimport DefaultButton from \"../../../../System/Taskbar/Components/LiveApps/DefaultButton.jsx\";\r\nimport Icon from \"../../../../System/Taskbar/Components/ToDesktop/DefaultIcon.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FcGlobe } from \"react-icons/fc\";\r\n\r\nexport const TaskBarPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  const deviceContext = useContext(DeviceContext);\r\n  const [isStartListOpen, setIsStartListOpen] = useState(false);\r\n  const [isLiveAppsOpen, setIsLiveAppsOpen] = useState(false);\r\n  const [toDesktopClicked, setToDesktopClicked] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n  const Logo = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${themeContext.StartButtonPath}`).catch(\r\n      (_error) => {\r\n        let errorMessage = \"Failed to load Start Button Logo\";\r\n        console.error(errorMessage);\r\n        return { default: DefaultLogo }\r\n      }\r\n    ))\r\n  ), [themeContext.StartButtonPath]);\r\n\r\n  const AppButton = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${themeContext.LiveAppButtonPath}`).catch(\r\n      (_error) => {\r\n        console.error(\"Failed to import thematic Live App buttons\");\r\n        return {\r\n          default: DefaultButton\r\n        }\r\n      }))\r\n  ), [themeContext.LiveAppButtonPath]);\r\n\r\n  const LiveAppsIcon = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${themeContext.LiveAppsMobileIconPath}`).catch(\r\n      (_error) => {\r\n        console.error(\"Failed to import thematic mobile Live Apps button icon\");\r\n        return {\r\n          default: DefaultIcon\r\n        }\r\n      }))\r\n  ), [themeContext.LiveAppsMobileIconPath]);\r\n\r\n  const handleToDesktopClick = () => {\r\n    setIsLiveAppsOpen(false);\r\n    setIsStartListOpen(false);\r\n    setToDesktopClicked(true);\r\n    setTimeout(() => setToDesktopClicked(false), 1000);\r\n  }\r\n\r\n  const ToDesktopIcon = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${themeContext.ToDesktopIconPath}`).catch(\r\n      (_error) => {\r\n        console.error(\"Failed to import thematic toDesktop button icon\");\r\n        return {\r\n          default: Icon\r\n        }\r\n      }))\r\n  ), [themeContext.ToDesktopIconPath]);\r\n\r\n  useEffect(() => {\r\n    let flag = false;\r\n    switch (themeContext.mode) {\r\n      case \"Light\":\r\n        flag = false;\r\n        break;\r\n      case \"Dark\":\r\n        flag = true;\r\n        break;\r\n      case \"System\":\r\n        flag = themeContext.systemDarkMode;\r\n    }\r\n    setIsDarkMode(flag);\r\n  }, [themeContext.mode, themeContext.systemDarkMode]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          backgroundColor: \"var(--TaskbarBkgr)\",\r\n          backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n          backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n          backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n          backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n          backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <start-button\r\n          style={{ width: deviceContext.deviceType === \"Desktop\" ? \"auto\" : \"100%\" }}>\r\n          <button\r\n            style={{ width: deviceContext.deviceType === \"Desktop\" ? \"auto\" : \"100%\" }}\r\n            onClick={() => { setIsStartListOpen(!isStartListOpen); setIsLiveAppsOpen(false); }}\r\n          >\r\n            <Suspense fallback={<DefaultLogo />}>\r\n              <Logo isOpen={isStartListOpen} />\r\n            </Suspense>\r\n            <span>Start</span>\r\n          </button>\r\n        </start-button>\r\n        <vertical-rect />\r\n        {deviceContext.deviceType === \"Desktop\" ?\r\n          <live-apps>\r\n            <Suspense fallback={null}>\r\n              <AppButton\r\n                name={\"\"}\r\n                click={() => { }}\r\n                context={(e) => { }}\r\n                AppIcon={FcGlobe}\r\n                isSelected={false}\r\n              />\r\n            </Suspense>\r\n          </live-apps> :\r\n          <live-apps-button>\r\n            <button\r\n              onClick={() => {setIsLiveAppsOpen(!isLiveAppsOpen); setIsStartListOpen(false); }}\r\n              style={{ width: \"100%\" }}\r\n            >\r\n              <Suspense fallback={null}>\r\n                <LiveAppsIcon isActive={isLiveAppsOpen} darkMode={isDarkMode} />\r\n              </Suspense>\r\n            </button>\r\n          </live-apps-button>\r\n        }\r\n        <vertical-rect />\r\n        <to-desktop-button\r\n          style={{\r\n            display: deviceContext.deviceType !== \"Desktop\" ? \"flex\" : \"auto\",\r\n            width: deviceContext.deviceType !== \"Desktop\" ? \"100%\" : \"auto\",\r\n          }}\r\n        >\r\n          <button\r\n            onClick={handleToDesktopClick}\r\n          >\r\n            <Suspense fallback={null}>\r\n              <ToDesktopIcon isActive={toDesktopClicked} />\r\n            </Suspense>\r\n          </button>\r\n        </to-desktop-button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TaskBar = () => {\r\n\r\n  var root = document.querySelector(\":root\");\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [taskbarHeight, setTaskbarHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHeight\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHeight\", taskbarHeight + \"px\");\r\n  }, [taskbarHeight]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarIconSize, setTaskbarIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarIconSize\", taskbarIconSize + \"px\");\r\n  }, [taskbarIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarBkgr, setTaskbarBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarBkgr\", taskbarBkgr);\r\n  }, [taskbarBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarFontSize, setTaskbarFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarFontSize\", taskbarFontSize + \"px\");\r\n  }, [taskbarFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarVerticalBorderColor, setTaskbarVerticalBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarVerticalBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarVerticalBorderColor\", taskbarVerticalBorderColor);\r\n  }, [taskbarVerticalBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarVerticalBorderWidth, setTaskbarVerticalBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarVerticalBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarVerticalBorderWidth\", taskbarVerticalBorderWidth + \"px\");\r\n  }, [taskbarVerticalBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarVerticalBorderType, setTaskbarVerticalBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarVerticalBorderType\")\r\n  )\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarVerticalBorderType\", taskbarVerticalBorderType);\r\n  }, [taskbarVerticalBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarHorizontalBorderColor, setTaskbarHorizontalBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHorizontalBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHorizontalBorderColor\", taskbarHorizontalBorderColor);\r\n  }, [taskbarHorizontalBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarHorizontalBorderWidth, setTaskbarHorizontalBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHorizontalBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHorizontalBorderWidth\", taskbarHorizontalBorderWidth + \"px\");\r\n  }, [taskbarHorizontalBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [taskbarHorizontalBorderType, setTaskbarHorizontalBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--TaskbarHorizontalBorderType\")\r\n  )\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--TaskbarHorizontalBorderType\", taskbarHorizontalBorderType);\r\n  }, [taskbarHorizontalBorderType]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Dimentions:</legend>\r\n        <div>\r\n          <label>Height:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={20}\r\n            max={60}\r\n            step=\"1\"\r\n            value={taskbarHeight}\r\n            onChange={(e) => setTaskbarHeight(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Font Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={10}\r\n            max={26}\r\n            step=\"1\"\r\n            value={taskbarFontSize}\r\n            onChange={(e) => setTaskbarFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Icon Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={10}\r\n            max={60}\r\n            step=\"1\"\r\n            value={taskbarIconSize}\r\n            onChange={(e) => setTaskbarIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Background:</legend>\r\n        <div>\r\n          <label>Color:</label>\r\n          <ColorPicker\r\n            color={taskbarBkgr}\r\n            setColor={setTaskbarBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background FX:</label>\r\n          <select\r\n            value={theme.taskbarBackgroundFX}\r\n            onChange={(e) => theme.setTaskbarBackgroundFX(e.target.value)}\r\n          >{\r\n              theme.backgroundFXList.map((fx) => (\r\n                <option key={fx} value={fx}>{fx}</option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Borders</legend>\r\n        <fieldset>\r\n          <legend>Horizontal</legend>\r\n          <div>\r\n            <label>Color:</label>\r\n            <ColorPicker\r\n              color={taskbarHorizontalBorderColor}\r\n              setColor={setTaskbarHorizontalBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Width:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={5}\r\n              step=\"1\"\r\n              value={taskbarHorizontalBorderWidth}\r\n              onChange={(e) => setTaskbarHorizontalBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Type:</label>\r\n            <select\r\n              value={taskbarHorizontalBorderType}\r\n              onChange={(e) => setTaskbarHorizontalBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Vertical</legend>\r\n          <div>\r\n            <label>Color:</label>\r\n            <ColorPicker\r\n              color={taskbarVerticalBorderColor}\r\n              setColor={setTaskbarVerticalBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Width:</label>\r\n            <input\r\n              type=\"range\"\r\n              min={0}\r\n              max={5}\r\n              step=\"1\"\r\n              value={taskbarVerticalBorderWidth}\r\n              onChange={(e) => setTaskbarVerticalBorderWidth(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Border Type:</label>\r\n            <select\r\n              value={taskbarVerticalBorderType}\r\n              onChange={(e) => setTaskbarVerticalBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n      </fieldset>\r\n    </>\r\n  )\r\n}","import { useState, useEffect, useContext, useCallback, lazy, Suspense } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport { DeviceContext } from \"../../../../System/DeviceManager/context.jsx\";\r\nimport DefaultLogo from \"../../../../System/Taskbar/Components/Start/DefaultLogo.jsx\";\r\nimport DefaultIcon from \"../../../../System/Taskbar/Components/LiveApps/DefaultIcon.jsx\";\r\nimport Icon from \"../../../../System/Taskbar/Components/ToDesktop/DefaultIcon.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const MainButtonsPreview = () => {\r\n  const [toDesktopClicked, setToDesktopClicked] = useState(false);\r\n  const [isLiveAppsOpen, setIsLiveAppsOpen] = useState(false);\r\n  const [isStartListOpen, setIsStartListOpen] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const themeContext = useContext(ThemeContext);\r\n  const deviceContext = useContext(DeviceContext);\r\n\r\n  const handleToDesktopClick = () => {\r\n    setIsStartListOpen(false);\r\n    setIsLiveAppsOpen(false);\r\n    setToDesktopClicked(true);\r\n    setTimeout(() => setToDesktopClicked(false), 1000);\r\n  }\r\n\r\n  const ToDesktopIcon = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${themeContext.ToDesktopIconPath}`).catch(\r\n      (_error) => {\r\n        console.error(\"Failed to import thematic toDesktop button icon\");\r\n        return {\r\n          default: Icon\r\n        }\r\n      }))\r\n  ), [themeContext.ToDesktopIconPath]);\r\n\r\n\r\n  const LiveAppsIcon = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${themeContext.LiveAppsMobileIconPath}`).catch(\r\n      (_error) => {\r\n        console.error(\"Failed to import thematic mobile Live Apps button icon\");\r\n        return {\r\n          default: DefaultIcon\r\n        }\r\n      }))\r\n  ), [themeContext.LiveAppsMobileIconPath]);\r\n\r\n  const Logo = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${themeContext.StartButtonPath}`).catch(\r\n      (error) => {\r\n        let errorMessage = \"Failed to load Start Button Logo\";\r\n        console.error(errorMessage);\r\n        return { default: DefaultLogo }\r\n      }\r\n    ))\r\n  ), [themeContext.StartButtonPath]);\r\n\r\n  useEffect(() => {\r\n    let flag = false;\r\n    switch (themeContext.mode) {\r\n      case \"Light\":\r\n        flag = false;\r\n        break;\r\n      case \"Dark\":\r\n        flag = true;\r\n        break;\r\n      case \"System\":\r\n        flag = themeContext.systemDarkMode;\r\n    }\r\n    setIsDarkMode(flag);\r\n  }, [themeContext.mode, themeContext.systemDarkMode]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          backgroundColor: \"var(--TaskbarBkgr)\",\r\n          backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n          backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n          backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n          backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n          backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <start-button\r\n          style={{ width: deviceContext.deviceType === \"Desktop\" ? \"auto\" : \"100%\" }}\r\n        >\r\n          <button\r\n            style={{ width: deviceContext.deviceType === \"Desktop\" ? \"auto\" : \"100%\" }}\r\n            onClick={() => { setIsStartListOpen(!isStartListOpen); setIsLiveAppsOpen(false); }}\r\n          >\r\n            <Suspense fallback={<DefaultLogo />}>\r\n              <Logo isOpen={isStartListOpen} />\r\n            </Suspense>\r\n            <span>Start</span>\r\n          </button>\r\n        </start-button>\r\n        <vertical-rect />\r\n        {deviceContext.deviceType === \"Desktop\" ?\r\n          <live-apps></live-apps> :\r\n          <live-apps-button>\r\n            <button\r\n              onClick={() => { setIsLiveAppsOpen(!isLiveAppsOpen); setIsStartListOpen(false); }}\r\n              style={{ width: \"100%\" }}\r\n            >\r\n              <Suspense fallback={null}>\r\n                <LiveAppsIcon isActive={isLiveAppsOpen} darkMode={isDarkMode} />\r\n              </Suspense>\r\n            <span>Live</span>\r\n            </button>\r\n          </live-apps-button>\r\n        }\r\n        <vertical-rect />\r\n        <to-desktop-button\r\n          style={{\r\n            display: deviceContext.deviceType !== \"Desktop\" ? \"flex\" : \"auto\",\r\n            width: deviceContext.deviceType !== \"Desktop\" ? \"100%\" : \"auto\",\r\n          }}\r\n        >\r\n          <button\r\n            onClick={handleToDesktopClick}\r\n          >\r\n            <Suspense fallback={null}>\r\n              <ToDesktopIcon isActive={toDesktopClicked} />\r\n            </Suspense>\r\n            <span>Desktop</span>\r\n          </button>\r\n        </to-desktop-button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const MainButtons = () => {\r\n\r\n  var root = document.querySelector(\":root\");\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [startButtonBkgr, setStartButtonBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBkgr\", startButtonBkgr);\r\n  }, [startButtonBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBkgrHover, setStartButtonBkgrHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBkgrHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBkgrHover\", startButtonBkgrHover);\r\n  }, [startButtonBkgrHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBkgrActive, setStartButtonBkgrActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBkgrActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBkgrActive\", startButtonBkgrActive);\r\n  }, [startButtonBkgrActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonIconSize, setStartButtonIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonIconSize\", startButtonIconSize + \"px\");\r\n  }, [startButtonIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonHeight, setStartButtonHeight] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonHeight\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonHeight\", startButtonHeight + \"px\");\r\n  }, [startButtonHeight]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonMargin, setStartButtonMargin] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonMargin\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonMargin\", startButtonMargin + \"px\");\r\n  }, [startButtonMargin]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonPadding, setStartButtonPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonPadding\", startButtonPadding + \"px\");\r\n  }, [startButtonPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBorderWidth, setStartButtonBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBorderWidth\", startButtonBorderWidth + \"px\");\r\n  }, [startButtonBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBorderColor, setStartButtonBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBorderColor\", startButtonBorderColor);\r\n  }, [startButtonBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBorderType, setStartButtonBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBorderType\", startButtonBorderType);\r\n  }, [startButtonBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonBorderRadius, setStartButtonBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonBorderRadius\", startButtonBorderRadius + \"px\");\r\n  }, [startButtonBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonFontVisibility, setStartButtonFontVisibility] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonFontVisibility\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonFontVisibility\", startButtonFontVisibility);\r\n  }, [startButtonFontVisibility]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonFontColor, setStartButtonFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonFontColor\", startButtonFontColor);\r\n  }, [startButtonFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startButtonFontSize, setStartButtonFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartButtonFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartButtonFontSize\", startButtonFontSize + \"px\");\r\n  }, [startButtonFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Dimentions:</legend>\r\n        <div>\r\n          <label>Height:</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"12\"\r\n            max=\"46\"\r\n            value={startButtonHeight}\r\n            onChange={(e) => setStartButtonHeight(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Margin:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={10}\r\n            step=\"1\"\r\n            value={startButtonMargin}\r\n            onChange={(e) => setStartButtonMargin(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Padding:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={20}\r\n            step=\"1\"\r\n            value={startButtonPadding}\r\n            onChange={(e) => setStartButtonPadding(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Icon</legend>\r\n        <div>\r\n          <label>Icon Theme:</label>\r\n          <select\r\n            value={theme.startButtonTheme}\r\n            onChange={(e) => { theme.setStartButtonTheme(e.target.value) }}\r\n          >\r\n            {theme.startButtonThemeList.map((theme) => {\r\n              return (\r\n                <option key={theme} value={theme}>\r\n                  {theme}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"12\"\r\n            max=\"46\"\r\n            value={startButtonIconSize}\r\n            onChange={(e) => setStartButtonIconSize(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Background</legend>\r\n        <div>\r\n          <label>Base:</label>\r\n          <ColorPicker\r\n            color={startButtonBkgr}\r\n            setColor={setStartButtonBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Hover:</label>\r\n          <ColorPicker\r\n            color={startButtonBkgrHover}\r\n            setColor={setStartButtonBkgrHover}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Active:</label>\r\n          <ColorPicker\r\n            color={startButtonBkgrActive}\r\n            setColor={setStartButtonBkgrActive}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Text</legend>\r\n        <div>\r\n          <label>Visibility</label>\r\n          <select\r\n            value={startButtonFontVisibility}\r\n            onChange={(e) => setStartButtonFontVisibility(e.target.value)}\r\n          >\r\n            <option value=\"visible\">Visible</option>\r\n            <option value=\"none\">Hidden</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Color:</label>\r\n          <ColorPicker\r\n            color={startButtonFontColor}\r\n            setColor={setStartButtonFontColor}\r\n            useAlpha={false}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={12}\r\n            max={46}\r\n            step=\"1\"\r\n            value={startButtonFontSize}\r\n            onChange={(e) => setStartButtonFontSize(e.target.value)}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>Border</legend>\r\n        <div>\r\n          <label>Color:</label>\r\n          <ColorPicker\r\n            color={startButtonBorderColor}\r\n            setColor={setStartButtonBorderColor}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Width:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={5}\r\n            step=\"1\"\r\n            value={startButtonBorderWidth}\r\n            onChange={(e) => setStartButtonBorderWidth(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Corner Curvature:</label>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={60}\r\n            step=\"1\"\r\n            value={startButtonBorderRadius}\r\n            onChange={(e) => setStartButtonBorderRadius(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Type:</label>\r\n          <select\r\n            value={startButtonBorderType}\r\n            onChange={(e) => setStartButtonBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">solid</option>\r\n            <option value=\"double\">double</option>\r\n            <option value=\"dashed\">dashed</option>\r\n            <option value=\"dotted\">dotted</option>\r\n            <option value=\"groove\">groove</option>\r\n            <option value=\"ridge\">ridge</option>\r\n            <option value=\"inset\">inset</option>\r\n            <option value=\"outset\">outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n    </>\r\n  )\r\n}","import { useState, useEffect, useContext, useCallback, lazy, Suspense } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\nimport DefaultLogo from \"../../../../System/Taskbar/Components/Start/DefaultLogo.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FaGear } from \"react-icons/fa6\";\r\nimport { MdOutlineRestartAlt } from \"react-icons/md\";\r\nimport { RiShutDownLine } from \"react-icons/ri\";\r\nimport { FcGlobe, FcInfo, FcSettings } from \"react-icons/fc\";\r\n\r\nexport const StartMenuPreview = () => {\r\n  const themeContext = useContext(ThemeContext);\r\n  const Logo = useCallback((\r\n    lazy(() => import(`../../../../System/ThemeManager/${themeContext.StartButtonPath}`).catch(\r\n      (error) => {\r\n        let errorMessage = \"Failed to load Start Button Logo\";\r\n        console.error(errorMessage);\r\n        return { default: DefaultLogo }\r\n      }\r\n    ))\r\n  ), [themeContext.StartButtonPath]);\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          bottom: \"0\",\r\n          left: \"0\",\r\n          width: \"100%\",\r\n          height: \"var(--TaskbarHeight)\",\r\n          backgroundColor: \"var(--TaskbarBkgr)\",\r\n          backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n          backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n          backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n          backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n          backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n          zIndex: 1,\r\n        }}\r\n      >\r\n        <start-button\r\n        >\r\n          <start-list class={\"startListOpen\"} style={{ left: 0 }}>\r\n            <div>\r\n              <button>\r\n                <FaGear />\r\n                <span>Settings</span>\r\n              </button>\r\n              <button>\r\n                <MdOutlineRestartAlt />\r\n                <span>Refresh</span>\r\n              </button>\r\n              <button>\r\n                <RiShutDownLine />\r\n                <span>Close</span>\r\n              </button>\r\n            </div>\r\n            <ul>\r\n              <li>\r\n                <button>\r\n                  <FcGlobe />\r\n                  <span>Program 1</span>\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcInfo />\r\n                  <span>Program 2</span>\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button>\r\n                  <FcSettings />\r\n                  <span>Program 3</span>\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </start-list>\r\n          <button>\r\n            <Suspense fallback={<DefaultLogo />}>\r\n              <Logo isOpen={true} />\r\n            </Suspense>\r\n            <span>Start</span>\r\n          </button>\r\n        </start-button>\r\n        <vertical-rect />\r\n        <live-apps></live-apps>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const StartMenu = () => {\r\n\r\n  var root = document.querySelector(\":root\");\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [startMenuBkgr, setStartMenuBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBkgrColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBkgrColor\", startMenuBkgr);\r\n  }, [startMenuBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuFlexDirection, setStartMenuFlexDirection] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuFlexDirection\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuFlexDirection\", startMenuFlexDirection);\r\n  }, [startMenuFlexDirection]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPadding, setStartMenuPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPadding\", startMenuPadding + \"px\");\r\n  }, [startMenuPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuBorderColor, setStartMenuBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBorderColor\", startMenuBorderColor);\r\n  }, [startMenuBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuBorderWidth, setStartMenuBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBorderWidth\", startMenuBorderWidth + \"px\");\r\n  }, [startMenuBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuBorderRadius, setStartMenuBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBorderRadius\", startMenuBorderRadius + \"px\");\r\n  }, [startMenuBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuBorderType, setStartMenuBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuBorderType\", startMenuBorderType);\r\n  }, [startMenuBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBkgr, setStartMenuPrimaryBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBkgr\", startMenuPrimaryBkgr);\r\n  }, [startMenuPrimaryBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBkgrHover, setStartMenuPrimaryBkgrHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBkgrHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBkgrHover\", startMenuPrimaryBkgrHover);\r\n  }, [startMenuPrimaryBkgrHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBkgrActive, setStartMenuPrimaryBkgrActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBkgrActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBkgrActive\", startMenuPrimaryBkgrActive);\r\n  }, [startMenuPrimaryBkgrActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryFontColor, setStartMenuPrimaryFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryFontColor\", startMenuPrimaryFontColor);\r\n  }, [startMenuPrimaryFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryFontColorHover, setStartMenuPrimaryFontColorHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryFontColorHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryFontColorHover\", startMenuPrimaryFontColorHover);\r\n  }, [startMenuPrimaryFontColorHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryFontColorActive, setStartMenuPrimaryFontColorActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryFontColorActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryFontColorActive\", startMenuPrimaryFontColorActive);\r\n  }, [startMenuPrimaryFontColorActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryFontSize, setStartMenuPrimaryFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryFontSize\", startMenuPrimaryFontSize + \"px\");\r\n  }, [startMenuPrimaryFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryIconSize, setStartMenuPrimaryIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryIconSize\", startMenuPrimaryIconSize + \"px\");\r\n  }, [startMenuPrimaryIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryMargin, setStartMenuPrimaryMargin] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryMargin\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryMargin\", startMenuPrimaryMargin + \"px\");\r\n  }, [startMenuPrimaryMargin]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryPadding, setStartMenuPrimaryPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryPadding\", startMenuPrimaryPadding + \"px\");\r\n  }, [startMenuPrimaryPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBorderColor, setStartMenuPrimaryBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBorderColor\", startMenuPrimaryBorderColor);\r\n  }, [startMenuPrimaryBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBorderWidth, setStartMenuPrimaryBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBorderWidth\", startMenuPrimaryBorderWidth + \"px\");\r\n  }, [startMenuPrimaryBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBorderRadius, setStartMenuPrimaryBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBorderRadius\", startMenuPrimaryBorderRadius + \"px\");\r\n  }, [startMenuPrimaryBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuPrimaryBorderType, setStartMenuPrimaryBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuPrimaryBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuPrimaryBorderType\", startMenuPrimaryBorderType);\r\n  }, [startMenuPrimaryBorderType]);\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBkgr, setStartMenuSecondaryBkgr] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBkgr\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBkgr\", startMenuSecondaryBkgr);\r\n  }, [startMenuSecondaryBkgr]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBkgrHover, setStartMenuSecondaryBkgrHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBkgrHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBkgrHover\", startMenuSecondaryBkgrHover);\r\n  }, [startMenuSecondaryBkgrHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBkgrActive, setStartMenuSecondaryBkgrActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBkgrActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBkgrActive\", startMenuSecondaryBkgrActive);\r\n  }, [startMenuSecondaryBkgrActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontVisibility, setStartMenuSecondaryFontVisibility] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontVisibility\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryFontVisibility\", startMenuSecondaryFontVisibility);\r\n  }, [startMenuSecondaryFontVisibility]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontColor, setStartMenuSecondaryFontColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuFontSecondaryColor\", startMenuSecondaryFontColor);\r\n  }, [startMenuSecondaryFontColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontColorHover, setStartMenuSecondaryFontColorHover] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontColorHover\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuFontSecondaryColorHover\", startMenuSecondaryFontColorHover);\r\n  }, [startMenuSecondaryFontColorHover]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontColorActive, setStartMenuSecondaryFontColorActive] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontColorActive\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuFontSecondaryColorActive\", startMenuSecondaryFontColorActive);\r\n  }, [startMenuSecondaryFontColorActive]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryFontSize, setStartMenuSecondaryFontSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryFontSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryFontSize\", startMenuSecondaryFontSize + \"px\");\r\n  }, [startMenuSecondaryFontSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryIconSize, setStartMenuSecondaryIconSize] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryIconSize\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryIconSize\", startMenuSecondaryIconSize + \"px\");\r\n  }, [startMenuSecondaryIconSize]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryMargin, setStartMenuSecondaryMargin] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryMargin\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryMargin\", startMenuSecondaryMargin + \"px\");\r\n  }, [startMenuSecondaryMargin]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryPadding, setStartMenuSecondaryPadding] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryPadding\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryPadding\", startMenuSecondaryPadding + \"px\");\r\n  }, [startMenuSecondaryPadding]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBorderColor, setStartMenuSecondaryBorderColor] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBorderColor\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBorderColor\", startMenuSecondaryBorderColor);\r\n  }, [startMenuSecondaryBorderColor]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBorderWidth, setStartMenuSecondaryBorderWidth] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBorderWidth\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBorderWidth\", startMenuSecondaryBorderWidth + \"px\");\r\n  }, [startMenuSecondaryBorderWidth]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBorderRadius, setStartMenuSecondaryBorderRadius] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBorderRadius\").slice(0, -2),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBorderRadius\", startMenuSecondaryBorderRadius + \"px\");\r\n  }, [startMenuSecondaryBorderRadius]);\r\n  //----------------------------------------------------------------------------//\r\n  const [startMenuSecondaryBorderType, setStartMenuSecondaryBorderType] = useState(\r\n    getComputedStyle(root).getPropertyValue(\"--StartMenuSecondaryBorderType\"),\r\n  );\r\n  useEffect(() => {\r\n    root.style.setProperty(\"--StartMenuSecondaryBorderType\", startMenuSecondaryBorderType);\r\n  }, [startMenuSecondaryBorderType]);\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Start Menu</legend>\r\n        <div>\r\n          <label>Background Color</label>\r\n          <ColorPicker\r\n            color={startMenuBkgr}\r\n            setColor={setStartMenuBkgr}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Background FX:</label>\r\n          <select\r\n            value={theme.startMenuBackgroundFX}\r\n            onChange={(e) => theme.setStartMenuBackgroundFX(e.target.value)}\r\n          >{\r\n              theme.backgroundFXList.map((fx) => (\r\n                <option key={fx} value={fx}>{fx}</option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Lists Direction</label>\r\n          <select\r\n            value={startMenuFlexDirection}\r\n            onChange={(e) => setStartMenuFlexDirection(e.target.value)}\r\n          >\r\n            <option value=\"row\">Row</option>\r\n            <option value=\"row-reverse\">Row Reverse</option>\r\n            <option value=\"column\">Column</option>\r\n            <option value=\"column-reverse\">Column Reverse</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Padding</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"10\"\r\n            value={startMenuPadding}\r\n            onChange={(e) => setStartMenuPadding(e.target.value)} />\r\n        </div>\r\n        <div>\r\n          <label>Border Color</label>\r\n          <ColorPicker\r\n            color={startMenuBorderColor}\r\n            setColor={setStartMenuBorderColor}\r\n            useAlpha={true}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Border Width</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"10\"\r\n            value={startMenuBorderWidth}\r\n            onChange={(e) => setStartMenuBorderWidth(e.target.value)} />\r\n        </div>\r\n        <div>\r\n          <label>Border Radius</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"10\"\r\n            value={startMenuBorderRadius}\r\n            onChange={(e) => setStartMenuBorderRadius(e.target.value)} />\r\n        </div>\r\n        <div>\r\n          <label>Border Type</label>\r\n          <select\r\n            value={startMenuBorderType}\r\n            onChange={(e) => setStartMenuBorderType(e.target.value)}\r\n          >\r\n            <option value=\"solid\">solid</option>\r\n            <option value=\"double\">double</option>\r\n            <option value=\"dashed\">dashed</option>\r\n            <option value=\"dotted\">dotted</option>\r\n            <option value=\"groove\">groove</option>\r\n            <option value=\"ridge\">ridge</option>\r\n            <option value=\"inset\">inset</option>\r\n            <option value=\"outset\">outset</option>\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n      <fieldset>\r\n        <legend>App List</legend>\r\n        <fieldset>\r\n          <legend>Background</legend>\r\n          <div>\r\n            <label>Background</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryBkgr}\r\n              setColor={setStartMenuPrimaryBkgr}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Hover</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryBkgrHover}\r\n              setColor={setStartMenuPrimaryBkgrHover}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Active</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryBkgrActive}\r\n              setColor={setStartMenuPrimaryBkgrActive}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Font</legend>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryFontColor}\r\n              setColor={setStartMenuPrimaryFontColor}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color Hover</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryFontColorHover}\r\n              setColor={setStartMenuPrimaryFontColorHover}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color Active</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryFontColorActive}\r\n              setColor={setStartMenuPrimaryFontColorActive}\r\n              useAlpha={false}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Font Size</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"32\"\r\n              value={startMenuPrimaryFontSize}\r\n              onChange={(e) => setStartMenuPrimaryFontSize(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            <label>Icon Size</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"32\"\r\n              value={startMenuPrimaryIconSize}\r\n              onChange={(e) => setStartMenuPrimaryIconSize(e.target.value)} />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Dimentions</legend>\r\n          <div>\r\n            <label>Padding</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={startMenuPrimaryPadding}\r\n              onChange={(e) => setStartMenuPrimaryPadding(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            <label>Margin</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={startMenuPrimaryMargin}\r\n              onChange={(e) => setStartMenuPrimaryMargin(e.target.value)} />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Border</legend>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={startMenuPrimaryBorderColor}\r\n              setColor={setStartMenuPrimaryBorderColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Width</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={startMenuPrimaryBorderWidth}\r\n              onChange={(e) => setStartMenuPrimaryBorderWidth(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            <label>Radius</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={startMenuPrimaryBorderRadius}\r\n              onChange={(e) => setStartMenuPrimaryBorderRadius(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            <label>Type</label>\r\n            <select\r\n              value={startMenuPrimaryBorderType}\r\n              onChange={(e) => setStartMenuPrimaryBorderType(e.target.value)}\r\n            >\r\n              <option value=\"solid\">solid</option>\r\n              <option value=\"double\">double</option>\r\n              <option value=\"dashed\">dashed</option>\r\n              <option value=\"dotted\">dotted</option>\r\n              <option value=\"groove\">groove</option>\r\n              <option value=\"ridge\">ridge</option>\r\n              <option value=\"inset\">inset</option>\r\n              <option value=\"outset\">outset</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>System List</legend>\r\n          <fieldset>\r\n            <legend>Background</legend>\r\n            <div>\r\n              <label>Background</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryBkgr}\r\n                setColor={setStartMenuSecondaryBkgr}\r\n                useAlpha={true}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Hover</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryBkgrHover}\r\n                setColor={setStartMenuSecondaryBkgrHover}\r\n                useAlpha={true}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Active</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryBkgrActive}\r\n                setColor={setStartMenuSecondaryBkgrActive}\r\n                useAlpha={true}\r\n              />\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Font</legend>\r\n            <div>\r\n              <label>Visibility</label>\r\n              <select\r\n                value={startMenuSecondaryFontVisibility}\r\n                onChange={(e) => setStartMenuSecondaryFontVisibility(e.target.value)}\r\n              >\r\n                <option value=\"visible\">visible</option>\r\n                <option value=\"none\">hidden</option>\r\n              </select>\r\n            </div>\r\n            <div>\r\n              <label>Color</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryFontColor}\r\n                setColor={setStartMenuSecondaryFontColor}\r\n                useAlpha={false}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Color Hover</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryFontColorHover}\r\n                setColor={setStartMenuSecondaryFontColorHover}\r\n                useAlpha={false}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Color Active</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryFontColorActive}\r\n                setColor={setStartMenuSecondaryFontColorActive}\r\n                useAlpha={false}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Font Size</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"32\"\r\n                value={startMenuSecondaryFontSize}\r\n                onChange={(e) => setStartMenuSecondaryFontSize(e.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>Icon Size</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"32\"\r\n                value={startMenuSecondaryIconSize}\r\n                onChange={(e) => setStartMenuSecondaryIconSize(e.target.value)} />\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Dimentions</legend>\r\n            <div>\r\n              <label>Padding</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"10\"\r\n                value={startMenuSecondaryPadding}\r\n                onChange={(e) => setStartMenuSecondaryPadding(e.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>Margin</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"10\"\r\n                value={startMenuSecondaryMargin}\r\n                onChange={(e) => setStartMenuSecondaryMargin(e.target.value)} />\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Border</legend>\r\n            <div>\r\n              <label>Color</label>\r\n              <ColorPicker\r\n                color={startMenuSecondaryBorderColor}\r\n                setColor={setStartMenuSecondaryBorderColor}\r\n                useAlpha={true}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label>Width</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"10\"\r\n                value={startMenuSecondaryBorderWidth}\r\n                onChange={(e) => setStartMenuSecondaryBorderWidth(e.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>Radius</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"10\"\r\n                value={startMenuSecondaryBorderRadius}\r\n                onChange={(e) => setStartMenuSecondaryBorderRadius(e.target.value)} />\r\n            </div>\r\n            <div>\r\n              <label>Type</label>\r\n              <select\r\n                value={startMenuSecondaryBorderType}\r\n                onChange={(e) => setStartMenuSecondaryBorderType(e.target.value)}\r\n              >\r\n                <option value=\"solid\">solid</option>\r\n                <option value=\"double\">double</option>\r\n                <option value=\"dashed\">dashed</option>\r\n                <option value=\"dotted\">dotted</option>\r\n                <option value=\"groove\">groove</option>\r\n                <option value=\"ridge\">ridge</option>\r\n                <option value=\"inset\">inset</option>\r\n                <option value=\"outset\">outset</option>\r\n              </select>\r\n            </div>\r\n          </fieldset>\r\n        </fieldset>\r\n      </fieldset>\r\n    </>\r\n  )\r\n};","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FcGlobe, FcCalculator, FcInfo } from \"react-icons/fc\";\r\n\r\nexport const AppListPreview = () => {\r\n\r\n    return (\r\n        <start-list-mobile\r\n            style={{\r\n                background: \"var(--StartMenuMobileOuterBkgr)\",\r\n                boxShadow: \" 0 0 var(--StartMenuMobileOuterShadowBlur) var(--StartMenuMobileOuterShadowSpread) var(--StartMenuMobileOuterShadowColor) inset\",\r\n            }}>\r\n            <start-list-mobile-container>\r\n                <button><FcGlobe /><span>App 1</span></button>\r\n                <button><FcCalculator /><span>App 2</span></button>\r\n                <button><FcInfo /><span>App 3</span></button>\r\n            </start-list-mobile-container>\r\n        </start-list-mobile>\r\n    )\r\n}\r\n\r\nexport const AppList = () => {\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [startMenuOuterPadding, setStartMenuOuterPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileOuterPadding\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileOuterPadding\", startMenuOuterPadding + \"px\");\r\n    }, [startMenuOuterPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuOuterShadowBlur, setStartMenuOuterShadowBlur] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileOuterShadowBlur\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileOuterShadowBlur\", startMenuOuterShadowBlur + \"px\");\r\n    }, [startMenuOuterShadowBlur]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuOuterShadowSpread, setStartMenuOuterShadowSpread] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileOuterShadowSpread\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileOuterShadowSpread\", startMenuOuterShadowSpread + \"px\");\r\n    }, [startMenuOuterShadowSpread]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuOuterShadowColor, setStartMenuOuterShadowColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileOuterShadowColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileOuterShadowColor\", startMenuOuterShadowColor);\r\n    }, [startMenuOuterShadowColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuOuterBkgr, setStartMenuOuterBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileOuterBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileOuterBkgr\", startMenuOuterBkgr);\r\n    }, [startMenuOuterBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuInnerBkgr, setStartMenuInnerBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileInnerBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileInnerBkgr\", startMenuInnerBkgr);\r\n    }, [startMenuInnerBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuInnerBorderWidth, setStartMenuInnerBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileInnerBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileInnerBorderWidth\", startMenuInnerBorderWidth + \"px\");\r\n    }, [startMenuInnerBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuInnerBorderColor, setStartMenuInnerBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileInnerBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileInnerBorderColor\", startMenuInnerBorderColor);\r\n    }, [startMenuInnerBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuInnerBorderType, setStartMenuInnerBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileInnerBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileInnerBorderType\", startMenuInnerBorderType);\r\n    }, [startMenuInnerBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuInnerBorderRadius, setStartMenuInnerBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileInnerBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileInnerBorderRadius\", startMenuInnerBorderRadius + \"px\");\r\n    }, [startMenuInnerBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonPadding, setStartMenuButtonPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonPadding\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonPadding\", startMenuButtonPadding + \"px\");\r\n    }, [startMenuButtonPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonMargin, setStartMenuButtonMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonMargin\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonMargin\", startMenuButtonMargin + \"px\");\r\n    }, [startMenuButtonMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonSize, setStartMenuButtonSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonSize\", startMenuButtonSize + \"px\");\r\n    }, [startMenuButtonSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonFontSize, setStartMenuButtonFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonFontSize\", startMenuButtonFontSize + \"px\");\r\n    }, [startMenuButtonFontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonFontColor, setStartMenuButtonFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonFontColor\", startMenuButtonFontColor);\r\n    }, [startMenuButtonFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonFontDisplay, setStartMenuButtonFontDisplay] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonFontDisplay\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonFontDisplay\", startMenuButtonFontDisplay);\r\n    }, [startMenuButtonFontDisplay]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonBkgr, setStartMenuButtonBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonBkgr\", startMenuButtonBkgr);\r\n    }, [startMenuButtonBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonBkgrHover, setStartMenuButtonBkgrHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonBkgrHover\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonBkgrHover\", startMenuButtonBkgrHover);\r\n    }, [startMenuButtonBkgrHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonBkgrActive, setStartMenuButtonBkgrActive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonBkgrActive\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonBkgrActive\", startMenuButtonBkgrActive);\r\n    }, [startMenuButtonBkgrActive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonBorderWidth, setStartMenuButtonBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonBorderWidth\", startMenuButtonBorderWidth + \"px\");\r\n    }, [startMenuButtonBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonBorderColor, setStartMenuButtonBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonBorderColor\", startMenuButtonBorderColor);\r\n    }, [startMenuButtonBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonBorderType, setStartMenuButtonBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonBorderType\", startMenuButtonBorderType);\r\n    }, [startMenuButtonBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonBorderRadius, setStartMenuButtonBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonBorderRadius\", startMenuButtonBorderRadius + \"px\");\r\n    }, [startMenuButtonBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [startMenuButtonIconSize, setStartMenuButtonIconSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--StartMenuMobileButtonIconSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--StartMenuMobileButtonIconSize\", startMenuButtonIconSize + \"px\");\r\n    }, [startMenuButtonIconSize]);\r\n\r\n\r\n    return (<>\r\n\r\n        <fieldset>\r\n            <legend>Outside Container</legend>\r\n            <div>\r\n                <label>Padding</label>\r\n                <input type=\"range\" min=\"0\" max=\"100\" value={startMenuOuterPadding} onChange={(e) => { setStartMenuOuterPadding(e.target.value) }} />\r\n            </div>\r\n            <div>\r\n                <label>Background</label>\r\n                <ColorPicker color={startMenuOuterBkgr} setColor={setStartMenuOuterBkgr} useAlpha={true} />\r\n            </div>\r\n            <fieldset>\r\n                <legend>Shadow</legend>\r\n                <div>\r\n                    <label>Blur</label>\r\n                    <input type=\"range\" min=\"0\" max=\"100\" value={startMenuOuterShadowBlur} onChange={(e) => { setStartMenuOuterShadowBlur(e.target.value) }} />\r\n                </div>\r\n                <div>\r\n                    <label>Spread</label>\r\n                    <input type=\"range\" min=\"0\" max=\"100\" value={startMenuOuterShadowSpread} onChange={(e) => { setStartMenuOuterShadowSpread(e.target.value) }} />\r\n                </div>\r\n                <div>\r\n                    <label>Color</label>\r\n                    <ColorPicker color={startMenuOuterShadowColor} setColor={setStartMenuOuterShadowColor} useAlpha={true} />\r\n                </div>\r\n            </fieldset>\r\n        </fieldset>\r\n        <fieldset>\r\n            <legend>List Container</legend>\r\n            <div>\r\n                <label>Background</label>\r\n                <ColorPicker color={startMenuInnerBkgr} setColor={setStartMenuInnerBkgr} useAlpha={true} />\r\n            </div>\r\n            <div>\r\n                <label>background FX</label>\r\n                <select value={theme.startMenuMobileBackgroundFX} onChange={(e) => { theme.setStartMenuMobileBackgroundFX(e.target.value) }}>\r\n                    {theme.backgroundFXList.map((backgroundFX) => (<option key={backgroundFX} value={backgroundFX}>{backgroundFX}</option>))}\r\n                </select>\r\n            </div>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type=\"range\" min=\"0\" max=\"20\" value={startMenuInnerBorderWidth} onChange={(e) => { setStartMenuInnerBorderWidth(e.target.value) }} />\r\n                </div>\r\n                <div>\r\n                    <label>Color</label>\r\n                    <ColorPicker color={startMenuInnerBorderColor} setColor={setStartMenuInnerBorderColor} useAlpha={true} />\r\n                </div>\r\n                <div>\r\n                    <label>Radius</label>\r\n                    <input type=\"range\" min=\"0\" max=\"100\" value={startMenuInnerBorderRadius} onChange={(e) => { setStartMenuInnerBorderRadius(e.target.value) }} />\r\n                </div>\r\n                <div>\r\n                    <label>Type</label>\r\n                    <select value={startMenuInnerBorderType} onChange={(e) => { setStartMenuInnerBorderType(e.target.value) }}>\r\n                        <option value=\"none\">none</option>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n        </fieldset>\r\n        <fieldset>\r\n            <legend>Buttons</legend>\r\n            <fieldset>\r\n                <legend>Dimentions</legend>\r\n                <div>\r\n                    <label>Size</label>\r\n                    <input type=\"range\" min=\"0\" max=\"250\" value={startMenuButtonSize} onChange={(e) => { setStartMenuButtonSize(e.target.value) }} />\r\n                </div>\r\n                <div>\r\n                    <label>Padding</label>\r\n                    <input type=\"range\" min=\"0\" max=\"100\" value={startMenuButtonPadding} onChange={(e) => { setStartMenuButtonPadding(e.target.value) }} />\r\n                </div>\r\n                <div>\r\n                    <label>Margin</label>\r\n                    <input type=\"range\" min=\"0\" max=\"100\" value={startMenuButtonMargin} onChange={(e) => { setStartMenuButtonMargin(e.target.value) }} />\r\n                </div>\r\n                <div>\r\n                    <label>Icon Size</label>\r\n                    <input type=\"range\" min=\"0\" max=\"200\" value={startMenuButtonIconSize} onChange={(e) => { setStartMenuButtonIconSize(e.target.value) }} />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background</legend>\r\n                <div>\r\n                    <label>Normal</label>\r\n                    <ColorPicker color={startMenuButtonBkgr} setColor={setStartMenuButtonBkgr} useAlpha={true} />\r\n                </div>\r\n                <div>\r\n                    <label>On Hover</label>\r\n                    <ColorPicker color={startMenuButtonBkgrHover} setColor={setStartMenuButtonBkgrHover} useAlpha={true} />\r\n                </div>\r\n                <div>\r\n                    <label>On Click</label>\r\n                    <ColorPicker color={startMenuButtonBkgrActive} setColor={setStartMenuButtonBkgrActive} useAlpha={true} />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type=\"range\" min=\"0\" max=\"20\" value={startMenuButtonBorderWidth} onChange={(e) => { setStartMenuButtonBorderWidth(e.target.value) }} />\r\n                </div>\r\n                <div>\r\n                    <label>Color</label>\r\n                    <ColorPicker color={startMenuButtonBorderColor} setColor={setStartMenuButtonBorderColor} useAlpha={true} />\r\n                </div>\r\n                <div>\r\n                    <label>Radius</label>\r\n                    <input type=\"range\" min=\"0\" max=\"100\" value={startMenuButtonBorderRadius} onChange={(e) => { setStartMenuButtonBorderRadius(e.target.value) }} />\r\n                </div>\r\n                <div>\r\n                    <label>Type</label>\r\n                    <select value={startMenuButtonBorderType} onChange={(e) => { setStartMenuButtonBorderType(e.target.value) }}>\r\n                        <option value=\"none\">none</option>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Text</legend>\r\n                <div>\r\n                    <label>Display</label>\r\n                    <input type=\"checkbox\" checked={startMenuButtonFontDisplay === \"visible\" ? true : false} onChange={(e) => { startMenuButtonFontDisplay === \"visible\" ? setStartMenuButtonFontDisplay(\"none\") : setStartMenuButtonFontDisplay(\"visible\") }} />\r\n                </div>\r\n                <div>\r\n                    <label>Color</label>\r\n                    <ColorPicker color={startMenuButtonFontColor} setColor={setStartMenuButtonFontColor} useAlpha={false} />\r\n                </div>\r\n                <div>\r\n                    <label>Size</label>\r\n                    <input type=\"range\" min=\"0\" max=\"32\" value={startMenuButtonFontSize} onChange={(e) => { setStartMenuButtonFontSize(e.target.value) }} />\r\n                </div>\r\n            </fieldset>\r\n        </fieldset>\r\n    </>);\r\n}","import { useState, useEffect, useContext, useCallback, lazy, Suspense } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport DefaultButton from \"../../../../System/Taskbar/Components/LiveApps/DefaultButton.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FcGlobe } from \"react-icons/fc\";\r\nimport { FcCalculator } from \"react-icons/fc\";\r\n\r\nexport const LiveAppsPreview = () => {\r\n    const themeContext = useContext(ThemeContext);\r\n    \r\n      const AppButton = useCallback((\r\n        lazy(() => import(`../../../../System/ThemeManager/${themeContext.LiveAppButtonPath}`).catch(\r\n          (_error) => {\r\n            console.error(\"Failed to import thematic Live App buttons\");\r\n            return {\r\n              default: DefaultButton\r\n            }\r\n          }))\r\n      ), [themeContext.LiveAppButtonPath]);\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"space-between\",\r\n                    bottom: \"0\",\r\n                    left: \"0\",\r\n                    width: \"100%\",\r\n                    height: \"var(--TaskbarHeight)\",\r\n                    backgroundColor: \"var(--TaskbarBkgr)\",\r\n                    backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n                    backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n                    backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n                    backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n                    backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n                    zIndex: 1,\r\n                }}\r\n            >\r\n                <live-apps>\r\n                          <Suspense fallback={null}>\r\n                            <AppButton\r\n                              name={\"\"}\r\n                              click={() => {}}\r\n                              context={(e) => {}}\r\n                              AppIcon={FcGlobe}\r\n                              isSelected={true}\r\n                            />\r\n                          </Suspense>\r\n                          <Suspense fallback={null}>\r\n                            <AppButton\r\n                              name={\"\"}\r\n                              click={() => {}}\r\n                              context={(e) => {}}\r\n                              AppIcon={FcCalculator}\r\n                              isSelected={false}\r\n                            />\r\n                          </Suspense>\r\n                </live-apps>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const LiveApps = () => {\r\n\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [liveAppsBkgr, setLiveAppsBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBkgr\", liveAppsBkgr);\r\n    }, [liveAppsBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBkgrHover, setLiveAppsBkgrHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBkgrHover\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBkgrHover\", liveAppsBkgrHover);\r\n    }, [liveAppsBkgrHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBkgrActive, setLiveAppsBkgrActive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBkgrActive\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBkgrActive\", liveAppsBkgrActive);\r\n    }, [liveAppsBkgrActive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsIconSize, setLiveAppsIconSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsIconSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsIconSize\", liveAppsIconSize + \"px\");\r\n    }, [liveAppsIconSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontSize, setLiveAppsFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontSize\", liveAppsFontSize + \"px\");\r\n    }, [liveAppsFontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontColor, setLiveAppsFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontColor\", liveAppsFontColor);\r\n    }, [liveAppsFontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontColorHover, setLiveAppsFontColorHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontColorHover\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontColorHover\", liveAppsFontColorHover);\r\n    }, [liveAppsFontColorHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontColorActive, setLiveAppsFontColorActive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontColorActive\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontColorActive\", liveAppsFontColorActive);\r\n    }, [liveAppsFontColorActive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontColorActiveHover, setLiveAppsFontColorActiveHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontColorActiveHover\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontColorActiveHover\", liveAppsFontColorActiveHover);\r\n    }, [liveAppsFontColorActiveHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsFontVisibility, setLiveAppsFontVisibility] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsFontVisibility\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsFontVisibility\", liveAppsFontVisibility);\r\n    }, [liveAppsFontVisibility]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsHeight, setLiveAppsHeight] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsHeight\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsHeight\", liveAppsHeight + \"px\");\r\n    }, [liveAppsHeight]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsMargin, setLiveAppsMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsMargin\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsMargin\", liveAppsMargin + \"px\");\r\n    }, [liveAppsMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsPadding, setLiveAppsPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsPadding\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsPadding\", liveAppsPadding + \"px\");\r\n    }, [liveAppsPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBorderWidth, setLiveAppsBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBorderWidth\", liveAppsBorderWidth + \"px\");\r\n    }, [liveAppsBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBorderRadius, setLiveAppsBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBorderRadius\", liveAppsBorderRadius + \"px\");\r\n    }, [liveAppsBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBorderColor, setLiveAppsBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBorderColor\", liveAppsBorderColor);\r\n    }, [liveAppsBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [liveAppsBorderType, setLiveAppsBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--LiveAppsBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--LiveAppsBorderType\", liveAppsBorderType);\r\n    }, [liveAppsBorderType]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Theme</legend>\r\n                <div>\r\n                    <select\r\n                        value={theme.liveAppsTheme}\r\n                        onChange={(e) => { theme.setLiveAppsTheme(e.target.value) }}\r\n                    >\r\n                        {theme.liveAppsThemeList.map((theme) => {\r\n                            return (\r\n                                <option key={theme} value={theme}>\r\n                                    {theme}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Colors</legend>\r\n                <fieldset>\r\n                    <legend>Background</legend>\r\n                    <div>\r\n                        <label>Normal</label>\r\n                        <ColorPicker\r\n                            color={liveAppsBkgr}\r\n                            setColor={setLiveAppsBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Hover</label>\r\n                        <ColorPicker\r\n                            color={liveAppsBkgrHover}\r\n                            setColor={setLiveAppsBkgrHover}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Active</label>\r\n                        <ColorPicker\r\n                            color={liveAppsBkgrActive}\r\n                            setColor={setLiveAppsBkgrActive}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Font</legend>\r\n                    <div>\r\n                        <label>Visibility</label>\r\n                        <select\r\n                            value={liveAppsFontVisibility}\r\n                            onChange={(e) => setLiveAppsFontVisibility(e.target.value)}\r\n                        >\r\n                            <option value=\"visible\">Visible</option>\r\n                            <option value=\"none\">Hidden</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label>Normal</label>\r\n                        <ColorPicker\r\n                            color={liveAppsFontColor}\r\n                            setColor={setLiveAppsFontColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Hover</label>\r\n                        <ColorPicker\r\n                            color={liveAppsFontColorHover}\r\n                            setColor={setLiveAppsFontColorHover}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Active</label>\r\n                        <ColorPicker\r\n                            color={liveAppsFontColorActive}\r\n                            setColor={setLiveAppsFontColorActive}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Dimentions</legend>\r\n                <div>\r\n                    <label>Height</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"80\"\r\n                        value={liveAppsHeight}\r\n                        onChange={(e) => setLiveAppsHeight(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Icon</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"80\"\r\n                        value={liveAppsIconSize}\r\n                        onChange={(e) => setLiveAppsIconSize(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Font</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"30\"\r\n                        value={liveAppsFontVisibility}\r\n                        onChange={(e) => setLiveAppsFontVisibility(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Margin</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={liveAppsMargin}\r\n                        onChange={(e) => setLiveAppsMargin(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Padding</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={liveAppsPadding}\r\n                        onChange={(e) => setLiveAppsPadding(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={liveAppsBorderWidth}\r\n                        onChange={(e) => setLiveAppsBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Radius</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        value={liveAppsBorderRadius}\r\n                        onChange={(e) => setLiveAppsBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Type</label>\r\n                    <select\r\n                        value={liveAppsBorderType}\r\n                        onChange={(e) => setLiveAppsBorderType(e.target.value)}\r\n                    >\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Color</label>\r\n                    <ColorPicker\r\n                        color={liveAppsBorderColor}\r\n                        setColor={setLiveAppsBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    )\r\n};","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { TbDeviceDesktop } from \"react-icons/tb\";\r\nimport { WiCloudy } from \"react-icons/wi\";\r\n\r\nexport const TrayPreview = () => {\r\n    return (\r\n        <>\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"space-between\",\r\n                    bottom: \"0\",\r\n                    left: \"0\",\r\n                    width: \"100%\",\r\n                    height: \"var(--TaskbarHeight)\",\r\n                    backgroundColor: \"var(--TaskbarBkgr)\",\r\n                    backgroundImage: \"var(--TaskbarBkgrImage)\",\r\n                    backgroundPosition: \"var(--TaskbarBkgrPosition)\",\r\n                    backgroundSize: \"var(--TaskbarBkgrSize)\",\r\n                    backgroundRepeat: \"var(--TaskbarBkgrRepeat)\",\r\n                    backdropFilter: \"var(--TaskbarBackdropFilter)\",\r\n                    zIndex: 1,\r\n                }}\r\n            >\r\n                <live-apps></live-apps>\r\n                <vertical-rect />\r\n                <taskbar-tray>\r\n                    <button>\r\n                        <WiCloudy /> 20°C\r\n                    </button>\r\n                    <button>\r\n                        <TbDeviceDesktop />\r\n                    </button>\r\n                    <button>\r\n                        11:59\r\n                        <br />\r\n                        31/12/2000\r\n                    </button>\r\n                </taskbar-tray>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const Tray = () => {\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [taskbarTrayBkgr, setTaskbarTrayBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBkgr\", taskbarTrayBkgr);\r\n    }, [taskbarTrayBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayMargin, setTaskbarTrayMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayMargin\", taskbarTrayMargin + \"px\");\r\n    }, [taskbarTrayMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayPadding, setTaskbarTrayPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayPadding\", taskbarTrayPadding + \"px\");\r\n    }, [taskbarTrayPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayBorderColor, setTaskbarTrayBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBorderColor\", taskbarTrayBorderColor);\r\n    }, [taskbarTrayBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayBorderRadius, setTaskbarTrayBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBorderRadius\", taskbarTrayBorderRadius + \"px\");\r\n    }, [taskbarTrayBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayBorderWidth, setTaskbarTrayBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBorderWidth\", taskbarTrayBorderWidth + \"px\");\r\n    }, [taskbarTrayBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayBorderType, setTaskbarTrayBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayBorderType\", taskbarTrayBorderType);\r\n    }, [taskbarTrayBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBkgr, setTaskbarTrayButtonBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBkgr\", taskbarTrayButtonBkgr);\r\n    }, [taskbarTrayButtonBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBkgrHover, setTaskbarTrayButtonBkgrHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBkgrHover\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBkgrHover\", taskbarTrayButtonBkgrHover);\r\n    }, [taskbarTrayButtonBkgrHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBkgrActive, setTaskbarTrayButtonBkgrActive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBkgrActive\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBkgrActive\", taskbarTrayButtonBkgrActive);\r\n    }, [taskbarTrayButtonBkgrActive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonColor, setTaskbarTrayButtonColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonColor\", taskbarTrayButtonColor);\r\n    }, [taskbarTrayButtonColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonColorHover, setTaskbarTrayButtonColorHover] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonColorHover\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonColorHover\", taskbarTrayButtonColorHover);\r\n    }, [taskbarTrayButtonColorHover]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonColorActive, setTaskbarTrayButtonColorActive] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonColorActive\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonColorActive\", taskbarTrayButtonColorActive);\r\n    }, [taskbarTrayButtonColorActive]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonMargin, setTaskbarTrayButtonMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonMargin\", taskbarTrayButtonMargin + \"px\");\r\n    }, [taskbarTrayButtonMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonPadding, setTaskbarTrayButtonPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonPadding\", taskbarTrayButtonPadding + \"px\");\r\n    }, [taskbarTrayButtonPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBorderColor, setTaskbarTrayButtonBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBorderColor\", taskbarTrayButtonBorderColor);\r\n    }, [taskbarTrayButtonBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBorderRadius, setTaskbarTrayButtonBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBorderRadius\", taskbarTrayButtonBorderRadius + \"px\");\r\n    }, [taskbarTrayButtonBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBorderWidth, setTaskbarTrayButtonBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBorderWidth\", taskbarTrayButtonBorderWidth + \"px\");\r\n    }, [taskbarTrayButtonBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarTrayButtonBorderType, setTaskbarTrayButtonBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarTrayButtonBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarTrayButtonBorderType\", taskbarTrayButtonBorderType);\r\n    }, [taskbarTrayButtonBorderType]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Tray Group</legend>\r\n                <div>\r\n                    <label>Background:</label>\r\n                    <ColorPicker\r\n                        color={taskbarTrayBkgr}\r\n                        setColor={setTaskbarTrayBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Magin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayMargin}\r\n                            onChange={(e) => setTaskbarTrayMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayPadding}\r\n                            onChange={(e) => setTaskbarTrayPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayBorderWidth}\r\n                            onChange={(e) => setTaskbarTrayBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarTrayBorderRadius}\r\n                            onChange={(e) => setTaskbarTrayBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayBorderColor}\r\n                            setColor={setTaskbarTrayBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarTrayBorderType}\r\n                            onChange={(e) => setTaskbarTrayBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Button</legend>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Magin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayButtonMargin}\r\n                            onChange={(e) => setTaskbarTrayButtonMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayButtonPadding}\r\n                            onChange={(e) => setTaskbarTrayButtonPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Background Color:</legend>\r\n                    <div>\r\n                        <label>Passive:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonBkgr}\r\n                            setColor={setTaskbarTrayButtonBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Hover:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonBkgrHover}\r\n                            setColor={setTaskbarTrayButtonBkgrHover}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Active:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonBkgrActive}\r\n                            setColor={setTaskbarTrayButtonBkgrActive}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Font Color</legend>\r\n                    <div>\r\n                        <label>Passive:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonColor}\r\n                            setColor={setTaskbarTrayButtonColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Hover:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonColorHover}\r\n                            setColor={setTaskbarTrayButtonColorHover}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Active:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonColorActive}\r\n                            setColor={setTaskbarTrayButtonColorActive}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarTrayButtonBorderWidth}\r\n                            onChange={(e) => setTaskbarTrayButtonBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarTrayButtonBorderRadius}\r\n                            onChange={(e) => setTaskbarTrayButtonBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarTrayButtonBorderColor}\r\n                            setColor={setTaskbarTrayButtonBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarTrayButtonBorderType}\r\n                            onChange={(e) => setTaskbarTrayButtonBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nimport { WiCloudy } from \"react-icons/wi\";\r\nimport { TbDeviceMobile } from \"react-icons/tb\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const TrayCollapsedPreview = () => {\r\n    return (<>\r\n        <mobile-tray-fullscreen\r\n            style={{ top: \"calc(-100% + var(--MobileTrayHeight) + var(--TaskbarHeight))\" }}\r\n        ></mobile-tray-fullscreen>\r\n        <mobile-tray style={{ width: \"100%\" }}>\r\n            <button style={{ flexDirection: \"row\" }}>\r\n                <WiCloudy /> 20°C\r\n            </button>\r\n            <button>\r\n                <TbDeviceMobile />\r\n            </button>\r\n            <button>\r\n                11:59\r\n                <br />\r\n                31/12/2000\r\n            </button>\r\n        </mobile-tray>\r\n    </>\r\n    );\r\n}\r\n\r\nexport const TrayCollapsed = () => {\r\n\r\n    var root = document.querySelector(\":root\");\r\n\r\n    const [height, setHeight] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayHeight\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayHeight\", height + \"px\");\r\n    });\r\n    //----------------------------------------------------------------------------//\r\n    const [horizontalPadding, setHorizontalPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayHorizontalPadding\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayHorizontalPadding\", horizontalPadding + \"px\");\r\n    });\r\n    //----------------------------------------------------------------------------//\r\n    const [verticalPadding, setVerticalPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayVerticalPadding\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayVerticalPadding\", verticalPadding + \"px\");\r\n    });\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayHorizontalBorderRadius\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayHorizontalBorderRadius\", borderRadius + \"px\");\r\n    });\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayHorizontalBorderColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayHorizontalBorderColor\", borderColor);\r\n    });\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayHorizontalBorderWidth\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayHorizontalBorderWidth\", borderWidth + \"px\");\r\n    });\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayHorizontalBorderType\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayHorizontalBorderType\", borderType);\r\n    });\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayColor\", fontColor);\r\n    });\r\n    //----------------------------------------------------------------------------//\r\n    const [fontSize, setFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFontSize\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFontSize\", fontSize + \"px\");\r\n    });\r\n    //----------------------------------------------------------------------------//\r\n    const [iconSize, setIconSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayIconSize\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayIconSize\", iconSize + \"px\");\r\n    });\r\n\r\n    return (<>\r\n        <fieldset>\r\n            <legend>Bar</legend>\r\n            <div>\r\n                <label>Height</label>\r\n                <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={height}\r\n                    onChange={(e) => setHeight(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={height}\r\n                    onChange={(e) => setHeight(e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Horizontal Padding</label>\r\n                <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={horizontalPadding}\r\n                    onChange={(e) => setHorizontalPadding(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={horizontalPadding}\r\n                    onChange={(e) => setHorizontalPadding(e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Vertical Padding</label>\r\n                <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={verticalPadding}\r\n                    onChange={(e) => setVerticalPadding(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={verticalPadding}\r\n                    onChange={(e) => setVerticalPadding(e.target.value)}\r\n                />\r\n            </div>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Color</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Type</label>\r\n                    <select\r\n                        value={borderType}\r\n                        onChange={(e) => setBorderType(e.target.value)}\r\n                    >\r\n                        <option value=\"none\">None</option>\r\n                        <option value=\"solid\">Solid</option>\r\n                        <option value=\"dotted\">Dotted</option>\r\n                        <option value=\"dashed\">Dashed</option>\r\n                        <option value=\"double\">Double</option>\r\n                        <option value=\"groove\">Groove</option>\r\n                        <option value=\"ridge\">Ridge</option>\r\n                        <option value=\"inset\">Inset</option>\r\n                        <option value=\"outset\">Outset</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n        </fieldset>\r\n        <fieldset>\r\n            <legend>Info</legend>\r\n            <div>\r\n                <label>Font Size</label>\r\n                <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={fontSize}\r\n                    onChange={(e) => setFontSize(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={fontSize}\r\n                    onChange={(e) => setFontSize(e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Color</label>\r\n                <ColorPicker\r\n                    color={fontColor}\r\n                    setColor={setFontColor}\r\n                    useAlpha={false}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Icon Size</label>\r\n                <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={iconSize}\r\n                    onChange={(e) => setIconSize(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"1\"\r\n                    value={iconSize}\r\n                    onChange={(e) => setIconSize(e.target.value)}\r\n                />\r\n            </div>\r\n        </fieldset>\r\n    </>);\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport { FaGear } from \"react-icons/fa6\";\r\nimport { MdOutlineRestartAlt } from \"react-icons/md\";\r\nimport { RiShutDownLine } from \"react-icons/ri\";\r\nimport { WiUmbrella } from \"react-icons/wi\";\r\nimport { TbDeviceMobile } from \"react-icons/tb\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const TrayExpandedPreview = () => {\r\n    return (<>\r\n        <mobile-tray-fullscreen\r\n            style={{ top: \"calc(-1*var(--MobileTrayHeight))\", height: \"calc(100% + var(--TaskbarHeight) + var(--MobileTrayHeight))\" }}\r\n        >\r\n            <mobile-tray-system>\r\n                <button>\r\n                    <WiUmbrella />\r\n                </button>\r\n                <button>\r\n                    <TbDeviceMobile />\r\n                </button>\r\n                <button>\r\n                    <FaGear />\r\n                </button>\r\n                <button>\r\n                    <MdOutlineRestartAlt />\r\n                </button>\r\n                <button>\r\n                    <RiShutDownLine />\r\n                </button>\r\n            </mobile-tray-system>\r\n            <mobile-tray-fullscreen-clock>\r\n                <button>\r\n                    11:59\r\n                    <br />\r\n                    31/12/2000\r\n                </button>\r\n            </mobile-tray-fullscreen-clock>\r\n            <div>\r\n            </div>\r\n        </mobile-tray-fullscreen>\r\n    </>\r\n    );\r\n}\r\n\r\nexport const TrayExpanded = () => {\r\n    const theme = useContext(ThemeContext);\r\n    var root = document.querySelector(\":root\");\r\n\r\n    const [background, setBackground] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullBkgr\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullBkgr\", background);\r\n    }, [background]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemColor, setSystemColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullColor\", systemColor);\r\n    }, [systemColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemButtonSize, setSystemButtonSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullSystemButtonSize\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullSystemButtonSize\", systemButtonSize + \"px\");\r\n    }, [systemButtonSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemButtonBackground, setSystemButtonBackground] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullButtonBkgr\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullButtonBkgr\", systemButtonBackground);\r\n    }, [systemButtonBackground]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemButtonMargin, setSystemButtonMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullButtonMargin\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullButtonMargin\", systemButtonMargin + \"px\");\r\n    }, [systemButtonMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemButtonPadding, setSystemButtonPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullButtonPadding\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullButtonPadding\", systemButtonPadding + \"px\");\r\n    }, [systemButtonPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemButtonBorderRadius, setSystemButtonBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullButtonBorderRadius\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullButtonBorderRadius\", systemButtonBorderRadius + \"px\");\r\n    }, [systemButtonBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemButtonBorderColor, setSystemButtonBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullButtonBorderColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullButtonBorderColor\", systemButtonBorderColor);\r\n    }, [systemButtonBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemButtonBorderWidth, setSystemButtonBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullButtonBorderWidth\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullButtonBorderWidth\", systemButtonBorderWidth + \"px\");\r\n    }, [systemButtonBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemButtonBorderType, setSystemButtonBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullButtonBorderType\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullButtonBorderType\", systemButtonBorderType);\r\n    }, [systemButtonBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemButtonIconSize, setSystemButtonIconSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullSystemButtonIconSize\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullSystemButtonIconSize\", systemButtonIconSize + \"px\");\r\n    }, [systemButtonIconSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemClockFontSize, setSystemClockFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullClockFontSize\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullClockFontSize\", systemClockFontSize + \"px\");\r\n    }, [systemClockFontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemClockPadding, setSystemClockPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullClockPadding\").slice(0, -2));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullClockPadding\", systemClockPadding + \"px\");\r\n    }, [systemClockPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [systemClockColor, setSystemClockColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--MobileTrayFullClockColor\"));\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--MobileTrayFullClockColor\", systemClockColor);\r\n    }, [systemClockColor]);\r\n\r\n    return (<>\r\n        <fieldset>\r\n            <legend>Colors</legend>\r\n            <div>\r\n                <label>Background</label>\r\n                <ColorPicker color={background} setColor={setBackground} useAlpha={true} />\r\n            </div>\r\n            <div>\r\n                <label>Background FX</label>\r\n                <select value={theme.mobileTrayBackgroundFX} onChange={(e) => theme.setMobileTrayBackgroundFX(e.target.value)}>\r\n                    {theme.backgroundFXList.map((backgroundFX) =>\r\n                        <option key={backgroundFX} value={backgroundFX}>{backgroundFX}</option>\r\n                    )}\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label>Font & Icon Color</label>\r\n                <ColorPicker color={systemColor} setColor={setSystemColor} useAlpha={false} />\r\n            </div>\r\n        </fieldset>\r\n        <fieldset>\r\n            <legend>System Buttons</legend>\r\n            <div>\r\n                <label>Size</label>\r\n                <input type=\"range\" min=\"20\" max=\"100\" value={systemButtonSize} onChange={(e) => setSystemButtonSize(e.target.value)} />\r\n                <input type=\"number\" min=\"20\" max=\"100\" value={systemButtonSize} onChange={(e) => setSystemButtonSize(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Margin</label>\r\n                <input type=\"range\" min=\"0\" max=\"20\" value={systemButtonMargin} onChange={(e) => setSystemButtonMargin(e.target.value)} />\r\n                <input type=\"number\" min=\"0\" max=\"20\" value={systemButtonMargin} onChange={(e) => setSystemButtonMargin(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Padding</label>\r\n                <input type=\"range\" min=\"0\" max=\"20\" value={systemButtonPadding} onChange={(e) => setSystemButtonPadding(e.target.value)} />\r\n                <input type=\"number\" min=\"0\" max=\"20\" value={systemButtonPadding} onChange={(e) => setSystemButtonPadding(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Background</label>\r\n                <ColorPicker color={systemButtonBackground} setColor={setSystemButtonBackground} useAlpha={true} />\r\n            </div>\r\n            <div>\r\n                <label>Icon Size</label>\r\n                <input type=\"range\" min=\"10\" max=\"40\" value={systemButtonIconSize} onChange={(e) => setSystemButtonIconSize(e.target.value)} />\r\n                <input type=\"number\" min=\"10\" max=\"40\" value={systemButtonIconSize} onChange={(e) => setSystemButtonIconSize(e.target.value)} />\r\n            </div>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Width</label>\r\n                    <input type=\"range\" min=\"0\" max=\"10\" value={systemButtonBorderWidth} onChange={(e) => setSystemButtonBorderWidth(e.target.value)} />\r\n                    <input type=\"number\" min=\"0\" max=\"10\" value={systemButtonBorderWidth} onChange={(e) => setSystemButtonBorderWidth(e.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <label>Type</label>\r\n                    <select value={systemButtonBorderType} onChange={(e) => setSystemButtonBorderType(e.target.value)} >\r\n                        <option value=\"none\">None</option>\r\n                        <option value=\"solid\">Solid</option>\r\n                        <option value=\"dashed\">Dashed</option>\r\n                        <option value=\"dotted\">Dotted</option>\r\n                        <option value=\"double\">Double</option>\r\n                        <option value=\"groove\">Groove</option>\r\n                        <option value=\"ridge\">Ridge</option>\r\n                        <option value=\"inset\">Inset</option>\r\n                        <option value=\"outset\">Outset</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Color</label>\r\n                    <ColorPicker color={systemButtonBorderColor} setColor={setSystemButtonBorderColor} useAlpha={true} />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius</label>\r\n                    <input type=\"range\" min=\"0\" max=\"20\" value={systemButtonBorderRadius} onChange={(e) => setSystemButtonBorderRadius(e.target.value)} />\r\n                    <input type=\"number\" min=\"0\" max=\"20\" value={systemButtonBorderRadius} onChange={(e) => setSystemButtonBorderRadius(e.target.value)} />\r\n                </div>\r\n            </fieldset>\r\n        </fieldset>\r\n        <fieldset>\r\n            <legend>System Clock</legend>\r\n            <div>\r\n                <label>Size</label>\r\n                <input type=\"range\" min=\"10\" max=\"50\" value={systemClockFontSize} onChange={(e) => setSystemClockFontSize(e.target.value)} />\r\n                <input type=\"number\" min=\"10\" max=\"50\" value={systemClockFontSize} onChange={(e) => setSystemClockFontSize(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Padding</label>\r\n                <input type=\"range\" min=\"0\" max=\"20\" value={systemClockPadding} onChange={(e) => setSystemClockPadding(e.target.value)} />\r\n                <input type=\"number\" min=\"0\" max=\"20\" value={systemClockPadding} onChange={(e) => setSystemClockPadding(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label>Color</label>\r\n                <ColorPicker color={systemClockColor} setColor={setSystemClockColor} useAlpha={false} />\r\n            </div>\r\n        </fieldset>\r\n    </>);\r\n}","import { useState, useEffect, useContext } from \"react\";\r\nimport { ThemeContext } from \"../../../../System/ThemeManager/context.jsx\";\r\n\r\nimport ColorPicker from \"../../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nimport { FaCog, FaArrowLeft, FaArrowRight } from \"react-icons/fa\";\r\n\r\nexport const TrayWindowPreview = () => {\r\n\r\n    return (\r\n        <>\r\n            <taskbar-window style={{ bottom: 0 }}>\r\n                <taskbar-window-header style={{ height: \"50px\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                    Header Content\r\n                </taskbar-window-header>\r\n                <taskbar-window-nav>\r\n                    <button><FaCog /></button>\r\n                    <button><FaArrowLeft /></button>\r\n                    <button><FaArrowRight /></button>\r\n                    Nav Bar Content\r\n                </taskbar-window-nav>\r\n                <taskbar-window-body style={{ height: \"100px\", width: \"200px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                    Body Content\r\n                </taskbar-window-body>\r\n                <taskbar-window-footer>\r\n                    Footer Content\r\n                </taskbar-window-footer>\r\n            </taskbar-window>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const TrayWindow = () => {\r\n\r\n    var root = document.querySelector(\":root\");\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [taskbarWindowBkgr, setTaskbarWindowBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBkgr\", taskbarWindowBkgr);\r\n    }, [taskbarWindowBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowPadding, setTaskbarWindowPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowPadding\", taskbarWindowPadding + \"px\");\r\n    }, [taskbarWindowPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBorderColor, setTaskbarWindowBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBorderColor\", taskbarWindowBorderColor);\r\n    }, [taskbarWindowBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBorderRadius, setTaskbarWindowBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBorderRadius\", taskbarWindowBorderRadius + \"px\");\r\n    }, [taskbarWindowBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBorderWidth, setTaskbarWindowBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBorderWidth\", taskbarWindowBorderWidth + \"px\");\r\n    }, [taskbarWindowBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBorderType, setTaskbarWindowBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBorderType\", taskbarWindowBorderType);\r\n    }, [taskbarWindowBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowXOffset, setTaskbarWindowShadowXOffset] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowXOffset\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowXOffset\", taskbarWindowShadowXOffset + \"px\");\r\n    }, [taskbarWindowShadowXOffset]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowYOffset, setTaskbarWindowShadowYOffset] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowYOffset\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowYOffset\", taskbarWindowShadowYOffset + \"px\");\r\n    }, [taskbarWindowShadowYOffset]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowBlur, setTaskbarWindowShadowBlur] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowBlur\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowBlur\", taskbarWindowShadowBlur + \"px\");\r\n    }, [taskbarWindowShadowBlur]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowSpread, setTaskbarWindowShadowSpread] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowSpread\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowSpread\", taskbarWindowShadowSpread + \"px\");\r\n    }, [taskbarWindowShadowSpread]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowShadowColor, setTaskbarWindowShadowColor] = useState(\r\n      getComputedStyle(root).getPropertyValue(\"--TaskbarWindowShadowColor\"),\r\n    );\r\n    useEffect(() => {\r\n      root.style.setProperty(\"--TaskbarWindowShadowColor\", taskbarWindowShadowColor);\r\n    }, [taskbarWindowShadowColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBkgr, setTaskbarWindowHeaderBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBkgr\", taskbarWindowHeaderBkgr);\r\n    }, [taskbarWindowHeaderBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderColor, setTaskbarWindowHeaderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderColor\", taskbarWindowHeaderColor);\r\n    }, [taskbarWindowHeaderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderMargin, setTaskbarWindowHeaderMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderMargin\", taskbarWindowHeaderMargin + \"px\");\r\n    }, [taskbarWindowHeaderMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderPadding, setTaskbarWindowHeaderPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderPadding\", taskbarWindowHeaderPadding + \"px\");\r\n    }, [taskbarWindowHeaderPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBorderColor, setTaskbarWindowHeaderBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBorderColor\", taskbarWindowHeaderBorderColor);\r\n    }, [taskbarWindowHeaderBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBorderRadius, setTaskbarWindowHeaderBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBorderRadius\", taskbarWindowHeaderBorderRadius + \"px\");\r\n    }, [taskbarWindowHeaderBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBorderWidth, setTaskbarWindowHeaderBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBorderWidth\", taskbarWindowHeaderBorderWidth + \"px\");\r\n    }, [taskbarWindowHeaderBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowHeaderBorderType, setTaskbarWindowHeaderBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowHeaderBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowHeaderBorderType\", taskbarWindowHeaderBorderType);\r\n    }, [taskbarWindowHeaderBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBkgr, setTaskbarWindowNavBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBkgr\", taskbarWindowNavBkgr);\r\n    }, [taskbarWindowNavBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavColor, setTaskbarWindowNavColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavColor\", taskbarWindowNavColor);\r\n    }, [taskbarWindowNavColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavMargin, setTaskbarWindowNavMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavMargin\", taskbarWindowNavMargin + \"px\");\r\n    }, [taskbarWindowNavMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavPadding, setTaskbarWindowNavPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavPadding\", taskbarWindowNavPadding + \"px\");\r\n    }, [taskbarWindowNavPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBorderColor, setTaskbarWindowNavBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBorderColor\", taskbarWindowNavBorderColor);\r\n    }, [taskbarWindowNavBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBorderRadius, setTaskbarWindowNavBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBorderRadius\", taskbarWindowNavBorderRadius + \"px\");\r\n    }, [taskbarWindowNavBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBorderWidth, setTaskbarWindowNavBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBorderWidth\", taskbarWindowNavBorderWidth + \"px\");\r\n    }, [taskbarWindowNavBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowNavBorderType, setTaskbarWindowNavBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowNavBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowNavBorderType\", taskbarWindowNavBorderType);\r\n    }, [taskbarWindowNavBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBkgr, setTaskbarWindowBodyBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBkgr\", taskbarWindowBodyBkgr);\r\n    }, [taskbarWindowBodyBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyColor, setTaskbarWindowBodyColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyColor\", taskbarWindowBodyColor);\r\n    }, [taskbarWindowBodyColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyMargin, setTaskbarWindowBodyMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyMargin\", taskbarWindowBodyMargin + \"px\");\r\n    }, [taskbarWindowBodyMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyPadding, setTaskbarWindowBodyPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyPadding\", taskbarWindowBodyPadding + \"px\");\r\n    }, [taskbarWindowBodyPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBorderColor, setTaskbarWindowBodyBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBorderColor\", taskbarWindowBodyBorderColor);\r\n    }, [taskbarWindowBodyBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBorderRadius, setTaskbarWindowBodyBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBorderRadius\", taskbarWindowBodyBorderRadius + \"px\");\r\n    }, [taskbarWindowBodyBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBorderWidth, setTaskbarWindowBodyBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBorderWidth\", taskbarWindowBodyBorderWidth + \"px\");\r\n    }, [taskbarWindowBodyBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowBodyBorderType, setTaskbarWindowBodyBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowBodyBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowBodyBorderType\", taskbarWindowBodyBorderType);\r\n    }, [taskbarWindowBodyBorderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBkgr, setTaskbarWindowFooterBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBkgr\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBkgr\", taskbarWindowFooterBkgr);\r\n    }, [taskbarWindowFooterBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterColor, setTaskbarWindowFooterColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterColor\", taskbarWindowFooterColor);\r\n    }, [taskbarWindowFooterColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterMargin, setTaskbarWindowFooterMargin] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterMargin\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterMargin\", taskbarWindowFooterMargin + \"px\");\r\n    }, [taskbarWindowFooterMargin]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterPadding, setTaskbarWindowFooterPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterPadding\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterPadding\", taskbarWindowFooterPadding + \"px\");\r\n    }, [taskbarWindowFooterPadding]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBorderColor, setTaskbarWindowFooterBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBorderColor\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBorderColor\", taskbarWindowFooterBorderColor);\r\n    }, [taskbarWindowFooterBorderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBorderRadius, setTaskbarWindowFooterBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBorderRadius\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBorderRadius\", taskbarWindowFooterBorderRadius + \"px\");\r\n    }, [taskbarWindowFooterBorderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBorderWidth, setTaskbarWindowFooterBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBorderWidth\").slice(0, -2)\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBorderWidth\", taskbarWindowFooterBorderWidth + \"px\");\r\n    }, [taskbarWindowFooterBorderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [taskbarWindowFooterBorderType, setTaskbarWindowFooterBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--TaskbarWindowFooterBorderType\")\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--TaskbarWindowFooterBorderType\", taskbarWindowFooterBorderType);\r\n    }, [taskbarWindowFooterBorderType]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Tray Window</legend>\r\n                <fieldset>\r\n                    <legend>Background</legend>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBkgr}\r\n                            setColor={setTaskbarWindowBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>FX:</label>\r\n                        <select\r\n                            value={theme.taskbarWindowBackgroundFX}\r\n                            onChange={(e) => theme.setTaskbarWindowBackgroundFX(e.target.value)}\r\n                        >{\r\n                                theme.backgroundFXList.map((fx) => (\r\n                                    <option key={fx} value={fx}>{fx}</option>\r\n                                ))}\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowPadding}\r\n                            onChange={(e) => setTaskbarWindowPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBorderColor}\r\n                            setColor={setTaskbarWindowBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowBorderType}\r\n                            onChange={(e) => setTaskbarWindowBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n        <fieldset>\r\n          <legend>Shadow</legend>\r\n          <div>\r\n            <label>Y-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={taskbarWindowShadowYOffset}\r\n              onChange={(e) => setTaskbarWindowShadowYOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>X-Offset</label>\r\n            <input\r\n              type=\"number\"\r\n              min={-50}\r\n              max={50}\r\n              step=\"1\"\r\n              value={taskbarWindowShadowXOffset}\r\n              onChange={(e) => setTaskbarWindowShadowXOffset(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Spread</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={taskbarWindowShadowSpread}\r\n              onChange={(e) => setTaskbarWindowShadowSpread(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Blur</label>\r\n            <input\r\n              type=\"number\"\r\n              min={0}\r\n              max={50}\r\n              step=\"1\"\r\n              value={taskbarWindowShadowBlur}\r\n              onChange={(e) => setTaskbarWindowShadowBlur(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Color</label>\r\n            <ColorPicker\r\n              color={taskbarWindowShadowColor}\r\n              setColor={setTaskbarWindowShadowColor}\r\n              useAlpha={true}\r\n            />\r\n          </div>\r\n        </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Header</legend>\r\n                <fieldset>\r\n                    <legend>Color</legend>\r\n                    <div>\r\n                        <label>Background:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowHeaderBkgr}\r\n                            setColor={setTaskbarWindowHeaderBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowHeaderColor}\r\n                            setColor={setTaskbarWindowHeaderColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Margin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowHeaderMargin}\r\n                            onChange={(e) => setTaskbarWindowHeaderMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowHeaderPadding}\r\n                            onChange={(e) => setTaskbarWindowHeaderPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowHeaderBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowHeaderBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowHeaderBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowHeaderBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowHeaderBorderColor}\r\n                            setColor={setTaskbarWindowHeaderBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowHeaderBorderType}\r\n                            onChange={(e) => setTaskbarWindowHeaderBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Nav Bar</legend>\r\n                <fieldset>\r\n                    <legend>Color</legend>\r\n                    <div>\r\n                        <label>Background:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowNavBkgr}\r\n                            setColor={setTaskbarWindowNavBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowNavColor}\r\n                            setColor={setTaskbarWindowNavColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Margin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowNavMargin}\r\n                            onChange={(e) => setTaskbarWindowNavMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowNavPadding}\r\n                            onChange={(e) => setTaskbarWindowNavPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowNavBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowNavBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowNavBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowNavBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowNavBorderColor}\r\n                            setColor={setTaskbarWindowNavBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowNavBorderType}\r\n                            onChange={(e) => setTaskbarWindowNavBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Body</legend>\r\n                <fieldset>\r\n                    <legend>Color</legend>\r\n                    <div>\r\n                        <label>Background:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBodyBkgr}\r\n                            setColor={setTaskbarWindowBodyBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBodyColor}\r\n                            setColor={setTaskbarWindowBodyColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Margin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBodyMargin}\r\n                            onChange={(e) => setTaskbarWindowBodyMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBodyPadding}\r\n                            onChange={(e) => setTaskbarWindowBodyPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBodyBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowBodyBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowBodyBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowBodyBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowBodyBorderColor}\r\n                            setColor={setTaskbarWindowBodyBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowBodyBorderType}\r\n                            onChange={(e) => setTaskbarWindowBodyBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Footer</legend>\r\n                <fieldset>\r\n                    <legend>Color</legend>\r\n                    <div>\r\n                        <label>Background:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowFooterBkgr}\r\n                            setColor={setTaskbarWindowFooterBkgr}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowFooterColor}\r\n                            setColor={setTaskbarWindowFooterColor}\r\n                            useAlpha={false}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Dimentions</legend>\r\n                    <div>\r\n                        <label>Margin:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowFooterMargin}\r\n                            onChange={(e) => setTaskbarWindowFooterMargin(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Padding:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowFooterPadding}\r\n                            onChange={(e) => setTaskbarWindowFooterPadding(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Border</legend>\r\n                    <div>\r\n                        <label>Width:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={5}\r\n                            step=\"1\"\r\n                            value={taskbarWindowFooterBorderWidth}\r\n                            onChange={(e) => setTaskbarWindowFooterBorderWidth(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Radius:</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            min={0}\r\n                            max={15}\r\n                            step=\"1\"\r\n                            value={taskbarWindowFooterBorderRadius}\r\n                            onChange={(e) => setTaskbarWindowFooterBorderRadius(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Color:</label>\r\n                        <ColorPicker\r\n                            color={taskbarWindowFooterBorderColor}\r\n                            setColor={setTaskbarWindowFooterBorderColor}\r\n                            useAlpha={true}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Type:</label>\r\n                        <select\r\n                            value={taskbarWindowFooterBorderType}\r\n                            onChange={(e) => setTaskbarWindowFooterBorderType(e.target.value)}\r\n                        >\r\n                            <option value=\"solid\">solid</option>\r\n                            <option value=\"double\">double</option>\r\n                            <option value=\"dashed\">dashed</option>\r\n                            <option value=\"dotted\">dotted</option>\r\n                            <option value=\"groove\">groove</option>\r\n                            <option value=\"ridge\">ridge</option>\r\n                            <option value=\"inset\">inset</option>\r\n                            <option value=\"outset\">outset</option>\r\n                        </select>\r\n                    </div>\r\n                </fieldset>\r\n            </fieldset>\r\n        </>\r\n    );\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nimport ColorPicker from \"../../../System/GlobalComponents/ColorPicker/ColorPicker.jsx\";\r\n\r\nexport const ContextMenuPreview = () => {\r\n    const [checkbox1, setCheckbox1] = useState(false);\r\n    const [checkbox2, setCheckbox2] = useState(false);\r\n    const [radio, setRadio] = useState(\"1\");\r\n    return (\r\n        <>\r\n            <context-menu style={{ left: 5, top: 5 }}>\r\n                <button>\r\n                    <div>Button</div>\r\n                    <span />\r\n                </button>\r\n                <button>\r\n                    <div>Button with Keybind</div>\r\n                    <span />\r\n                    <kbd>key1 + key2</kbd>\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setCheckbox1(!checkbox1)}>\r\n                    <div>Checkbox 1</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox1} readOnly />\r\n                </button>\r\n                <button onClick={() => setCheckbox2(!checkbox2)}>\r\n                    <div>Checkbox 2</div>\r\n                    <span />\r\n                    <input type=\"checkbox\" checked={checkbox2} readOnly />\r\n                </button>\r\n                <hr />\r\n                <button onClick={() => setRadio(\"1\")}>\r\n                    <div>Radio 1</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"1\"} readOnly />\r\n                </button>\r\n                <button onClick={() => setRadio(\"2\")}>\r\n                    <div>Radio 2</div>\r\n                    <span />\r\n                    <input type=\"radio\" name=\"radio\" checked={radio === \"2\"} readOnly />\r\n                </button>\r\n            </context-menu>\r\n        </>\r\n    );\r\n};\r\nexport const ContextMenu = () => {\r\n    var root = document.querySelector(\":root\");\r\n\r\n    const [fontSize, setFontSize] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontSize\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuFontSize\", fontSize + \"px\");\r\n    }, [fontSize]);\r\n    //----------------------------------------------------------------------------//\r\n    const [fontColor, setFontColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuFontColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuFontColor\", fontColor);\r\n    }, [fontColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [bkgColor, setBkgColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBkgr\", bkgColor);\r\n    }, [bkgColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderColor, setBorderColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderColor\", borderColor);\r\n    }, [borderColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderWidth, setBorderWidth] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderWidth\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderWidth\", borderWidth + \"px\");\r\n    }, [borderWidth]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderRadius, setBorderRadius] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderRadius\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderRadius\", borderRadius + \"px\");\r\n    }, [borderRadius]);\r\n    //----------------------------------------------------------------------------//\r\n    const [borderType, setBorderType] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuBorderType\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuBorderType\", borderType);\r\n    }, [borderType]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverColor, setHoverColor] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuButtonHoverColor\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuButtonHoverColor\", hoverColor);\r\n    }, [hoverColor]);\r\n    //----------------------------------------------------------------------------//\r\n    const [hoverBkgr, setHoverBkgr] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuButtonHoverBkgr\"),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuButtonHoverBkgr\", hoverBkgr);\r\n    }, [hoverBkgr]);\r\n    //----------------------------------------------------------------------------//\r\n    const [padding, setPadding] = useState(\r\n        getComputedStyle(root).getPropertyValue(\"--ContextMenuPadding\").slice(0, -2),\r\n    );\r\n    useEffect(() => {\r\n        root.style.setProperty(\"--ContextMenuPadding\", padding + \"px\");\r\n    }, [padding]);\r\n\r\n    return (\r\n        <>\r\n            <fieldset>\r\n                <legend>Font</legend>\r\n                <div>\r\n                    <label>Font Color:</label>\r\n                    <ColorPicker\r\n                        color={fontColor}\r\n                        setColor={setFontColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Font Size:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={11}\r\n                        max={30}\r\n                        step=\"1\"\r\n                        value={fontSize}\r\n                        onChange={(e) => setFontSize(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Background</legend>\r\n                <div>\r\n                    <label>Background Color:</label>\r\n                    <ColorPicker\r\n                        color={bkgColor}\r\n                        setColor={setBkgColor}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Border</legend>\r\n                <div>\r\n                    <label>Border Color:</label>\r\n                    <ColorPicker\r\n                        color={borderColor}\r\n                        setColor={setBorderColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Width:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={5}\r\n                        step=\"1\"\r\n                        value={borderWidth}\r\n                        onChange={(e) => setBorderWidth(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Radius:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={borderRadius}\r\n                        onChange={(e) => setBorderRadius(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Border Type:</label>\r\n                    <select value={borderType} onChange={(e) => setBorderType(e.target.value)}>\r\n                        <option value=\"solid\">solid</option>\r\n                        <option value=\"double\">double</option>\r\n                        <option value=\"dashed\">dashed</option>\r\n                        <option value=\"dotted\">dotted</option>\r\n                        <option value=\"groove\">groove</option>\r\n                        <option value=\"ridge\">ridge</option>\r\n                        <option value=\"inset\">inset</option>\r\n                        <option value=\"outset\">outset</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Padding:</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={20}\r\n                        step=\"1\"\r\n                        value={padding}\r\n                        onChange={(e) => setPadding(e.target.value)}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <legend>Hover</legend>\r\n                <div>\r\n                    <label>Hover Color:</label>\r\n                    <ColorPicker\r\n                        color={hoverColor}\r\n                        setColor={setHoverColor}\r\n                        useAlpha={false}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Hover Background Color:</label>\r\n                    <ColorPicker\r\n                        color={hoverBkgr}\r\n                        setColor={setHoverBkgr}\r\n                        useAlpha={true}\r\n                    />\r\n                </div>\r\n            </fieldset>\r\n        </>\r\n    );\r\n};\r\n","// Definitions allows for user personalization of the app aspect and style. See individual Fragments for reference.\r\n\r\nimport { useState, useEffect, useContext, Fragment } from \"react\";\r\nimport { Global } from \"./Pages/Global.jsx\";\r\nimport { DesktopPreview, Desktop } from \"./Pages/Desktop.jsx\";\r\nimport { WindowPreview, Window } from \"./Pages/Windows/Window.jsx\";\r\nimport { MenuPreview, Menu } from \"./Pages/Windows/Menu.jsx\";\r\nimport { AppPreview, App } from \"./Pages/Windows/App.jsx\";\r\nimport { DialogPreview, Dialog } from \"./Pages/Windows/Dialog.jsx\";\r\nimport { TaskBarPreview, TaskBar } from \"./Pages/Taskbar/TaskBar.jsx\";\r\nimport { MainButtonsPreview, MainButtons } from \"./Pages/Taskbar/MainButtons.jsx\";\r\nimport { StartMenuPreview, StartMenu } from \"./Pages/Taskbar/StartMenu.jsx\";\r\nimport { AppListPreview, AppList } from \"./Pages/Taskbar/AppList.jsx\";\r\nimport { LiveAppsPreview, LiveApps } from \"./Pages/Taskbar/LiveApps.jsx\";\r\nimport { TrayPreview, Tray } from \"./Pages/Taskbar/Tray.jsx\";\r\nimport { TrayCollapsedPreview, TrayCollapsed } from \"./Pages/Taskbar/TrayCollapsed.jsx\";\r\nimport { TrayExpandedPreview, TrayExpanded } from \"./Pages/Taskbar/TrayExpanded.jsx\";\r\nimport { TrayWindowPreview, TrayWindow } from \"./Pages/Taskbar/Window.jsx\";\r\nimport { ContextMenuPreview, ContextMenu } from \"./Pages/ContextMenu.jsx\";\r\nimport Scenario from \"../../System/Desktop/Scenario.jsx\";\r\nimport { BackgroundContext } from \"../../System/Desktop/BackgroundContext.js\";\r\nimport { DeviceContext } from \"../../System/DeviceManager/context.jsx\";\r\nimport \"./style.css\";\r\n\r\nexport default function Definitions() {\r\n  const [subMenu, setSubMenu] = useState(\"none\");\r\n  const [defPage, setDefPage] = useState(\"Global\");\r\n  const background = useContext(BackgroundContext);\r\n  const device = useContext(DeviceContext);\r\n  const [menuList, setMenuList] = useState([\r\n    \"Global\",\r\n    \"Desktop\",\r\n    [\"Taskbar\",[\"Taskbar\", \"Start\", \"Start Menu\", \"Live Apps\", \"Apps List\"]],\r\n    [\"Window\",[\"Window\", \"Menu\", \"App\", \"Dialog\"]],\r\n    [\"Tray\",[\"Tray\", \"Tray Window\", \"Tray Collapsed\", \"Tray Expanded\"]],\r\n    \"Context Menu\",\r\n  ]);\r\n\r\nuseEffect(()=>{\r\n  switch(device.deviceType){\r\n    case \"Desktop\":\r\n      setMenuList([\r\n        \"Global\",\r\n        \"Desktop\",\r\n        [\"Taskbar\",[\"Taskbar\", \"Main Buttons\", \"Start Menu\", \"Live Apps\"]],\r\n        [\"Window\",[\"Window\", \"Menu\", \"App\", \"Dialog\"]],\r\n        [\"Tray\",[\"Tray\", \"Tray Window\"]],\r\n        \"Context Menu\",\r\n    ])\r\n    break;\r\n    case \"Mobile\":\r\n      setMenuList([\r\n        \"Global\",\r\n        \"Desktop\",\r\n        [\"Taskbar\",[\"Taskbar\", \"Main Buttons\", \"Apps List\"]],\r\n        [\"Window\",[ \"App\", \"Menu\", \"Dialog\"]],\r\n        [\"Tray\",[\"Tray Collapsed\", \"Tray Expanded\", \"Tray Window\"]],\r\n        \"Context Menu\",\r\n    ])\r\n    break;\r\n  }\r\n},[device.deviceType])\r\n\r\n  return (\r\n    <settings-container>\r\n      <nav>\r\n        {menuList.map((menu, index) => {\r\n          if (typeof menu !== \"string\") {\r\n            return (\r\n              <Fragment key={index}>\r\n                <div\r\n                  className={subMenu === menu[0] ? \"defMenuButton defMenuButtonON\" : \"defMenuButton\"}\r\n                  onClick={() => {setDefPage(menu[1][0]);setSubMenu(menu[0])}}\r\n                >{menu[0]}\r\n                </div>\r\n                <div\r\n                  className={subMenu === menu[0] ? \"defSubMenu\" : \"defSubMenu defSubMenuHidden\"}\r\n                >\r\n                  {menu[1].map((submenu, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={defPage === submenu ? \"defMenuButton defMenuButtonON\" : \"defMenuButton\"}\r\n                      onClick={() => setDefPage(submenu)}\r\n                    >\r\n                      {submenu}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Fragment>\r\n            );\r\n          } else {\r\n            return (\r\n              <div\r\n                key={index}\r\n                className={defPage === menu ? \"defMenuButton defMenuButtonON\" : \"defMenuButton\"}\r\n                onClick={() => {setDefPage(menu); setSubMenu(\"none\")}}\r\n              >\r\n                {menu}\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n      </nav>\r\n      <form onSubmit={(e) => e.preventDefault()}>\r\n        <div className=\"defPreview\">\r\n          {background.state.active === \"scenario\" ? <Scenario /> : <></>}\r\n          {defPage === \"Desktop\" ? <DesktopPreview /> : <></>}\r\n          {defPage === \"Taskbar\" ? <TaskBarPreview /> : <></>}\r\n          {defPage === \"Main Buttons\" ? <MainButtonsPreview /> : <></>}\r\n          {defPage === \"Start Menu\" ? <StartMenuPreview /> : <></>}\r\n          {defPage === \"Apps List\" ? <AppListPreview /> : <></>}\r\n          {defPage === \"Live Apps\" ? <LiveAppsPreview /> : <></>}\r\n          {defPage === \"Tray\" ? <TrayPreview /> : <></>}\r\n          {defPage === \"Tray Window\" ? <TrayWindowPreview /> : <></>}\r\n          {defPage === \"Tray Collapsed\" ? <TrayCollapsedPreview /> : <></>}\r\n          {defPage === \"Tray Expanded\" ? <TrayExpandedPreview /> : <></>}\r\n          {defPage === \"Window\" ? <WindowPreview /> : <></>}\r\n          {defPage === \"Menu\" ? <MenuPreview /> : <></>}\r\n          {defPage === \"App\" ? <AppPreview /> : <></>}\r\n          {defPage === \"Dialog\" ? <DialogPreview /> : <></>}\r\n          {defPage === \"Context Menu\" ? <ContextMenuPreview /> : <></>}\r\n        </div>\r\n        {defPage === \"Global\" ? <Global /> : <></>}\r\n        {defPage === \"Desktop\" ? <Desktop /> : <></>}\r\n        {defPage === \"Taskbar\" ? <TaskBar /> : <></>}\r\n        {defPage === \"Main Buttons\" ? <MainButtons /> : <></>}\r\n        {defPage === \"Start Menu\" ? <StartMenu /> : <></>}\r\n        {defPage === \"Apps List\" ? <AppList /> : <></>}\r\n        {defPage === \"Live Apps\" ? <LiveApps /> : <></>}\r\n        {defPage === \"Tray\" ? <Tray /> : <></>}\r\n        {defPage === \"Tray Window\" ? <TrayWindow /> : <></>}\r\n        {defPage === \"Tray Collapsed\" ? <TrayCollapsed /> : <></>}\r\n        {defPage === \"Tray Expanded\" ? <TrayExpanded /> : <></>}\r\n        {defPage === \"Window\" ? <Window /> : <></>}\r\n        {defPage === \"App\" ? <App /> : <></>}\r\n        {defPage === \"Menu\" ? <Menu /> : <></>}\r\n        {defPage === \"Dialog\" ? <Dialog /> : <></>}\r\n        {defPage === \"Context Menu\" ? <ContextMenu /> : <></>}\r\n      </form>\r\n    </settings-container>\r\n  );\r\n};\r\n","import { Canvas } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\nimport { useRef, useMemo, useContext, Suspense } from \"react\";\r\nimport { BackgroundContext } from \"./BackgroundContext.js\";\r\nimport { OrbitControls, Plane, Stars, Sky } from \"@react-three/drei\";\r\nimport { extend, useFrame, useThree, useLoader } from \"@react-three/fiber\";\r\nimport { Water } from \"three-stdlib\";\r\nimport * as WaterNormals from \"./Textures/waternormals.jpeg\";\r\nimport * as HillsNormals from \"./Textures/DesertNormal.png\";\r\nimport * as SandTexture from \"./Textures/SandTexture1.jpg\";\r\n\r\nextend({ Water });\r\n\r\nexport default function Scenario() {\r\n  const background = useContext(BackgroundContext);\r\n  const Ocean = () => {\r\n    const ref = useRef();\r\n    const gl = useThree((state) => state.gl);\r\n    const waterNormals = useLoader(THREE.TextureLoader, WaterNormals.default);\r\n    waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping;\r\n    const geom = useMemo(() => new THREE.PlaneGeometry(1500, 1500), []);\r\n    const config = useMemo(\r\n      () => ({\r\n        textureWidth: 1036,\r\n        textureHeight: 1036,\r\n        waterNormals,\r\n        sunDirection: new THREE.Vector3(),\r\n        sunColor: 0xffffff,\r\n        waterColor: 0x001e0f,\r\n        distortionScale: 0.8,\r\n        fog: true,\r\n        format: gl.encoding,\r\n      }),\r\n      [waterNormals],\r\n    );\r\n    useFrame(\r\n      (state, delta) => (ref.current.material.uniforms.time.value += delta),\r\n    );\r\n    return <water ref={ref} args={[geom, config]} rotation-x={-Math.PI / 2} />;\r\n  };\r\n\r\n  const Desert = () => {\r\n    const ref = useRef();\r\n    const hillsNormals = useLoader(THREE.TextureLoader, HillsNormals.default);\r\n    hillsNormals.wrapS = hillsNormals.wrapT = THREE.ClampToEdgeWrapping;\r\n    const sandTexture = useLoader(THREE.TextureLoader, SandTexture.default);\r\n    sandTexture.wrapS = sandTexture.wrapT = THREE.RepeatWrapping;\r\n    sandTexture.repeat.set(100, 100);\r\n    return <Plane ref={ref} position={[0, -15, 0]} args={[1500, 1500, 150, 150]} rotation-x={-Math.PI / 2}>\r\n      <meshStandardMaterial\r\n        color=\"white\"\r\n        metalness={0.5}\r\n        roughness={0.8}\r\n        map={sandTexture}\r\n        normalMap={hillsNormals}\r\n        normalScale={new THREE.Vector2(0.8, 0.8)}\r\n        displacementMap={hillsNormals}\r\n        displacementScale={50} />\r\n    </Plane>;\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      style={{\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        zIndex: \"-1\",\r\n      }}\r\n      dpr={window.devicePixelRatio}\r\n      camera={{ position: [0, 25, 10], near: 2 }}\r\n    >\r\n      {background.state[\"scenario\"][\"fog\"].isActive &&\r\n        <fog\r\n          attach=\"fog\"\r\n          color={background.state[\"scenario\"][\"fog\"].color}\r\n          near={background.state[\"scenario\"][\"fog\"].near}\r\n          far={background.state[\"scenario\"][\"fog\"].far}\r\n        />}\r\n      <OrbitControls target={[0, 25, 0]} />\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"sun\"].isActive &&\r\n          <Sky\r\n            distance={450000}\r\n            inclination={background.state[\"scenario\"][\"sun\"].inclination}\r\n            azimuth={background.state[\"scenario\"][\"sun\"].azimuth}\r\n            rayleigh={background.state[\"scenario\"][\"sun\"].rayleight}\r\n            turbidity={background.state[\"scenario\"][\"sun\"].turbidity}\r\n            exposure={background.state[\"scenario\"][\"sun\"].exposure}\r\n          />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"stars\"].isActive &&\r\n          <Stars\r\n            radius={440}\r\n            count={background.state[\"scenario\"][\"stars\"].count}\r\n          />}\r\n      </Suspense>\r\n      {background.state[\"scenario\"][\"directionalLight\"].isActive &&\r\n        <pointLight\r\n          color={background.state[\"scenario\"][\"directionalLight\"].color}\r\n          intensity={background.state[\"scenario\"][\"directionalLight\"].intensity}\r\n          position={[0, 10000, -1500]}\r\n        />}\r\n      {background.state[\"scenario\"][\"ambientLight\"].isActive &&\r\n        <ambientLight\r\n          intensity={background.state[\"scenario\"][\"ambientLight\"].intensity}\r\n          color={background.state[\"scenario\"][\"ambientLight\"].color}\r\n        />}\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"ocean\"].isActive && <Ocean />}\r\n      </Suspense>\r\n      <Suspense fallback={null}>\r\n        {background.state[\"scenario\"][\"desert\"].isActive && <Desert />}\r\n      </Suspense>\r\n    </Canvas>\r\n  );\r\n};\r\n","export default function rgbToHsl(rgb) {\r\n    let r = rgb[0],\r\n        g = rgb[1],\r\n        b = rgb[2];\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let cmin = Math.min(r, g, b),\r\n        cmax = Math.max(r, g, b),\r\n        delta = cmax - cmin,\r\n        h = 0,\r\n        s = 0,\r\n        l = ((cmax + cmin) / 2);\r\n    if (delta === 0) {\r\n        s = 0;\r\n        h = 0;\r\n    }else {\r\n        if (l <= 0.5) {\r\n            s = delta / (cmax + cmin);\r\n        } else {\r\n            s = delta / (2 - cmax-cmin);\r\n        };\r\n        if (cmax === r) {\r\n            h = (g - b) / delta;\r\n        } else if (cmax === g) {\r\n            h = ((b - r) / delta) + 2;\r\n        } else if(cmax === b) {\r\n            h = ((r - g) / delta) + 4;\r\n        }\r\n    }\r\n    h = Math.round(h * 60);\r\n    if (h < 0) {\r\n        h += 360;\r\n    }\r\n    s = Math.abs(s * 100).toFixed(0);\r\n    l = (l * 100 ).toFixed(0);\r\n    let hsl = [h, s + '%', l + '%'];\r\n    return hsl;\r\n}","export default function rgbaToHsla(rgba) {\r\n    var r = rgba[0],\r\n        g = rgba[1],\r\n        b = rgba[2],\r\n        a = rgba[3];\r\n        var r = parseInt(rgba[1], 16);\r\n        var g = parseInt(rgba[2], 16);\r\n        var b = parseInt(rgba[3], 16);\r\n        var a = parseInt(rgba[4], 16);\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n        let cmin = Math.min(r, g, b),\r\n            cmax = Math.max(r, g, b),\r\n            delta = cmax - cmin,\r\n            h = 0,\r\n            s = 0,\r\n            l = ((cmax + cmin) / 2);\r\n        if (delta === 0) {\r\n            s = 0;\r\n            h = 0;\r\n        }else {\r\n            if (l <= 0.5) {\r\n                s = delta / (cmax + cmin);\r\n            } else {\r\n                s = delta / (2 - cmax-cmin);\r\n            };\r\n            if (cmax === r) {\r\n                h = (g - b) / delta;\r\n            } else if (cmax === g) {\r\n                h = ((b - r) / delta) + 2;\r\n            } else if(cmax === b) {\r\n                h = ((r - g) / delta) + 4;\r\n            }\r\n        }\r\n        h = Math.round(h * 60);\r\n        if (h < 0) {\r\n            h += 360;\r\n        }\r\n        s = Math.abs(s * 100).toFixed(0);\r\n        l = (l * 100 ).toFixed(0);\r\n        let hsla = [h, s + '%', l + '%', a];\r\n        return hsla;\r\n    }","/*\r\nCustom color picker to replace default color picker from input[type=\"color\"],\r\nallowing for the use of alpha channel. The color picker is open on click,\r\nand closes on blur. \r\nThe color preview is set on color change, and applied when confirmed, by use \r\nof the callback function setColor, which is passed as props.\r\nThe return value is always in hsl or hsla format.\r\nThe alpha channel is used only if the useAlpha prop is true.\r\n\r\nTODO: \r\nAdd support for gradients,\r\nAdd support for color values RGB, RGBA, hex, and hex with alpha\r\n*/\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport hexToRgb from \"./Converters/hexToRgb\";\r\nimport hexToRgba from \"./Converters/hexToRgba\";\r\nimport rgbToHsl from \"./Converters/rgbToHsl\";\r\nimport rgbaToHsla from \"./Converters/rgbaToHsla\";\r\nimport nameToHsl from \"./Converters/nameToHsl\";\r\nimport \"../styles.css\";\r\n\r\nexport default function ColorPicker({ color, setColor, useAlpha }) {\r\n    const colorPickerRef = useRef(null);\r\n    const hueLumRef = useRef(null);\r\n    const saturationRef = useRef(null);\r\n    const alphaRef = useRef(null);\r\n    const [colorSelectorPos, setColorSelectorPos] = useState({ x: 0, y: 0 });\r\n    const [saturationSliderPos, setSaturationSliderPos] = useState(0);\r\n    const [alphaSliderPos, setAlphaSliderPos] = useState(0);\r\n    const [open, setOpen] = useState(false);\r\n    const [hue, setHue] = useState(0);\r\n    const [lightness, setLightness] = useState(50);\r\n    const [saturation, setSaturation] = useState(100);\r\n    const [alpha, setAlpha] = useState(100);\r\n\r\n    // Focus color picker when open, allowing its closing on blur\r\n    useEffect(() => {\r\n        if (open) {\r\n            colorPickerRef.current.focus();\r\n        }\r\n    }, [open]);\r\n\r\n    // Closes color picker on blur\r\n    const handleBlur = (event) => {\r\n        if (!event.currentTarget.contains(event.relatedTarget)) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    // Set displayed color based on current hue, saturation, and lightness, and uptades slider positions\r\n    useEffect(() => {\r\n        if (color) {\r\n            if (useAlpha) {\r\n                let hslaColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslaColor = rgbaToHsla(hexToRgba(color));\r\n                } else if (color.slice(0, 4) === \"rgba\") {\r\n                    hslaColor = rgbaToHsla(color);\r\n                } else if (color.slice(0, 4) === \"hsla\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslaColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslaColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                }\r\n                setHue(Number(hslaColor[0]));\r\n                setSaturation(Number(hslaColor[1].slice(0, hslaColor[1].length - 1)));\r\n                setLightness(Number(hslaColor[2].slice(0, hslaColor[2].length - 1)));\r\n                setAlpha(Number(hslaColor[3]));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslaColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslaColor[2].slice(0, hslaColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslaColor[1].slice(0, hslaColor[1].length - 1)) / 100) * saturationRect.height);\r\n                    const alphaRect = alphaRef.current.getBoundingClientRect();\r\n                    setAlphaSliderPos(hslaColor[3] * alphaRect.width);\r\n                }\r\n            } else {\r\n                let hslColor = [];\r\n                if (color[0] === \"#\") {\r\n                    hslColor = rgbToHsl(hexToRgb(color));\r\n                } else if (color.slice(0, 3) === \"rgb\") {\r\n                    hslColor = rgbToHsl(color);\r\n                } else if (color.slice(0, 3) === \"hsl\") {\r\n                    for (let i = 0; i < color.length; i++) {\r\n                        var start;\r\n                        var end;\r\n                        if (color[i] === \"(\") {\r\n                            start = i + 1;\r\n                        } else if (color[i] === \")\") {\r\n                            end = i;\r\n                            hslColor.push(color.slice(start, end));\r\n                        } else if (color[i] === \",\") {\r\n                            hslColor.push(color.slice(start, i));\r\n                            start = i + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    hslColor = nameToHsl(color);\r\n                }\r\n                setHue(Number(hslColor[0]));\r\n                setSaturation(Number(hslColor[1].slice(0, hslColor[1].length - 1)));\r\n                setLightness(Number(hslColor[2].slice(0, hslColor[2].length - 1)));\r\n                if (open) {\r\n                    const hueLumRect = hueLumRef.current.getBoundingClientRect();\r\n                    setColorSelectorPos({\r\n                        x: hslColor[0] / 360 * hueLumRect.width,\r\n                        y: (100 - hslColor[2].slice(0, hslColor[2].length - 1)) / 100 * hueLumRect.height\r\n                    });\r\n                    const saturationRect = saturationRef.current.getBoundingClientRect();\r\n                    setSaturationSliderPos(((100 - hslColor[1].slice(0, hslColor[1].length - 1)) / 100) * saturationRect.height);\r\n                }\r\n            }\r\n        }\r\n    }, [open, color, useAlpha])\r\n\r\n    // Draw color map for hue on the x axis and lightness on the y axis, for the current saturation value\r\n    const drawColorMap = (ctx) => {\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        let blockwidth = ctx.canvas.width / 360;\r\n        let blockheight = ctx.canvas.height / 100;\r\n        for (let i = 0; i < 360; i++) {\r\n            for (let j = 0; j < 100; j++) {\r\n                ctx.fillStyle = `hsl(${i},${saturation}%,${100 - j}%)`;\r\n                ctx.fillRect(i * blockwidth, j * blockheight, (i + 1) * blockwidth, (j + 1) * blockheight);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates color map when saturation changes\r\n    useEffect(() => {\r\n        if (hueLumRef.current) {\r\n            const ctxColorPicker = hueLumRef.current.getContext(\"2d\", { alpha: false });\r\n            drawColorMap(ctxColorPicker);\r\n        }\r\n\r\n    }, [open, saturation]);\r\n\r\n    //Updates hue and luminance map slider positions when mouse moves, as well as their respective values\r\n    const handleHueLumMap = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = hueLumRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setColorSelectorPos({ x, y });\r\n                setHue(Math.floor(360 * x / rect.width));\r\n                setLightness(100 - Math.floor(100 * y / rect.height));\r\n            }\r\n        }\r\n    };\r\n    const touchHueLumMap = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = hueLumRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setColorSelectorPos({ x, y });\r\n                setHue(Math.floor(360 * x / rect.width));\r\n                setLightness(100 - Math.floor(100 * y / rect.height));\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates saturation slider position when mouse moves, as well as its value\r\n    const handleSaturationSlider = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = saturationRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setSaturation(100 - Math.floor(100 * y / rect.height));\r\n                setSaturationSliderPos(y);\r\n            }\r\n        }\r\n    };\r\n    const touchSaturationSlider = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = saturationRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setSaturation(100 - Math.floor(100 * y / rect.height));\r\n                setSaturationSliderPos(y);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Updates alpha slider position when mouse moves, as well as its value\r\n    const handleAlphaSlider = (event) => {\r\n        if (event.buttons !== 0) {\r\n            const rect = alphaRef.current.getBoundingClientRect();\r\n            let x = event.clientX - rect.left;\r\n            let y = event.clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setAlpha((Math.floor(100 * x / rect.width)) / 100);\r\n                setAlphaSliderPos(x);\r\n            }\r\n        }\r\n    };\r\n    const touchAlphaSlider = (event) => {\r\n        if (event.touches.length === 1) {\r\n            const rect = alphaRef.current.getBoundingClientRect();\r\n            let x = event.touches[0].clientX - rect.left;\r\n            let y = event.touches[0].clientY - rect.top;\r\n            if (x >= 0 && x <= rect.width && y >= 0 && y <= rect.height) {\r\n                setAlpha((Math.floor(100 * x / rect.width)) / 100);\r\n                setAlphaSliderPos(x);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const handleHueInput = (value) => {\r\n        setHue(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, x: value / 360 * rect.width });\r\n    };\r\n\r\n    const handleLumInput = (value) => {\r\n        setLightness(value);\r\n        const rect = hueLumRef.current.getBoundingClientRect();\r\n        setColorSelectorPos({ ...colorSelectorPos, y: (100 - value) / 100 * rect.height });\r\n    };\r\n\r\n    const handleSaturationInput = (value) => {\r\n        setSaturation(value);\r\n        const rect = saturationRef.current.getBoundingClientRect();\r\n        setSaturationSliderPos(((100 - value) / 100) * rect.height);\r\n    };\r\n\r\n    const handleAlphaInput = (value) => {\r\n        setAlpha(value);\r\n        const rect = alphaRef.current.getBoundingClientRect();\r\n        setAlphaSliderPos(value * rect.width);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <color-picker-button onClick={() => setOpen(!open)} >\r\n                <div>\r\n                    <button style={{ background: color }} />\r\n                </div>\r\n            </color-picker-button>\r\n            {open && createPortal(\r\n                <color-picker-window\r\n                    tabIndex=\"0\"\r\n                    ref={colorPickerRef}\r\n                    onBlur={(e) => handleBlur(e)}\r\n                >\r\n                    <div>\r\n                        <hue-light-map>\r\n                            <canvas\r\n                                onMouseDown={(e) => handleHueLumMap(e)}\r\n                                onMouseMove={(e) => handleHueLumMap(e)}\r\n                                onTouchMove={(e) => touchHueLumMap(e)}\r\n                                onTouchStart={(e) => touchHueLumMap(e)}\r\n                                onTouchEnd={(e) => touchHueLumMap(e)}\r\n                                ref={hueLumRef} width=\"180\" height=\"180\"\r\n                                style={{ opacity: useAlpha ? alpha : 1 }}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: colorSelectorPos.y,\r\n                                    left: colorSelectorPos.x,\r\n                                    background:\r\n                                        useAlpha ?\r\n                                            `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` :\r\n                                            `hsl(${hue},${saturation}%,${lightness}%)`\r\n                                }}\r\n                                onMouseDown={(e) => handleHueLumMap(e)}\r\n                                onMouseMove={(e) => handleHueLumMap(e)}\r\n                                onTouchMove={(e) => touchHueLumMap(e)}\r\n                                onTouchStart={(e) => touchHueLumMap(e)}\r\n                                onTouchEnd={(e) => touchHueLumMap(e)}\r\n                            />\r\n                        </hue-light-map>\r\n                        <saturation-slider title=\"Saturation\">\r\n                            <div\r\n                                ref={saturationRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(0deg, hsl(${hue},0%,${lightness}%), hsla(${hue},100%,${lightness}%))`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                                onTouchMove={(e) => touchSaturationSlider(e)}\r\n                                onTouchStart={(e) => touchSaturationSlider(e)}\r\n                                onTouchEnd={(e) => touchSaturationSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    top: saturationSliderPos,\r\n                                    background: `hsla(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleSaturationSlider(e)}\r\n                                onMouseMove={(e) => handleSaturationSlider(e)}\r\n                                onTouchMove={(e) => touchSaturationSlider(e)}\r\n                                onTouchStart={(e) => touchSaturationSlider(e)}\r\n                                onTouchEnd={(e) => touchSaturationSlider(e)}\r\n                            />\r\n                        </saturation-slider>\r\n                    </div>\r\n                    {useAlpha &&\r\n                        <alpha-slider title=\"Alpha\">\r\n                            <div\r\n                                ref={alphaRef}\r\n                                style={{\r\n                                    background:\r\n                                        `linear-gradient(90deg, hsla(${hue},${saturation}%,${lightness}%, 0), hsla(${hue},${saturation}%,${lightness}%, 1))`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                                onTouchMove={(e) => touchAlphaSlider(e)}\r\n                                onTouchStart={(e) => touchAlphaSlider(e)}\r\n                                onTouchEnd={(e) => touchAlphaSlider(e)}\r\n                            />\r\n                            <slider-thumb\r\n                                style={{\r\n                                    left: alphaSliderPos,\r\n                                    background: `hsl(${hue},${saturation}%,${lightness}%, ${alpha})`\r\n                                }}\r\n                                onMouseDown={(e) => handleAlphaSlider(e)}\r\n                                onMouseMove={(e) => handleAlphaSlider(e)}\r\n                                onTouchMove={(e) => touchAlphaSlider(e)}\r\n                                onTouchStart={(e) => touchAlphaSlider(e)}\r\n                                onTouchEnd={(e) => touchAlphaSlider(e)}\r\n                            />\r\n                        </alpha-slider>\r\n                    }\r\n                    <color-inputs>\r\n                        <div>\r\n                            Hue\r\n                            <input type=\"number\" min=\"0\" max=\"360\" value={hue}\r\n                                onChange={(e) => handleHueInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Lum.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={lightness}\r\n                                onChange={(e) => handleLumInput(e.target.value)} />\r\n                        </div>\r\n                        <div>\r\n                            Sat.\r\n                            <input type=\"number\" min=\"0\" max=\"100\" value={saturation}\r\n                                onChange={(e) => handleSaturationInput(e.target.value)} />\r\n                        </div>\r\n                        {useAlpha &&\r\n                            <div>\r\n                                Alpha\r\n                                <input type=\"number\" min=\"0\" max=\"1\" step=\"0.01\" value={alpha}\r\n                                    onChange={(e) => handleAlphaInput(e.target.value)} />\r\n                            </div>\r\n                        }\r\n                    </color-inputs>\r\n                    <color-button >\r\n                        <button\r\n                            style={{\r\n                                background: useAlpha ? `hsla(${hue},${saturation}%,${lightness}%, ${alpha})` : `hsl(${hue},${saturation}%,${lightness}%)`\r\n                            }}\r\n                            onClick={() => { useAlpha ? setColor(`hsla(${hue},${saturation}%,${lightness}%, ${alpha})`) : setColor(`hsl(${hue},${saturation}%,${lightness}%)`) }}\r\n                        >\r\n                            Apply\r\n                        </button>\r\n                    </color-button>\r\n                </color-picker-window>\r\n                , document.getElementById(\"root\"))}\r\n        </>\r\n    );\r\n}","export default function hexToRgba(hex) {\r\n    var result;\r\n    if (hex.length === 5) {\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n        if(result[4] == 0){\r\n            result[4] = 'ff';\r\n        }\r\n    } else if(hex.length === 9) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }else if(hex.length === 8) {\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        result[4] = 'ff';\r\n    }\r\n        return result\r\n            ? [\r\n                parseInt(result[1], 16),\r\n                parseInt(result[2], 16),\r\n                parseInt(result[3], 16),\r\n                parseInt(result[4], 16) / 255,\r\n            ]\r\n            : null;\r\n}","export default function hexToRgb(hex) {\r\n    var result;\r\n    if(hex.length === 4){\r\n        result = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\r\n    }else{\r\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    }\r\n    return result\r\n        ? [\r\n               parseInt(result[1], 16),\r\n               parseInt(result[2], 16),\r\n               parseInt(result[3], 16),\r\n          ]\r\n        : null;\r\n}","export default function nameToHsl(name) {\r\n    switch(name){\r\n        case \"red\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"green\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"blue\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"yellow\":\r\n            return [60, \"100%\", \"50%\"];\r\n        case \"cyan\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"magenta\":\r\n            return [300, \"100%\", \"50%\"];\r\n        case \"black\":\r\n            return [0, \"0%\", \"0%\"];\r\n        case \"white\":\r\n            return [0, \"0%\", \"100%\"];\r\n        case \"gray\":\r\n        case \"grey\":\r\n            return [0, \"0%\", \"50%\"];\r\n        case \"lightgray\":\r\n        case \"lightgrey\":\r\n            return [0, \"0%\", \"75%\"];\r\n        case \"darkgray\":\r\n        case \"darkgrey\":\r\n            return [0, \"0%\", \"25%\"];\r\n        case \"brown\":\r\n            return [30, \"50%\", \"50%\"];\r\n        case \"orange\":\r\n            return [30, \"100%\", \"50%\"];\r\n        case \"purple\":\r\n            return [270, \"100%\", \"50%\"];\r\n        case \"pink\":\r\n            return [330, \"100%\", \"50%\"];\r\n        case \"lime\":\r\n            return [120, \"100%\", \"50%\"];\r\n        case \"teal\":\r\n            return [180, \"100%\", \"50%\"];\r\n        case \"aqua\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"maroon\":\r\n            return [0, \"100%\", \"50%\"];\r\n        case \"navy\":\r\n            return [240, \"100%\", \"50%\"];\r\n        case \"olive\":\r\n            return [60, \"100%\", \"50%\"];\r\n        default:\r\n            return [0, \"0%\", \"0%\"];\r\n    }\r\n}"],"names":["Global","theme","useContext","ThemeContext","device","DeviceContext","document","documentElement","_jsxs","_Fragment","children","_jsx","value","deviceType","onChange","e","setDeviceType","target","deviceTypeList","map","setTheme","themeList","mode","setMode","modeList","DesktopPreview","className","style","zIndex","FcGlobe","Desktop","background","BackgroundContext","backgroundMenu","setBackgroundMenu","useState","state","active","root","querySelector","desktopBkgrColor","setDesktopBkgrColor","getComputedStyle","getPropertyValue","useEffect","setProperty","desktopBkgrImage","setDesktopBkgrImage","desktopBkgrSize","setDesktopBkgrSize","desktopBkgrPosition","setDesktopBkgrPosition","desktopBkgrRepeat","setDesktopBkgrRepeat","desktopFontSize","setDesktopFontSize","slice","desktopIconSize","setDesktopIconSize","color","type","gradient","degree","color1","color2","image","url","position","size","repeat","onClick","setActive","ColorPicker","setColor","useAlpha","htmlFor","id","accept","file","reader","FileReader","readAsDataURL","onload","readerEvent","setImage","result","uploadImage","files","cursor","setScenario","isActive","checked","min","max","step","inclination","azimuth","turbidity","rayleight","intensity","count","near","far","Number","WindowPreview","themeContext","TopBarButtons","useCallback","lazy","TopBarButtonsPath","catch","error","console","default","TopBarButtonsDefault","topBarButtonTitles","minimize","maximize","restore","close","showButtons","top","left","width","height","backgroundColor","borderWidth","borderColor","borderRadius","Suspense","fallback","title","click","isMaximized","Window","windowFontColor","setWindowFontColor","windowFontColorInactive","setWindowFontColorInactive","fontSize","setFontSize","topbarTitleAlign","setTopbarTitleAlign","topbarFontColor","setTopbarFontColor","bkgColor","setBkgColor","windowPadding","setWindowPadding","topbarFlexDirection","setTopbarFlexDirection","topbarBkgColor","setTopbarBkgColor","topBarHeight","setTopBarHeight","topBarIconSize","setTopBarIconSize","setBorderWidth","setBorderRadius","borderType","setBorderType","setBorderColor","shadowXOffset","setShadowXOffset","shadowYOffset","setShadowYOffset","shadowBlur","setShadowBlur","shadowSpread","setShadowSpread","shadowColor","setShadowColor","inactiveBorderColor","setInactiveBorderColor","inactiveTopBarBkgColor","setInactiveTopBarBkgColor","topbarFontColorInactive","setTopbarFontColorInactive","inactiveBkgColor","setInactiveBkgColor","windowBackgroundFX","setWindowBackgroundFX","backgroundFXList","backgroundFX","topBarIconTheme","setTopBarIconTheme","topBarIconThemeList","iconTheme","MenuPreview","NavMenu","Fragment","disabled","name","navMenuLocation","Menu","navBkgrColor","setNavBkgrColor","navBkgrColorInactive","setNavBkgrColorInactive","setBackgroundColor","fontColor","setFontColor","hoverFontColor","setHoverFontColor","hoverBkgr","setHoverBkgr","navButtonBkgr","setNavButtonBkgr","navButtonFontColor","setNavButtonFontColor","navButtonHoverBkgr","setNavButtonHoverBkgr","navButtonHoverFontColor","setNavButtonHoverFontColor","navButtonBorderColor","setNavButtonBorderColor","navButtonBorderWidth","setNavButtonBorderWidth","navButtonBorderRadius","setNavButtonBorderRadius","navButtonBorderType","setNavButtonBorderType","setNavMenuLocation","navMenuLocationList","location","AppPreview","deviceContext","textAlign","marginLeft","marginRight","marginBottom","App","fontColorInactive","setFontColorInactive","bkgColorInactive","setBkgColorInactive","borderColorInactive","setBorderColorInactive","alpha","DialogPreview","ButtonDefault","_ref","_type","Button","DialogButtonPath","_error","DialogButtonsBar","transform","dialogButtonsLocation","Dialog","dialogBkgrColor","setDialogBkgrColor","dialogBorderColor","setDialogBorderColor","dialogBorderWidth","setDialogBorderWidth","dialogBorderRadius","setDialogBorderRadius","dialogBorderType","setDialogBorderType","dialogInfoBkgr","setDialogInfoBkgr","dialogInfoFontColor","setDialogInfoFontColor","dialogInfoFontSize","setDialogInfoFontSize","dialogInfoBorderColor","setDialogInfoBorderColor","dialogInfoBorderWidth","setDialogInfoBorderWidth","dialogInfoBorderRadius","setDialogInfoBorderRadius","dialogInfoBorderType","setDialogInfoBorderType","dialogPadding","setDialogPadding","dialogTopBarBkgr","setDialogTopBarBkgr","dialogTopBarFontSize","setDialogTopBarFontSize","dialogTopBarFontColor","setDialogTopBarFontColor","dialogButtonBarBkgr","setDialogButtonBarBkgr","dialogButtonBkgr","setDialogButtonBkgr","dialogButtonFontColor","setDialogButtonFontColor","dialogButtonFontSize","setDialogButtonFontSize","dialogButtonBorderColor","setDialogButtonBorderColor","dialogButtonBorderWidth","setDialogButtonBorderWidth","dialogButtonBorderRadius","setDialogButtonBorderRadius","dialogButtonBorderType","setDialogButtonBorderType","setDialogButtonsLocation","dialogButtonsLocationList","buttonLocation","dialogButtonTheme","setDialogButtonTheme","dialogButtonThemeList","buttonTheme","TaskBarPreview","isStartListOpen","setIsStartListOpen","isLiveAppsOpen","setIsLiveAppsOpen","toDesktopClicked","setToDesktopClicked","isDarkMode","setIsDarkMode","Logo","StartButtonPath","DefaultLogo","AppButton","LiveAppButtonPath","DefaultButton","LiveAppsIcon","LiveAppsMobileIconPath","DefaultIcon","ToDesktopIcon","ToDesktopIconPath","Icon","flag","systemDarkMode","display","flexDirection","justifyContent","bottom","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backdropFilter","isOpen","context","AppIcon","isSelected","darkMode","handleToDesktopClick","setTimeout","TaskBar","taskbarHeight","setTaskbarHeight","taskbarIconSize","setTaskbarIconSize","taskbarBkgr","setTaskbarBkgr","taskbarFontSize","setTaskbarFontSize","taskbarVerticalBorderColor","setTaskbarVerticalBorderColor","taskbarVerticalBorderWidth","setTaskbarVerticalBorderWidth","taskbarVerticalBorderType","setTaskbarVerticalBorderType","taskbarHorizontalBorderColor","setTaskbarHorizontalBorderColor","taskbarHorizontalBorderWidth","setTaskbarHorizontalBorderWidth","taskbarHorizontalBorderType","setTaskbarHorizontalBorderType","taskbarBackgroundFX","setTaskbarBackgroundFX","fx","MainButtonsPreview","MainButtons","startButtonBkgr","setStartButtonBkgr","startButtonBkgrHover","setStartButtonBkgrHover","startButtonBkgrActive","setStartButtonBkgrActive","startButtonIconSize","setStartButtonIconSize","startButtonHeight","setStartButtonHeight","startButtonMargin","setStartButtonMargin","startButtonPadding","setStartButtonPadding","startButtonBorderWidth","setStartButtonBorderWidth","startButtonBorderColor","setStartButtonBorderColor","startButtonBorderType","setStartButtonBorderType","startButtonBorderRadius","setStartButtonBorderRadius","startButtonFontVisibility","setStartButtonFontVisibility","startButtonFontColor","setStartButtonFontColor","startButtonFontSize","setStartButtonFontSize","startButtonTheme","setStartButtonTheme","startButtonThemeList","StartMenuPreview","class","FaGear","MdOutlineRestartAlt","RiShutDownLine","FcInfo","FcSettings","StartMenu","startMenuBkgr","setStartMenuBkgr","startMenuFlexDirection","setStartMenuFlexDirection","startMenuPadding","setStartMenuPadding","startMenuBorderColor","setStartMenuBorderColor","startMenuBorderWidth","setStartMenuBorderWidth","startMenuBorderRadius","setStartMenuBorderRadius","startMenuBorderType","setStartMenuBorderType","startMenuPrimaryBkgr","setStartMenuPrimaryBkgr","startMenuPrimaryBkgrHover","setStartMenuPrimaryBkgrHover","startMenuPrimaryBkgrActive","setStartMenuPrimaryBkgrActive","startMenuPrimaryFontColor","setStartMenuPrimaryFontColor","startMenuPrimaryFontColorHover","setStartMenuPrimaryFontColorHover","startMenuPrimaryFontColorActive","setStartMenuPrimaryFontColorActive","startMenuPrimaryFontSize","setStartMenuPrimaryFontSize","startMenuPrimaryIconSize","setStartMenuPrimaryIconSize","startMenuPrimaryMargin","setStartMenuPrimaryMargin","startMenuPrimaryPadding","setStartMenuPrimaryPadding","startMenuPrimaryBorderColor","setStartMenuPrimaryBorderColor","startMenuPrimaryBorderWidth","setStartMenuPrimaryBorderWidth","startMenuPrimaryBorderRadius","setStartMenuPrimaryBorderRadius","startMenuPrimaryBorderType","setStartMenuPrimaryBorderType","startMenuSecondaryBkgr","setStartMenuSecondaryBkgr","startMenuSecondaryBkgrHover","setStartMenuSecondaryBkgrHover","startMenuSecondaryBkgrActive","setStartMenuSecondaryBkgrActive","startMenuSecondaryFontVisibility","setStartMenuSecondaryFontVisibility","startMenuSecondaryFontColor","setStartMenuSecondaryFontColor","startMenuSecondaryFontColorHover","setStartMenuSecondaryFontColorHover","startMenuSecondaryFontColorActive","setStartMenuSecondaryFontColorActive","startMenuSecondaryFontSize","setStartMenuSecondaryFontSize","startMenuSecondaryIconSize","setStartMenuSecondaryIconSize","startMenuSecondaryMargin","setStartMenuSecondaryMargin","startMenuSecondaryPadding","setStartMenuSecondaryPadding","startMenuSecondaryBorderColor","setStartMenuSecondaryBorderColor","startMenuSecondaryBorderWidth","setStartMenuSecondaryBorderWidth","startMenuSecondaryBorderRadius","setStartMenuSecondaryBorderRadius","startMenuSecondaryBorderType","setStartMenuSecondaryBorderType","startMenuBackgroundFX","setStartMenuBackgroundFX","AppListPreview","boxShadow","FcCalculator","AppList","startMenuOuterPadding","setStartMenuOuterPadding","startMenuOuterShadowBlur","setStartMenuOuterShadowBlur","startMenuOuterShadowSpread","setStartMenuOuterShadowSpread","startMenuOuterShadowColor","setStartMenuOuterShadowColor","startMenuOuterBkgr","setStartMenuOuterBkgr","startMenuInnerBkgr","setStartMenuInnerBkgr","startMenuInnerBorderWidth","setStartMenuInnerBorderWidth","startMenuInnerBorderColor","setStartMenuInnerBorderColor","startMenuInnerBorderType","setStartMenuInnerBorderType","startMenuInnerBorderRadius","setStartMenuInnerBorderRadius","startMenuButtonPadding","setStartMenuButtonPadding","startMenuButtonMargin","setStartMenuButtonMargin","startMenuButtonSize","setStartMenuButtonSize","startMenuButtonFontSize","setStartMenuButtonFontSize","startMenuButtonFontColor","setStartMenuButtonFontColor","startMenuButtonFontDisplay","setStartMenuButtonFontDisplay","startMenuButtonBkgr","setStartMenuButtonBkgr","startMenuButtonBkgrHover","setStartMenuButtonBkgrHover","startMenuButtonBkgrActive","setStartMenuButtonBkgrActive","startMenuButtonBorderWidth","setStartMenuButtonBorderWidth","startMenuButtonBorderColor","setStartMenuButtonBorderColor","startMenuButtonBorderType","setStartMenuButtonBorderType","startMenuButtonBorderRadius","setStartMenuButtonBorderRadius","startMenuButtonIconSize","setStartMenuButtonIconSize","startMenuMobileBackgroundFX","setStartMenuMobileBackgroundFX","LiveAppsPreview","LiveApps","liveAppsBkgr","setLiveAppsBkgr","liveAppsBkgrHover","setLiveAppsBkgrHover","liveAppsBkgrActive","setLiveAppsBkgrActive","liveAppsIconSize","setLiveAppsIconSize","liveAppsFontSize","setLiveAppsFontSize","liveAppsFontColor","setLiveAppsFontColor","liveAppsFontColorHover","setLiveAppsFontColorHover","liveAppsFontColorActive","setLiveAppsFontColorActive","liveAppsFontColorActiveHover","setLiveAppsFontColorActiveHover","liveAppsFontVisibility","setLiveAppsFontVisibility","liveAppsHeight","setLiveAppsHeight","liveAppsMargin","setLiveAppsMargin","liveAppsPadding","setLiveAppsPadding","liveAppsBorderWidth","setLiveAppsBorderWidth","liveAppsBorderRadius","setLiveAppsBorderRadius","liveAppsBorderColor","setLiveAppsBorderColor","liveAppsBorderType","setLiveAppsBorderType","liveAppsTheme","setLiveAppsTheme","liveAppsThemeList","TrayPreview","WiCloudy","TbDeviceDesktop","Tray","taskbarTrayBkgr","setTaskbarTrayBkgr","taskbarTrayMargin","setTaskbarTrayMargin","taskbarTrayPadding","setTaskbarTrayPadding","taskbarTrayBorderColor","setTaskbarTrayBorderColor","taskbarTrayBorderRadius","setTaskbarTrayBorderRadius","taskbarTrayBorderWidth","setTaskbarTrayBorderWidth","taskbarTrayBorderType","setTaskbarTrayBorderType","taskbarTrayButtonBkgr","setTaskbarTrayButtonBkgr","taskbarTrayButtonBkgrHover","setTaskbarTrayButtonBkgrHover","taskbarTrayButtonBkgrActive","setTaskbarTrayButtonBkgrActive","taskbarTrayButtonColor","setTaskbarTrayButtonColor","taskbarTrayButtonColorHover","setTaskbarTrayButtonColorHover","taskbarTrayButtonColorActive","setTaskbarTrayButtonColorActive","taskbarTrayButtonMargin","setTaskbarTrayButtonMargin","taskbarTrayButtonPadding","setTaskbarTrayButtonPadding","taskbarTrayButtonBorderColor","setTaskbarTrayButtonBorderColor","taskbarTrayButtonBorderRadius","setTaskbarTrayButtonBorderRadius","taskbarTrayButtonBorderWidth","setTaskbarTrayButtonBorderWidth","taskbarTrayButtonBorderType","setTaskbarTrayButtonBorderType","TrayCollapsedPreview","TbDeviceMobile","TrayCollapsed","setHeight","horizontalPadding","setHorizontalPadding","verticalPadding","setVerticalPadding","iconSize","setIconSize","TrayExpandedPreview","WiUmbrella","TrayExpanded","setBackground","systemColor","setSystemColor","systemButtonSize","setSystemButtonSize","systemButtonBackground","setSystemButtonBackground","systemButtonMargin","setSystemButtonMargin","systemButtonPadding","setSystemButtonPadding","systemButtonBorderRadius","setSystemButtonBorderRadius","systemButtonBorderColor","setSystemButtonBorderColor","systemButtonBorderWidth","setSystemButtonBorderWidth","systemButtonBorderType","setSystemButtonBorderType","systemButtonIconSize","setSystemButtonIconSize","systemClockFontSize","setSystemClockFontSize","systemClockPadding","setSystemClockPadding","systemClockColor","setSystemClockColor","mobileTrayBackgroundFX","setMobileTrayBackgroundFX","TrayWindowPreview","alignItems","FaCog","FaArrowLeft","FaArrowRight","TrayWindow","taskbarWindowBkgr","setTaskbarWindowBkgr","taskbarWindowPadding","setTaskbarWindowPadding","taskbarWindowBorderColor","setTaskbarWindowBorderColor","taskbarWindowBorderRadius","setTaskbarWindowBorderRadius","taskbarWindowBorderWidth","setTaskbarWindowBorderWidth","taskbarWindowBorderType","setTaskbarWindowBorderType","taskbarWindowShadowXOffset","setTaskbarWindowShadowXOffset","taskbarWindowShadowYOffset","setTaskbarWindowShadowYOffset","taskbarWindowShadowBlur","setTaskbarWindowShadowBlur","taskbarWindowShadowSpread","setTaskbarWindowShadowSpread","taskbarWindowShadowColor","setTaskbarWindowShadowColor","taskbarWindowHeaderBkgr","setTaskbarWindowHeaderBkgr","taskbarWindowHeaderColor","setTaskbarWindowHeaderColor","taskbarWindowHeaderMargin","setTaskbarWindowHeaderMargin","taskbarWindowHeaderPadding","setTaskbarWindowHeaderPadding","taskbarWindowHeaderBorderColor","setTaskbarWindowHeaderBorderColor","taskbarWindowHeaderBorderRadius","setTaskbarWindowHeaderBorderRadius","taskbarWindowHeaderBorderWidth","setTaskbarWindowHeaderBorderWidth","taskbarWindowHeaderBorderType","setTaskbarWindowHeaderBorderType","taskbarWindowNavBkgr","setTaskbarWindowNavBkgr","taskbarWindowNavColor","setTaskbarWindowNavColor","taskbarWindowNavMargin","setTaskbarWindowNavMargin","taskbarWindowNavPadding","setTaskbarWindowNavPadding","taskbarWindowNavBorderColor","setTaskbarWindowNavBorderColor","taskbarWindowNavBorderRadius","setTaskbarWindowNavBorderRadius","taskbarWindowNavBorderWidth","setTaskbarWindowNavBorderWidth","taskbarWindowNavBorderType","setTaskbarWindowNavBorderType","taskbarWindowBodyBkgr","setTaskbarWindowBodyBkgr","taskbarWindowBodyColor","setTaskbarWindowBodyColor","taskbarWindowBodyMargin","setTaskbarWindowBodyMargin","taskbarWindowBodyPadding","setTaskbarWindowBodyPadding","taskbarWindowBodyBorderColor","setTaskbarWindowBodyBorderColor","taskbarWindowBodyBorderRadius","setTaskbarWindowBodyBorderRadius","taskbarWindowBodyBorderWidth","setTaskbarWindowBodyBorderWidth","taskbarWindowBodyBorderType","setTaskbarWindowBodyBorderType","taskbarWindowFooterBkgr","setTaskbarWindowFooterBkgr","taskbarWindowFooterColor","setTaskbarWindowFooterColor","taskbarWindowFooterMargin","setTaskbarWindowFooterMargin","taskbarWindowFooterPadding","setTaskbarWindowFooterPadding","taskbarWindowFooterBorderColor","setTaskbarWindowFooterBorderColor","taskbarWindowFooterBorderRadius","setTaskbarWindowFooterBorderRadius","taskbarWindowFooterBorderWidth","setTaskbarWindowFooterBorderWidth","taskbarWindowFooterBorderType","setTaskbarWindowFooterBorderType","taskbarWindowBackgroundFX","setTaskbarWindowBackgroundFX","ContextMenuPreview","checkbox1","setCheckbox1","checkbox2","setCheckbox2","radio","setRadio","readOnly","ContextMenu","hoverColor","setHoverColor","padding","setPadding","Definitions","subMenu","setSubMenu","defPage","setDefPage","menuList","setMenuList","menu","index","submenu","onSubmit","preventDefault","Scenario","Ocean","ref","useRef","gl","useThree","waterNormals","useLoader","THREE","WaterNormals","wrapS","wrapT","geom","useMemo","config","textureWidth","textureHeight","sunDirection","sunColor","waterColor","distortionScale","fog","format","encoding","useFrame","delta","current","material","uniforms","time","args","Math","PI","Desert","hillsNormals","HillsNormals","sandTexture","SandTexture","set","Plane","metalness","roughness","normalMap","normalScale","displacementMap","displacementScale","Canvas","dpr","window","devicePixelRatio","camera","attach","OrbitControls","Sky","distance","rayleigh","exposure","Stars","radius","extend","Water","rgbToHsl","rgb","r","g","b","cmin","cmax","h","s","l","round","abs","toFixed","rgbaToHsla","rgba","a","parseInt","colorPickerRef","hueLumRef","saturationRef","alphaRef","colorSelectorPos","setColorSelectorPos","x","y","saturationSliderPos","setSaturationSliderPos","alphaSliderPos","setAlphaSliderPos","open","setOpen","hue","setHue","lightness","setLightness","saturation","setSaturation","setAlpha","focus","hslaColor","hex","length","exec","hexToRgba","i","start","end","push","hueLumRect","getBoundingClientRect","saturationRect","alphaRect","hslColor","hexToRgb","nameToHsl","ctx","clearRect","canvas","blockwidth","blockheight","j","fillStyle","fillRect","drawColorMap","getContext","handleHueLumMap","event","buttons","rect","clientX","clientY","floor","touchHueLumMap","touches","handleSaturationSlider","touchSaturationSlider","handleAlphaSlider","touchAlphaSlider","createPortal","tabIndex","onBlur","currentTarget","contains","relatedTarget","onMouseDown","onMouseMove","onTouchMove","onTouchStart","onTouchEnd","opacity","handleHueInput","handleLumInput","handleSaturationInput","handleAlphaInput","getElementById"],"sourceRoot":""}