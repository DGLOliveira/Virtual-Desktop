{"version":3,"file":"static/js/945.44a3d651.chunk.js","mappings":"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","sources":["Apps/Gyroscope/index.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\nimport { useGLTF, OrthographicCamera } from \"@react-three/drei\";\r\nimport GyroscopeObject from \"./Assets/Gyroscope.glb\";\r\nimport \"./style.css\";\r\nimport { set } from \"ol/transform\";\r\nexport default function Gyroscope() {\r\n    const [state, setState] = useState(\"ready\");\r\n    const [angles, setAngles] = useState({\r\n        heading: 0,\r\n        pitch: 0,\r\n        roll: 0,\r\n        screenOrientationAngle: screen.orientation.angle\r\n    });\r\n    var sensor = null;\r\n    var zoom = 50;\r\n    const SENSOR_UPDATE_FREQUENCY = 4; //keep value low to avoid battery drain\r\n\r\n    //3D model of Gyroscope\r\n    const Gyro = () => {\r\n        const object = useGLTF(GyroscopeObject);\r\n        const ref = useRef();\r\n        let externalGimbal, internalGimbal, axis, rotor;\r\n        object.scene.children.forEach((child) => {\r\n            child.name === \"External_Gimbal\" ? (externalGimbal = child) : null;\r\n            child.name === \"Internal_Gimbal\" ? (internalGimbal = child) : null;\r\n            child.name === \"Axis\" ? (axis = child) : null;\r\n        })\r\n        let accDelta = 0;\r\n        //Animates 3D model\r\n        //Sensor quaternion values cannot be used directly, they must be converted to euler angles in order to use their individual angles\r\n        //Note that euler angles must be converted back to quaternion in order to prevent Gimbal lock\r\n        useFrame((stt, delta) => {\r\n            if (state === \"running\") {\r\n                accDelta += delta * 10;\r\n            }\r\n            if (externalGimbal !== undefined && internalGimbal !== undefined && axis !== undefined) {\r\n                let alpha, beta;\r\n                let gama = accDelta;\r\n                if (angles.screenOrientationAngle === 90) {\r\n                    alpha = -angles.pitch + Math.PI;\r\n                    beta = angles.roll + Math.PI / 2;\r\n                } else if (angles.screenOrientationAngle === 270) {\r\n                    alpha = -angles.pitch + Math.PI;\r\n                    beta = -angles.roll + Math.PI / 2;\r\n                } else if (angles.screenOrientationAngle === 0) {\r\n                    alpha = angles.pitch + Math.PI;\r\n                    beta = -angles.roll;\r\n                } else {\r\n                    alpha = angles.pitch + Math.PI;\r\n                    beta = angles.roll;\r\n                }\r\n                externalGimbal.quaternion.w = Math.cos(alpha / 2);\r\n                externalGimbal.quaternion.y = Math.sin(alpha / 2);\r\n                externalGimbal.quaternion.x = 0;\r\n                externalGimbal.quaternion.z = 0;\r\n                internalGimbal.quaternion.w = Math.cos(alpha / 2) * Math.cos(beta / 2);\r\n                internalGimbal.quaternion.y = Math.sin(alpha / 2) * Math.cos(beta / 2);\r\n                internalGimbal.quaternion.x = Math.cos(alpha / 2) * Math.sin(beta / 2);\r\n                internalGimbal.quaternion.z = - Math.sin(alpha / 2) * Math.sin(beta / 2);\r\n                axis.quaternion.w = Math.cos(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.cos(gama / 2) + Math.sin(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.sin(gama / 2);\r\n                axis.quaternion.y = Math.sin(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.cos(gama / 2) - Math.cos(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.sin(gama / 2);\r\n                axis.quaternion.x = Math.cos(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.cos(gama / 2) + Math.sin(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.sin(gama / 2);\r\n                axis.quaternion.z = Math.cos(alpha / 2) * Math.cos((beta + Math.PI / 2) / 2) * Math.sin(gama / 2) - Math.sin(alpha / 2) * Math.sin((beta + Math.PI / 2) / 2) * Math.cos(gama / 2);\r\n            }\r\n        })\r\n        return <primitive ref={ref} object={object.scene} scale={1.6} />\r\n    }\r\n\r\n    //converts quaternion to angles in radians\r\n    function quaternionToAngles(x, y, z, w) {\r\n        const heading = Math.atan2(2 * (x * y + z * w), 1 - 2 * (y * y + z * z));\r\n        const pitch = Math.asin(2 * (x * z - w * y));\r\n        const roll = Math.atan2(2 * (x * w + y * z), 1 - 2 * (x * x + y * y));\r\n        return {\r\n            heading: heading,\r\n            pitch: pitch,\r\n            roll: roll,\r\n        };\r\n    };\r\n\r\n    //runs gyroscope\r\n    const runGyroscope = () => {\r\n        const options = { frequency: SENSOR_UPDATE_FREQUENCY, referenceFrame: \"device\" };\r\n        sensor = new RelativeOrientationSensor(options);\r\n        sensor.start();\r\n        console.log(\"gyroscope started\");\r\n        sensor.onreading = () => {\r\n            let newAngles = quaternionToAngles(\r\n                sensor.quaternion[0],\r\n                sensor.quaternion[1],\r\n                sensor.quaternion[2],\r\n                sensor.quaternion[3]\r\n            );\r\n            let newOrientationAngle = screen.orientation.angle;\r\n            setAngles({ ...newAngles, newOrientationAngle });\r\n            console.log({ ...newAngles, newOrientationAngle });\r\n        }\r\n    };\r\n\r\n    //state machine\r\n    useEffect(() => {\r\n        if (state === \"start\") {\r\n            if (\"AbsoluteOrientationSensor\" in window) {\r\n                Promise.all([\r\n                    navigator.permissions.query({ name: \"gyroscope\" }),\r\n                    navigator.permissions.query({ name: \"accelerometer\" })\r\n                ]).then((results) => {\r\n                    if (results.every((result) => result.state === \"granted\")) {\r\n                        setState(\"running\");\r\n                    } else {\r\n                        setState(\"not allowed\");\r\n                    }\r\n                });\r\n            } else {\r\n                setState(\"not supported\");\r\n            }\r\n\r\n        }\r\n        if (state === \"running\") {\r\n            runGyroscope();\r\n        }\r\n    }, [state]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (sensor) {\r\n                sensor.stop();\r\n                console.log(\"stopped sensor\");\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    return (<>\r\n        <Canvas\r\n            id=\"gyroscopeCanvas\"\r\n        >\r\n            <ambientLight intensity={1} />\r\n            <pointLight position={[-10, -10, 10]} intensity={500} />\r\n            <Gyro />\r\n            <OrthographicCamera makeDefault={true} zoom={zoom} position={[0, 0, 10]} />\r\n        </Canvas>\r\n        {state === \"ready\" &&\r\n            <button className=\"gyroscopeStartButton\" onClick={() => setState('start')}>\r\n                Start\r\n            </button>\r\n        }\r\n        {state === \"not supported\" &&\r\n            <div className=\"gyroscopeWarning\">\r\n                This feature is not supported on your device and/or browser\r\n            </div>\r\n        }\r\n        {state === \"not allowed\" &&\r\n            <div className=\"gyroscopeWarning\">\r\n                This feature does not have permission to access your device sensors\r\n            </div>\r\n        }\r\n    </>);\r\n}"],"names":["Gyroscope","state","setState","useState","angles","setAngles","heading","pitch","roll","screenOrientationAngle","screen","orientation","angle","sensor","Gyro","object","useGLTF","GyroscopeObject","ref","useRef","externalGimbal","internalGimbal","axis","scene","children","forEach","child","name","accDelta","useFrame","stt","delta","undefined","alpha","beta","gama","Math","PI","quaternion","w","cos","y","sin","x","z","_jsx","scale","runGyroscope","RelativeOrientationSensor","frequency","referenceFrame","start","console","log","onreading","newAngles","atan2","asin","newOrientationAngle","useEffect","window","Promise","all","navigator","permissions","query","then","results","every","result","stop","_jsxs","_Fragment","Canvas","id","intensity","position","OrthographicCamera","makeDefault","zoom","className","onClick"],"sourceRoot":""}