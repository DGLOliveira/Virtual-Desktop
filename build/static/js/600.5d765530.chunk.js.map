{"version":3,"file":"static/js/600.5d765530.chunk.js","mappings":"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","sources":["Apps/Arcade/Games/Breakout/Breakout.js","Apps/Arcade/Games/Snake/Snake.js","Apps/Arcade/Games/Space Invaders/SpaceInvaders.js","Apps/Arcade/Handlers/handleAction.js","Apps/Arcade/Handlers/handleTopMenu.js","Apps/Arcade/Components/KeybindDialog.jsx","Apps/Arcade/index.jsx","Apps/Arcade/Controls/Keyboard.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Controls from \"../../Controls/Keyboard.js\";\r\nimport LevelsJSON from \"./Breakout_Maps.json\";\r\n\r\nconst frequency = 60; //Hertz\r\nconst frameRate = 1000 / frequency; // frames / milisecond\r\nconst rows = 30;\r\nconst cols = 30;\r\nconst defaultPlayerBar = {\r\n  x: 12,\r\n  y: 27,\r\n  w: 6,\r\n};\r\nconst defaultBall = {\r\n  x: 15,\r\n  y: 50,\r\n  r: 0.5,\r\n  dirX: 0.25,\r\n  dirY: -0.25,\r\n};\r\nconst defaultFirework = {\r\n  x: 15,\r\n  y: 52,\r\n  r: 0.25,\r\n  dirX: 0,\r\n  dirY: -0.25,\r\n  t: -5,\r\n  color: \"\",\r\n};\r\nexport default function Breakout({ controls, updateScoreboard, isSelected, gameState, setGameState }) {\r\n  const canvasRef = useRef(null);\r\n  const [Maps, setMaps] = useState(JSON.parse(JSON.stringify(LevelsJSON))); //Only way to deep copy nested objects without external dependency\r\n  const [gameLevel, setGameLevel] = useState(0);\r\n  const [currLevel, setCurrLevel] = useState(Maps[gameLevel]);\r\n  const [levelHealth, setLevelHealth] = useState(currLevel.Bars);\r\n  const [frameCount, setFrameCount] = useState(0);\r\n  const [winFrameCount, setWinFrameCount] = useState(0);\r\n  let [playerBar, setPlayerBar] = useState(Object.create(defaultPlayerBar));\r\n  let [ball, setBall] = useState(Object.create(defaultBall));\r\n  let [firework1] = useState(Object.create(defaultFirework));\r\n  firework1.color = \"blue\";\r\n  let [firework2] = useState(Object.create(defaultFirework));\r\n  firework2.color = \"green\";\r\n  let [firework3] = useState(Object.create(defaultFirework));\r\n  firework3.color = \"red\";\r\n  let [firework4] = useState(Object.create(defaultFirework));\r\n  firework4.color = \"yellow\";\r\n  let [firework5] = useState(Object.create(defaultFirework));\r\n  firework5.color = \"cyan\";\r\n  let [firework6] = useState(Object.create(defaultFirework));\r\n  firework6.color = \"magenta\";\r\n  let [firework7] = useState(Object.create(defaultFirework));\r\n  firework7.color = \"white\";\r\n  const scoreboard = { time: 0, score: 0, gameState: \"Start\" };\r\n  let [score, setScore] = useState(0);\r\n  useEffect(() => {\r\n    if (controls.pause) {\r\n      if (gameState === \"Play\") {\r\n        setGameState(\"Pause\");\r\n      } else if (gameState === \"Pause\") {\r\n        setGameState(\"Play\");\r\n      } else if (\r\n        gameState === \"Win\" ||\r\n        gameState === \"End\" ||\r\n        gameState === \"Start\"\r\n      ) {\r\n        setGameState(\"Restart\");\r\n      }\r\n    }\r\n    if (gameState === \"Play\" || \"Win\") {\r\n      if (\r\n        controls.left &&\r\n        !controls.right &&\r\n        playerBar.x + playerBar.w > playerBar.w\r\n      ) {\r\n        playerBar.x = playerBar.x - 1;\r\n      }\r\n      if (\r\n        controls.right &&\r\n        !controls.left &&\r\n        playerBar.x + playerBar.w < cols\r\n      ) {\r\n        playerBar.x = playerBar.x + 1;\r\n      }\r\n    }\r\n  }, [controls]);\r\n\r\n  const clearDraws = (ctx) => {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  };\r\n\r\n  const drawGameOver = (ctx, blockWidth, blockHeight) => {\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\"; //change this nonsense static font size\r\n    ctx.fillText(\"Game Over\", 5 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n  const drawPauseGame = (ctx, blockWidth, blockHeight) => {\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\"; //and this\r\n    ctx.fillText(\"Paused\", 8 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n  const handleFireworks = (ctx, blockWidth, blockHeight) => {\r\n    let currFirework;\r\n    for (let i = 0; i <= 6; i++) {\r\n      switch (i) {\r\n        case 0:\r\n          currFirework = firework1;\r\n          break;\r\n        case 1:\r\n          currFirework = firework2;\r\n          break;\r\n        case 2:\r\n          currFirework = firework3;\r\n          break;\r\n        case 3:\r\n          currFirework = firework4;\r\n          break;\r\n        case 4:\r\n          currFirework = firework5;\r\n          break;\r\n        case 5:\r\n          currFirework = firework6;\r\n          break;\r\n        case 6:\r\n          currFirework = firework7;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      if (currFirework.t <= -5) {\r\n        currFirework.t = Math.floor(Math.random() * 4) + 1;\r\n        currFirework.x = playerBar.x + playerBar.w / 2;\r\n        currFirework.y = 52;\r\n        currFirework.dirX = (Math.random() - 0.5) / 8;\r\n        currFirework.dirY = -0.25;\r\n      } else if (currFirework.t > 3) {\r\n        currFirework.t = currFirework.t - 1 / frequency;\r\n      } else if (currFirework.t > 0) {\r\n        currFirework.x = currFirework.x + currFirework.dirX;\r\n        currFirework.y = currFirework.y + currFirework.dirY;\r\n        checkColision(currFirework);\r\n        drawBall(ctx, blockWidth, blockHeight, currFirework);\r\n        currFirework.t = currFirework.t - 1 / frequency;\r\n      } else if (currFirework.t > -5) {\r\n        drawFirework(ctx, blockWidth, blockHeight, currFirework);\r\n        currFirework.t = currFirework.t - 1 / frequency;\r\n      }\r\n    }\r\n  };\r\n  const drawFirework = (ctx, blockWidth, blockHeight, currBall) => {\r\n    for (let i = 0; i < 12; i++) {\r\n      ctx.fillStyle = currBall.color;\r\n      ctx.scale(1, 0.5);\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        currBall.x * blockWidth +\r\n          Math.cos(((2 * Math.PI) / 12) * i) * currBall.t * 2 * blockWidth,\r\n        currBall.y * blockHeight +\r\n          Math.sin(((2 * Math.PI) / 12) * i) * 2 * currBall.t * 2 * blockHeight,\r\n        (currBall.r / 1) * blockWidth,\r\n        0,\r\n        Math.PI * 2,\r\n      );\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      ctx.scale(1, 2);\r\n    }\r\n  };\r\n  const drawWinGame = (ctx, blockWidth, blockHeight) => {\r\n    clearDraws(ctx);\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    ctx.fillText(\"You Win\", 8 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n\r\n  const drawLevelUp = (ctx, blockWidth, blockHeight, t) => {\r\n    clearDraws(ctx);\r\n    ctx.fillStyle = \"red\";\r\n    ctx.font = \"40px monospace\";\r\n    switch (t) {\r\n      case 4:\r\n        ctx.fillText(\"Next Level\", 5 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      case 3:\r\n        ctx.fillText(\"3 sec\", 9 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      case 2:\r\n        ctx.fillText(\"2 sec\", 9 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      case 1:\r\n        ctx.fillText(\"1 sec\", 9 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n      default:\r\n        ctx.fillText(\"Next Level\", 5 * blockWidth, 17 * blockHeight, 500);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const drawPlayerBar = (ctx, blockWidth, blockHeight) => {\r\n    let newX, newY;\r\n    newX = playerBar.x;\r\n    newY = playerBar.y;\r\n    ctx.fillStyle = \"cyan\";\r\n    ctx.fillRect(\r\n      newX * blockWidth,\r\n      newY * blockHeight,\r\n      playerBar.w * blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n  const drawHitbar = (ctx, blockWidth, blockHeight, obj) => {\r\n    let color;\r\n    switch (obj.h) {\r\n      case 3:\r\n        color = \"green\";\r\n        break;\r\n      case 2:\r\n        color = \"yellow\";\r\n        break;\r\n      case 1:\r\n        color = \"orange\";\r\n        break;\r\n      default:\r\n        color = \"blue\";\r\n        break;\r\n    }\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(\r\n      obj.x * blockWidth,\r\n      obj.y * blockHeight,\r\n      obj.w * blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n  const drawLevel = (ctx, blockWidth, blockHeight) => {\r\n    for (let i = 0; i < currLevel.Bars; i++) {\r\n      if (currLevel.Matrix[i].h > 0)\r\n        drawHitbar(ctx, blockWidth, blockHeight, currLevel.Matrix[i]);\r\n    }\r\n  };\r\n  const barHit = (bar) => {\r\n    if (bar.h - 1 >= 0) {\r\n      bar.h = bar.h - 1;\r\n      score = score + bar.s;\r\n      setScore(score);\r\n    }\r\n    if (bar.h === 0) {\r\n      setLevelHealth(levelHealth - 1);\r\n      if (levelHealth - 1 === 0) {\r\n        setGameState(\"LevelUp\");\r\n      }\r\n    }\r\n  };\r\n  //colisions against corners count as double damage\r\n  const checkColision = (currBall) => {\r\n    if (currBall.x === 0 || currBall.x === cols) {\r\n      currBall.dirX = -currBall.dirX;\r\n    }\r\n    if (currBall.y === 0) {\r\n      currBall.dirY = -currBall.dirY;\r\n    } else if (currBall.y === rows * 2) {\r\n      setGameState(\"End\");\r\n    }\r\n    if (currBall.y + currBall.r === playerBar.y * 2) {\r\n      if (\r\n        currBall.x >= playerBar.x &&\r\n        currBall.x <= playerBar.x + playerBar.w\r\n      ) {\r\n        currBall.dirY = -currBall.dirY;\r\n      }\r\n    }\r\n    let bar;\r\n    for (let i = 0; i < currLevel.Bars; i++) {\r\n      bar = currLevel.Matrix[i];\r\n      if (bar.h > 0) {\r\n        //compare boundaries\r\n        if (\r\n          currBall.x + currBall.r >= bar.x &&\r\n          currBall.x - currBall.r <= bar.x + bar.w &&\r\n          currBall.y + currBall.r >= bar.y * 2 &&\r\n          currBall.y - currBall.r <= (bar.y + 1) * 2\r\n        ) {\r\n          //horizontal colision\r\n          if (\r\n            currBall.x + currBall.r > bar.x &&\r\n            currBall.x - currBall.r < bar.x + bar.w\r\n          ) {\r\n            currBall.dirY = -currBall.dirY;\r\n            barHit(bar);\r\n          }\r\n          //vertical colision\r\n          if (\r\n            currBall.y + currBall.r > bar.y * 2 &&\r\n            currBall.y - currBall.r < (bar.y + 1) * 2\r\n          ) {\r\n            currBall.dirX = -currBall.dirX;\r\n            barHit(bar);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  // for some reason, arc is coming out as ellipse instead of simple sphere\r\n  // rescaling on the Y axis used as fix, all values for ball on this axis must be doubled\r\n  const drawBall = (ctx, blockWidth, blockHeight, currBall) => {\r\n    ctx.fillStyle = \"#FFFFFF\";\r\n    ctx.scale(1, 0.5);\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      currBall.x * blockWidth,\r\n      currBall.y * blockHeight,\r\n      currBall.r * blockWidth,\r\n      0,\r\n      Math.PI * 2,\r\n    );\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    ctx.scale(1, 2);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    let blockWidth = context.canvas.width / cols;\r\n    let blockHeight = context.canvas.height / rows;\r\n    let animationFrameId;\r\n    switch (gameState) {\r\n      case \"Play\":\r\n        clearDraws(context);\r\n        drawPlayerBar(context, blockWidth, blockHeight);\r\n        drawLevel(context, blockWidth, blockHeight);\r\n        ball.x = ball.x + ball.dirX;\r\n        ball.y = ball.y + ball.dirY;\r\n        checkColision(ball);\r\n        drawBall(context, blockWidth, blockHeight, ball);\r\n        setTimeout(() => {\r\n          setFrameCount(frameCount + 1);\r\n        }, [frameRate]);\r\n        break;\r\n      case \"Pause\":\r\n        drawPauseGame(context, blockWidth, blockHeight);\r\n        break;\r\n      case \"End\":\r\n        drawGameOver(context, blockWidth, blockHeight);\r\n        break;\r\n      case \"Restart\":\r\n        setMaps(JSON.parse(JSON.stringify(LevelsJSON)));\r\n        setGameLevel(0);\r\n        setCurrLevel(Maps[gameLevel]);\r\n        setLevelHealth(currLevel.Bars);\r\n        setBall(Object.create(defaultBall));\r\n        setPlayerBar(Object.create(defaultPlayerBar));\r\n        setScore(0);\r\n        setFrameCount(1);\r\n        setGameState(\"Play\");\r\n        break;\r\n      case \"LevelUp\":\r\n        if (gameLevel + 1 === 3) {\r\n          setGameState(\"Win\");\r\n        } else {\r\n          drawLevelUp(context, blockWidth, blockHeight, 4);\r\n          setTimeout(() => {\r\n            clearDraws(context, blockWidth, blockHeight);\r\n            drawLevelUp(context, blockWidth, blockHeight, 3);\r\n          }, [1000]);\r\n          setTimeout(() => {\r\n            drawLevelUp(context, blockWidth, blockHeight, 2);\r\n          }, [2000]);\r\n          setTimeout(() => {\r\n            drawLevelUp(context, blockWidth, blockHeight, 1);\r\n          }, [3000]);\r\n          setTimeout(() => {\r\n            setGameLevel(gameLevel + 1);\r\n            setCurrLevel(Maps[gameLevel + 1]);\r\n            setLevelHealth(currLevel.Bars);\r\n            setBall(Object.create(defaultBall));\r\n            clearDraws(context);\r\n            drawLevel(context, blockWidth, blockHeight);\r\n            setGameState(\"Play\");\r\n          }, [4000]);\r\n        }\r\n        break;\r\n      case \"Win\":\r\n        setCurrLevel(Maps[3]);\r\n        drawWinGame(context, blockWidth, blockHeight);\r\n        drawPlayerBar(context, blockWidth, blockHeight);\r\n        handleFireworks(context, blockWidth, blockHeight);\r\n        setTimeout(() => {\r\n          setWinFrameCount(winFrameCount + 1);\r\n        }, [frameRate]);\r\n        break;\r\n      default:\r\n        clearDraws(context);\r\n        break;\r\n    }\r\n    scoreboard.time = Math.floor(frameCount / frequency);\r\n    scoreboard.score = score;\r\n    scoreboard.gameState = gameState;\r\n    updateScoreboard(scoreboard);\r\n    const render = () => {\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    };\r\n    render();\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [frameCount, winFrameCount, gameState]);\r\n\r\n  return <canvas ref={canvasRef}></canvas>;\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Controls from \"../../Controls/Keyboard.js\";\r\n\r\nconst frequency = 4; //Hertz\r\nconst frameRate = 1000 / frequency; // frames / milisecond\r\n\r\nconst Snake = ({ controls, updateScoreboard, isSelected, gameState, setGameState }) => {\r\n  const rows = 30;\r\n  const cols = 30;\r\n  let canvasRef = useRef(null);\r\n  let [fruit, setFruit] = useState(false);\r\n  let [fruitPos] = useState({ x: 0, y: 0 });\r\n  let [score, setScore] = useState(0);\r\n  let [snakeHeadPos] = useState({\r\n    direction: \"right\",\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  let [previousDir, setPreviousDir] = useState(\"right\");\r\n  let [snakeBody, setSnakeBody] = useState({ x: [], y: [] });\r\n  let [initialPos, setInitialPos] = useState(false);\r\n  const scoreboard = { time: 0, score: 0, gameState: \"Start\" };\r\n\r\n  useEffect(() => {\r\n    if (controls.pause) {\r\n      if (controls.pause) {\r\n        if (gameState === \"Play\") {\r\n          setGameState(\"Pause\");\r\n        } else if (gameState === \"Pause\") {\r\n          setGameState(\"Play\");\r\n        } else if (\r\n          gameState === \"Win\" ||\r\n          gameState === \"End\" ||\r\n          gameState === \"Start\"\r\n        ) {\r\n          setGameState(\"Restart\");\r\n        }\r\n      }\r\n    }\r\n    if (snakeBody.x[0] === undefined) {\r\n      if (controls.up) {\r\n        snakeHeadPos.direction = \"up\";\r\n      } else if (controls.down) {\r\n        snakeHeadPos.direction = \"down\";\r\n      } else if (controls.left) {\r\n        snakeHeadPos.direction = \"left\";\r\n      } else if (controls.right) {\r\n        snakeHeadPos.direction = \"right\";\r\n      }\r\n    } else {\r\n      if (controls.up && previousDir !== \"down\") {\r\n        snakeHeadPos.direction = \"up\";\r\n      } else if (controls.down && previousDir !== \"up\") {\r\n        snakeHeadPos.direction = \"down\";\r\n      } else if (controls.left && previousDir !== \"right\") {\r\n        snakeHeadPos.direction = \"left\";\r\n      } else if (controls.right && previousDir !== \"left\") {\r\n        snakeHeadPos.direction = \"right\";\r\n      }\r\n    }\r\n  }, [controls]);\r\n\r\n  const drawBoard = (ctx, canvasWidth, canvasHeight) => {\r\n    ctx.fillStyle = \"#000000\";\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n  };\r\n\r\n  const drawFruit = (ctx, blockWidth, blockHeight) => {\r\n    let newX, newY;\r\n    let overlapX,\r\n      overlapY = false;\r\n    if (!fruit) {\r\n      fruitPos.x = Math.floor(Math.random() * cols);\r\n      fruitPos.y = Math.floor(Math.random() * rows);\r\n      if (snakeBody.x[0] === undefined) {\r\n        while (fruitPos.x === snakeHeadPos.x && fruitPos.y === snakeHeadPos.y) {\r\n          fruitPos.x = Math.floor(Math.random() * cols);\r\n          fruitPos.y = Math.floor(Math.random() * rows);\r\n        }\r\n      } else {\r\n        for (let i = 0; i < snakeBody.x.length; i++) {\r\n          if (fruitPos.x === snakeBody.x[i]) {\r\n            overlapX = true;\r\n          }\r\n          if (fruitPos.y === snakeBody.y[i]) {\r\n            overlapY = true;\r\n          }\r\n        }\r\n        while (overlapX === true && overlapY === true) {\r\n          fruitPos.x = Math.floor(Math.random() * cols);\r\n          fruitPos.y = Math.floor(Math.random() * rows);\r\n          let flagX = false;\r\n          let flagY = false;\r\n          for (let i = 0; i < snakeBody.x.length; i++) {\r\n            if (fruitPos.x === snakeBody.x[i]) {\r\n              flagX = true;\r\n            }\r\n            if (fruitPos.y === snakeBody.y[i]) {\r\n              flagY = true;\r\n            }\r\n          }\r\n          overlapX = flagX;\r\n          overlapY = flagY;\r\n        }\r\n      }\r\n      newX = fruitPos.x;\r\n      newY = fruitPos.y;\r\n      setFruit(true);\r\n    } else {\r\n      newX = fruitPos.x;\r\n      newY = fruitPos.y;\r\n    }\r\n    ctx.fillStyle = \"#00FF00\";\r\n    ctx.fillRect(\r\n      newX * blockWidth,\r\n      newY * blockHeight,\r\n      blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n\r\n  const drawSnakeHead = (ctx, blockWidth, blockHeight) => {\r\n    let step = 1;\r\n    let newX, newY;\r\n    if (!initialPos) {\r\n      newX = 10 * blockWidth;\r\n      newY = 10 * blockHeight;\r\n      setInitialPos(true);\r\n      snakeHeadPos.x = 10;\r\n      snakeHeadPos.y = 10;\r\n    } else {\r\n      switch (snakeHeadPos.direction) {\r\n        case \"right\":\r\n          newX = snakeHeadPos.x + step;\r\n          newY = snakeHeadPos.y;\r\n          snakeHeadPos.x = snakeHeadPos.x + step;\r\n          break;\r\n        case \"left\":\r\n          newX = snakeHeadPos.x - step;\r\n          newY = snakeHeadPos.y;\r\n          snakeHeadPos.x = snakeHeadPos.x - step;\r\n          break;\r\n        case \"up\":\r\n          newX = snakeHeadPos.x;\r\n          newY = snakeHeadPos.y - step;\r\n          snakeHeadPos.y = snakeHeadPos.y - step;\r\n          break;\r\n        case \"down\":\r\n          newX = snakeHeadPos.x;\r\n          newY = snakeHeadPos.y + step;\r\n          snakeHeadPos.y = snakeHeadPos.y + step;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    setPreviousDir(snakeHeadPos.direction);\r\n    if (snakeBody.x[2] !== undefined) {\r\n      for (let i = 2; i < snakeBody.x.length; i++) {\r\n        if (\r\n          snakeBody.x[i] === snakeHeadPos.x &&\r\n          snakeBody.y[i] === snakeHeadPos.y\r\n        ) {\r\n          setGameState(\"End\");\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      snakeHeadPos.x >= rows ||\r\n      snakeHeadPos.x < 0 ||\r\n      snakeHeadPos.y < 0 ||\r\n      snakeHeadPos.y >= cols\r\n    ) {\r\n      setGameState(\"End\");\r\n    } else if (fruitPos.x === snakeHeadPos.x && fruitPos.y === snakeHeadPos.y) {\r\n      setFruit(false);\r\n      setScore(score + 1);\r\n      snakeBody.x.unshift(snakeHeadPos.x);\r\n      snakeBody.y.unshift(snakeHeadPos.y);\r\n    }\r\n    ctx.fillStyle = \"#00FFFF\";\r\n    ctx.fillRect(\r\n      newX * blockWidth,\r\n      newY * blockHeight,\r\n      blockWidth,\r\n      blockHeight,\r\n    );\r\n  };\r\n\r\n  const drawSnakeBody = (ctx, blockWidth, blockHeight) => {\r\n    for (let i = 0; i < snakeBody.x.length; i++) {\r\n      ctx.fillStyle = \"#00FFFF\";\r\n      ctx.fillRect(\r\n        snakeBody.x[i] * blockWidth,\r\n        snakeBody.y[i] * blockHeight,\r\n        blockWidth,\r\n        blockHeight,\r\n      );\r\n    }\r\n    snakeBody.x.unshift(snakeHeadPos.x);\r\n    snakeBody.y.unshift(snakeHeadPos.y);\r\n    snakeBody.x.pop();\r\n    snakeBody.y.pop();\r\n  };\r\n\r\n  const endGame = (ctx, blockWidth, blockHeight) => {\r\n    drawBoard(ctx, blockWidth, blockHeight);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"20px monospace\"; //I hate this\r\n    ctx.fillText(\"Game Over\", 5 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n  const pauseGame = (ctx, blockWidth, blockHeight) => {\r\n    drawBoard(ctx, blockWidth, blockHeight);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.font = \"20px monospace\"; //I hate this\r\n    ctx.fillText(\"Paused\", 8 * blockWidth, 17 * blockHeight, 500);\r\n  };\r\n\r\n  let [frameCount, setFrameCount] = useState(0);\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    let blockWidth = context.canvas.width / cols;\r\n    let blockHeight = context.canvas.height / rows;\r\n    let animationFrameId;\r\n    if (gameState === \"Play\") {\r\n      drawBoard(context, context.canvas.width, context.canvas.height);\r\n      drawFruit(context, blockWidth, blockHeight);\r\n      drawSnakeHead(context, blockWidth, blockHeight);\r\n      drawSnakeBody(context, blockWidth, blockHeight);\r\n      setTimeout(() => {\r\n        setFrameCount(frameCount + 1);\r\n      }, [1000 / (score / 2 + frequency)]);\r\n    } else if (gameState === \"Pause\") {\r\n      pauseGame(context, blockWidth, blockHeight);\r\n    } else if (gameState === \"End\") {\r\n      drawBoard(context, context.canvas.width, context.canvas.height);\r\n      endGame(context, blockWidth, blockHeight);\r\n    } else if (gameState === \"Restart\") {\r\n      setGameState(\"Play\");\r\n      setFrameCount(1);\r\n      setFruit(false);\r\n      setInitialPos(false);\r\n      setScore(0);\r\n      setSnakeBody({ x: [], y: [] });\r\n    }\r\n    scoreboard.time = Math.floor(frameCount / (score / 2 + frequency));\r\n    scoreboard.score = score;\r\n    scoreboard.gameState = gameState;\r\n    updateScoreboard(scoreboard);\r\n    const render = () => {\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    };\r\n    render();\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [frameCount, gameState]);\r\n\r\n  return <canvas height=\"150\" width=\"150\" ref={canvasRef}></canvas>;\r\n};\r\nexport default Snake;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Maps from \"./Maps.json\";\r\nimport Controls from \"../../Controls/Keyboard.js\";\r\n\r\nconst frequency = 60; //Hertz\r\nconst frameRate = 1000 / frequency; // frames / milisecond\r\nconst rows = 150;\r\nconst cols = 300;\r\nconst blockSize = 10;\r\nconst defaultInvaderOne = {\r\n    id: 1,\r\n    x: 10,\r\n    y: 10,\r\n    row: 0,\r\n    life: 1,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 10,\r\n    h: 10,\r\n    hit: false,\r\n    color: \"green\",\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n        ],\r\n        2: [\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 0, 1, 0, 1, 1, 0, 1, 0, 0],\r\n            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],\r\n            [0, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n        ]\r\n    }\r\n}\r\nconst defaultInvaderTwo = {\r\n    id: 2,\r\n    x: 10,\r\n    y: 10,\r\n    row: 0,\r\n    life: 2,\r\n    hit: false,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"red\",\r\n    sprites: {\r\n        1: [\r\n            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0],\r\n        ],\r\n        2: [\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],\r\n        ]\r\n    }\r\n}\r\nconst defaultInvaderThree = {\r\n    id: 3,\r\n    x: 10,\r\n    y: 10,\r\n    row: 0,\r\n    life: 3,\r\n    hit: false,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"cyan\",\r\n    sprites: {\r\n        1: [\r\n            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 0, 1, 1, 1, 1, 1, 1, 0, 1],\r\n            [1, 0, 1, 0, 1, 1, 0, 1, 0, 1],\r\n            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n        ],\r\n        2: [\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n            [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 0, 1, 1, 1, 1, 1, 1, 0, 1],\r\n            [1, 0, 1, 0, 1, 1, 0, 1, 0, 1],\r\n            [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n        ]\r\n    }\r\n}\r\nconst defaultBonusInvader = {\r\n    id: 8,\r\n    x: 10,\r\n    y: 10,\r\n    life: 1,\r\n    hit: false,\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    w: 20,\r\n    h: 10,\r\n    color: \"magenta\",\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],\r\n        ],\r\n        2: [\r\n            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],\r\n\r\n        ]\r\n    }\r\n}\r\nconst defaultPlayer = {\r\n    id: 10,\r\n    x: 10,\r\n    y: 130,\r\n    speed: 2,\r\n    move: \"none\",\r\n    shooting: false,\r\n    cooling: 0,\r\n    currSprite: 1,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"white\",\r\n    cooldown: 250, //milliseconds\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\r\n        ]\r\n    },\r\n}\r\nconst defaultBlock = {\r\n    id: 9,\r\n    x: 10,\r\n    y: 10,\r\n    currSprite: 1,\r\n    w: 10,\r\n    h: 10,\r\n    color: \"gray\",\r\n    sprites: {\r\n        1: [\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\r\n            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\r\n        ]\r\n    },\r\n}\r\nconst defaultPlayerBullet = {\r\n    id: \"player\",\r\n    x: 10,\r\n    y: 10,\r\n    h: 9,\r\n    w: 2,\r\n    speed: 5,\r\n    color: \"white\",\r\n    currSprite: 1,\r\n    totalSprites: 2,\r\n    sprites: {\r\n        1: [\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n        ],\r\n        2: [\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, 1],\r\n        ]\r\n    }\r\n}\r\nconst defaultInvaderBullet = {\r\n    id: \"invader\",\r\n    x: 10,\r\n    y: 10,\r\n    currSprite: 1,\r\n    totalSprites: 1,\r\n    w: 2,\r\n    h: 9,\r\n    speed: 2,\r\n    color: \"yellow\",\r\n    sprites: {\r\n        1: [\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n            [1, 1],\r\n        ]\r\n    },\r\n}\r\n\r\nexport default function SpaceInvaders({ controls, updateScoreboard, isSelected, gameState, setGameState }) {\r\n\r\n    const canvasRef = useRef(null);\r\n    const [score, setScore] = useState(0);\r\n    const [lives, setLives] = useState(3);\r\n    const [level, setLevel] = useState(1);\r\n    const [frameCount, setFrameCount] = useState(0);\r\n    const [enemies, setEnemies] = useState(0);\r\n    const [enemyMoveParam, setEnemyMoveParam] = useState({\r\n        index: 0,\r\n        rows: [],\r\n    });\r\n    const [entities, setEntities] = useState([]);\r\n    const [bullets, setBullets] = useState([]);\r\n    const [explosions, setExplosions] = useState([]);\r\n    const explosionLifetime = 500;\r\n    //let entities = [];\r\n    //let bullets = [];\r\n    let [player, setPlayer] = useState(Object.create(defaultPlayer));\r\n    const scoreboard = { time: 0, score: 0, gameState: \"Start\" };\r\n    const invaderSpeed = 1;\r\n\r\n    //Player controls\r\n    useEffect(() => {\r\n        if (controls.pause) {\r\n            switch (gameState) {\r\n                case \"Play\":\r\n                    setGameState(\"Pause\");\r\n                    break;\r\n                case \"Pause\":\r\n                    setGameState(\"Play\");\r\n                    break;\r\n                case \"Win\":\r\n                case \"End\":\r\n                case \"Start\":\r\n                    setGameState(\"Restart\");\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        if (gameState === \"Play\") {\r\n            if (\r\n                controls.left &&\r\n                !controls.right\r\n            ) {\r\n                player.move = \"left\";\r\n            } else if (\r\n                controls.right &&\r\n                !controls.left\r\n            ) {\r\n                player.move = \"right\";\r\n            } else if (controls.left && controls.right\r\n            ) {\r\n                player.move = \"none\";\r\n            }else if( !controls.left && !controls.right){\r\n                player.move = \"none\";\r\n            }\r\n            if (controls.up) {\r\n                player.shooting = true;\r\n            } else if (!controls.up) {\r\n                player.shooting = false;\r\n            }\r\n        }\r\n    }, [controls]);\r\n\r\n    //Drawing functions\r\n    const clearDraws = (ctx) => {\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    };\r\n    const drawSprite = (ctx, object) => {\r\n        if (object.hit === true) {\r\n            ctx.fillStyle = \"white\";\r\n        } else {\r\n            ctx.fillStyle = object.color;\r\n        }\r\n        for (let i = 0; i < object.sprites[object.currSprite].length; i++) {\r\n            for (let j = 0; j < object.sprites[object.currSprite][i].length; j++) {\r\n                if (object.sprites[object.currSprite][i][j] === 1) {\r\n                    ctx.fillRect(object.x + j, object.y + i, 1, 1);\r\n                }\r\n            }\r\n        }\r\n        if (object.sprites.length > 1) {\r\n            if (object.currSprite < object.sprites.length - 1) {\r\n                object.currSprite++;\r\n            } else {\r\n                object.currSprite = 1;\r\n            }\r\n        }\r\n    }\r\n    const drawExplosions = (ctx) => {\r\n        let redshift = 0;\r\n        let greenshift = 0;\r\n        let blueshift = 0;\r\n        if (explosions.length > 0) {\r\n            for (let i = 0; i < explosions.length; i++) {\r\n                if (explosions[i].decay <= explosionLifetime / 3) {\r\n                    redshift = Math.floor((explosions[i].decay) * 255 / (explosionLifetime / 3));\r\n                } else if (explosions[i].decay <= explosionLifetime * 2 / 3) {\r\n                    redshift = 255;\r\n                    greenshift = Math.floor((explosions[i].decay - explosionLifetime / 3) * 255 / (explosionLifetime / 3));\r\n                } else {\r\n                    redshift = 255;\r\n                    greenshift = 255;\r\n                    blueshift = Math.floor((explosions[i].decay - explosionLifetime * 2 / 3) * 255 / (explosionLifetime / 3));\r\n                }\r\n                ctx.fillStyle = \"rgb(\" + redshift + \",\" + greenshift + \",\" + blueshift + \")\";\r\n                let spread = 2 * explosions[i].decay / (explosionLifetime + explosions[i].decay);\r\n                let radius = explosions[i].w / 2 * spread - 10;\r\n                ctx.fillRect(explosions[i].x + radius * 2 / 3, explosions[i].y + radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x - radius * 2 / 3, explosions[i].y + radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x + radius * 2 / 3, explosions[i].y - radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x - radius * 2 / 3, explosions[i].y - radius * 2 / 3, 2, 2);\r\n                ctx.fillRect(explosions[i].x + radius, explosions[i].y, 2, 2);\r\n                ctx.fillRect(explosions[i].x - radius, explosions[i].y, 2, 2);\r\n                ctx.fillRect(explosions[i].x, explosions[i].y + radius, 2, 2);\r\n                ctx.fillRect(explosions[i].x, explosions[i].y - radius, 2, 2);\r\n            }\r\n\r\n        }\r\n    }\r\n    const drawGameOver = (ctx, blockWidth, blockHeight) => {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"40px monospace\"; //change this nonsense static font size\r\n        ctx.fillText(\"Game Over\", 5 * blockWidth, 8 * blockHeight, 500);\r\n    };\r\n    const drawPauseGame = (ctx, blockWidth, blockHeight) => {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"40px monospace\"; //and this\r\n        ctx.fillText(\"Paused\", 8 * blockWidth, 8 * blockHeight, 500);\r\n    };\r\n    const drawWinGame = (ctx, blockWidth, blockHeight) => {\r\n        clearDraws(ctx);\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"40px monospace\";\r\n        ctx.fillText(\"You Win\", 7 * blockWidth, 8 * blockHeight, 500);\r\n    };\r\n    const drawBottomText = (ctx, blockWidth, blockHeight) => {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.font = \"10px monospace\";\r\n        ctx.fillText(\"LIFE:\" + lives, blockWidth / 2, rows - blockHeight / 4, 500);\r\n    }\r\n    const drawObjects = (context) => {\r\n        for (let i = 0; i < entities.length; i++) {\r\n            drawSprite(context, entities[i]);\r\n        }\r\n        for (let i = 0; i < bullets.length; i++) {\r\n            drawSprite(context, bullets[i]);\r\n        }\r\n        drawSprite(context, player);\r\n        drawExplosions(context);\r\n    }\r\n    //Game functions\r\n    const setUpLevel = () => {\r\n        let currEntity = {};\r\n        let newEntities = [];\r\n        let newEnemyMoveParam = { index: 0, rows: [] };\r\n        for (let i = 0; i < Maps[level].Matrix.length; i++) {\r\n            for (let j = 0; j < Maps[level].Matrix[i].length; j++) {\r\n                switch (Maps[level].Matrix[i][j]) {\r\n                    case 1:\r\n                        currEntity = Object.create(defaultInvaderOne);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 15 + i * blockSize * 1.2;\r\n                        currEntity.row = i;\r\n                        newEntities.push(currEntity);\r\n                        if (newEnemyMoveParam.rows[i] === undefined) {\r\n                            newEnemyMoveParam.rows.push(\"right\");\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        currEntity = Object.create(defaultInvaderTwo);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 15 + i * blockSize * 1.2;\r\n                        currEntity.row = i;\r\n                        newEntities.push(currEntity);\r\n                        if (newEnemyMoveParam.rows[i] === undefined) {\r\n                            newEnemyMoveParam.rows.push(\"right\");\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        currEntity = Object.create(defaultInvaderThree);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 15 + i * blockSize * 1.2;\r\n                        currEntity.row = i;\r\n                        newEntities.push(currEntity);\r\n                        if (newEnemyMoveParam.rows[i] === undefined) {\r\n                            newEnemyMoveParam.rows.push(\"right\");\r\n                        }\r\n                        break;\r\n                    case 9:\r\n                        currEntity = Object.create(defaultBlock);\r\n                        currEntity.x = j * blockSize * 1.2;\r\n                        currEntity.y = 5 + i * blockSize * 1.2;\r\n                        newEntities.push(currEntity);\r\n                        break;\r\n                    case 0:\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        setEnemies(Maps[level].Enemies);\r\n        setEntities(newEntities);\r\n        setEnemyMoveParam(newEnemyMoveParam);\r\n    }\r\n    const playerMove = () => {\r\n        if (player.move === \"left\" &&\r\n            player.x + player.w > player.w) {\r\n            player.x = player.x - player.speed;\r\n        } else if (player.move === \"right\" &&\r\n            player.x + player.w < cols) {\r\n            player.x = player.x + player.speed;\r\n        }\r\n    }\r\n    const invaderMove = () => {\r\n        if (enemyMoveParam.index >= enemies) {\r\n            enemyMoveParam.index = 0;\r\n        }\r\n        switch (enemyMoveParam.rows[entities[enemyMoveParam.index].row]) {\r\n            case \"left\":\r\n                if (entities[enemyMoveParam.index].x > 2) {\r\n                    entities[enemyMoveParam.index].x = entities[enemyMoveParam.index].x - invaderSpeed;\r\n                }\r\n                else {\r\n                    enemyMoveParam.rows[entities[enemyMoveParam.index].row] = \"right\";\r\n                    entities[enemyMoveParam.index].x = entities[enemyMoveParam.index].x + invaderSpeed;\r\n                }\r\n                break;\r\n            case \"right\":\r\n                if (entities[enemyMoveParam.index].x + entities[enemyMoveParam.index].w < cols - 1) {\r\n                    entities[enemyMoveParam.index].x = entities[enemyMoveParam.index].x + invaderSpeed;\r\n                }\r\n                else {\r\n                    enemyMoveParam.rows[entities[enemyMoveParam.index].row] = \"left\";\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (entities[enemyMoveParam.index].currSprite < entities[enemyMoveParam.index].totalSprites) {\r\n            entities[enemyMoveParam.index].currSprite = entities[enemyMoveParam.index].currSprite + 1;\r\n        } else {\r\n            entities[enemyMoveParam.index].currSprite = 1;\r\n        }\r\n        enemyMoveParam.index++;\r\n        //console.log(entities[enemyMoveParam.index].sprites.length);\r\n        for (let i = 0; i < entities.length; i++) {\r\n            if (entities[i].id === 8) {\r\n                if (entities[i].x + entities[i].w > 0 && entities[i].x < cols) {\r\n                    entities[i].x = entities[i].x + entities[i].speed;\r\n                    if (entities[i].currSprite < entities[i].totalSprites) {\r\n                        entities[i].currSprite = entities[i].currSprite + 1;\r\n                    } else {\r\n                        entities[i].currSprite = 1;\r\n                    }\r\n                } else {\r\n                    entities.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        setEntities(entities);\r\n        setEnemyMoveParam(enemyMoveParam);\r\n    }\r\n    const spawnBonusInvader = () => {\r\n        let newEntity = Object.create(defaultBonusInvader);\r\n        let side = Math.random();\r\n        if (side > 0.5) {\r\n            newEntity.x = 0;\r\n            newEntity.speed = invaderSpeed;\r\n        } else {\r\n            newEntity.x = cols - newEntity.w;\r\n            newEntity.speed = -invaderSpeed;\r\n        }\r\n        newEntity.y = 2;\r\n        entities.push(newEntity);\r\n        setEntities(entities);\r\n    }\r\n    const createExplosion = (target) => {\r\n        let newExplosion = {\r\n            x: target.x + target.w / 2 - 1,\r\n            y: target.y + target.h / 2 - 1,\r\n            w: target.w,\r\n            h: target.h,\r\n            decay: explosionLifetime\r\n        }\r\n        explosions.push(newExplosion);\r\n        setExplosions(explosions);\r\n    }\r\n    const playerShooting = () => {\r\n        let newBullet = {};\r\n        if (player.shooting === true &&\r\n            player.cooling === 0) {\r\n            newBullet = Object.create(defaultPlayerBullet);\r\n            newBullet.x = player.x - 1 + player.w / 2;\r\n            newBullet.y = player.y;\r\n            bullets.push(newBullet);\r\n            player.cooling = player.cooldown;\r\n            setTimeout(() => {\r\n                player.cooling = 0;\r\n            }, [player.cooldown]);\r\n            setBullets(bullets);\r\n        }\r\n    }\r\n    const invaderShooting = () => {\r\n        let newBullet = {};\r\n        let chance = Math.random();\r\n        let invaderShooter = Math.floor(Math.random() * enemies);\r\n        if (chance > 0.95) {\r\n            newBullet = Object.create(defaultInvaderBullet);\r\n            newBullet.x = entities[invaderShooter].x + player.w / 2;\r\n            newBullet.y = entities[invaderShooter].y;\r\n            bullets.push(newBullet);\r\n            setBullets(bullets);\r\n        }\r\n    }\r\n    const playerHit = () => {\r\n        if (lives - 1 >= 0) {\r\n            setLives(lives - 1);\r\n            createExplosion(player);\r\n        } else {\r\n            setGameState(\"End\");\r\n        }\r\n    }\r\n    const invaderHit = (invaderIndex) => {\r\n        if (entities[invaderIndex].life - 1 > 0) {\r\n            entities[invaderIndex].life = entities[invaderIndex].life - 1;\r\n            entities[invaderIndex].hit = true;\r\n            setScore(score + 5);\r\n            setTimeout(() => {\r\n                entities[invaderIndex].hit = false;\r\n            }, [player.cooldown / 2]);\r\n        } else {\r\n            createExplosion(entities[invaderIndex]);\r\n            if (entities[invaderIndex].id !== 8) {\r\n                setEnemies(enemies - 1);\r\n                setScore(score + 10);\r\n            } else {\r\n                setScore(score + 150);\r\n            }\r\n            entities.splice(invaderIndex, 1);\r\n        }\r\n        setEntities(entities);\r\n    }\r\n    const blockHit = (blockIndex) => {\r\n        createExplosion(entities[blockIndex]);\r\n        //entities.splice(blockIndex, 1);\r\n        //setEntities(entities);\r\n    }\r\n    const checkColisions = (bulletIndex) => {\r\n        let colision = false;\r\n        for (let i = 0; i < entities.length; i++) {\r\n            if (bullets[bulletIndex].id === \"player\") {\r\n                if (bullets[bulletIndex].x > entities[i].x &&\r\n                    bullets[bulletIndex].x < entities[i].x + entities[i].w &&\r\n                    bullets[bulletIndex].y > entities[i].y &&\r\n                    bullets[bulletIndex].y < entities[i].y + entities[i].h) {\r\n                    colision = true;\r\n                    if (entities[i].id === 9) {\r\n                        blockHit(i);\r\n                    } else {\r\n                        invaderHit(i);\r\n                    }\r\n                }\r\n            } else {\r\n                if (bullets[bulletIndex].x > player.x &&\r\n                    bullets[bulletIndex].x < player.x + player.w &&\r\n                    bullets[bulletIndex].y > player.y - player.h &&\r\n                    bullets[bulletIndex].y < player.y) {\r\n                    colision = true;\r\n                    playerHit();\r\n                } else if (bullets[bulletIndex].x > entities[i].x &&\r\n                    bullets[bulletIndex].x < entities[i].x + entities[i].w &&\r\n                    bullets[bulletIndex].y > entities[i].y - entities[i].h &&\r\n                    bullets[bulletIndex].y < entities[i].y &&\r\n                    entities[i].id === 9) {\r\n                    colision = true;\r\n                    blockHit(i);\r\n                }\r\n            }\r\n        }\r\n        return colision;\r\n    }\r\n    const handleBullets = () => {\r\n        let newArray = [];\r\n        if (bullets.length > 0) {\r\n            //console.log(bullets);\r\n            for (let i = 0; i < bullets.length; i++) {\r\n                if (!checkColisions(i)) {\r\n                    if (bullets[i].id === \"player\") {\r\n                        if (bullets[i].y > 0) {\r\n                            bullets[i].y -= bullets[i].speed;\r\n                            if (bullets[i].currSprite < bullets[i].totalSprites) {\r\n                                bullets[i].currSprite = bullets[i].currSprite + 1;\r\n                            } else {\r\n                                bullets[i].currSprite = 1;\r\n                            }\r\n                            newArray.push(bullets[i]);\r\n                        }\r\n                    } else {\r\n                        if (bullets[i].y < rows) {\r\n                            bullets[i].y += bullets[i].speed;\r\n                            newArray.push(bullets[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            setBullets(newArray);\r\n        }\r\n    }\r\n    const handleExplosions = () => {\r\n        if (explosions.length > 0) {\r\n            for (let i = 0; i < explosions.length; i++) {\r\n                if (explosions[i].decay - frameRate > 0) {\r\n                    explosions[i].decay = explosions[i].decay - frameRate;\r\n                } else {\r\n                    explosions.splice(i, 1);\r\n                }\r\n            }\r\n            setExplosions(explosions);\r\n        }\r\n    }\r\n    const handleEvents = () => {\r\n        if ((frameCount * frameRate) % (1200 * frameRate) === 0) {\r\n            spawnBonusInvader();\r\n        }\r\n        playerShooting();\r\n        invaderShooting();\r\n        handleBullets();\r\n        handleExplosions();\r\n        playerMove();\r\n        invaderMove();\r\n    }\r\n\r\n    //Game Loop\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        let animationFrameId;\r\n        switch (gameState) {\r\n            case \"Play\":\r\n                if (lives >= 0 && enemies > 0) {\r\n                    clearDraws(context);\r\n                    handleEvents();\r\n                    drawObjects(context);\r\n                    drawBottomText(context, blockSize, blockSize);\r\n                    setTimeout(() => {\r\n                        setFrameCount(frameCount + 1);\r\n                    }, [frameRate]);\r\n                }\r\n                else if (lives < 0) {\r\n                    setGameState(\"End\");\r\n                }\r\n                else if (enemies === 0) {\r\n                    setGameState(\"Win\");\r\n                }\r\n                break;\r\n            case \"Pause\":\r\n                drawPauseGame(context, blockSize, blockSize);\r\n                break;\r\n            case \"Win\":\r\n                drawWinGame(context, blockSize, blockSize);\r\n                break;\r\n            case \"End\":\r\n                drawGameOver(context, blockSize, blockSize);\r\n                break;\r\n            case \"Start\":\r\n                //setUpLevel();\r\n                break;\r\n            case \"Restart\":\r\n                setLevel(1);\r\n                setScore(0);\r\n                setLives(3);\r\n                setExplosions([]);\r\n                setBullets([]);\r\n                setUpLevel();\r\n                setPlayer(Object.create(defaultPlayer));\r\n                setFrameCount(1);\r\n                setGameState(\"Play\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        scoreboard.time = Math.floor(frameCount / frequency);\r\n        scoreboard.score = score;\r\n        scoreboard.gameState = gameState;\r\n        updateScoreboard(scoreboard);\r\n        const render = () => {\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n        };\r\n        render();\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [gameState, frameCount]);\r\n\r\n    return <canvas ref={canvasRef} width={300} height={150}></canvas>;\r\n}","export const handleAction = (action, setAction, appDialog, setAppDialog, args) =>{\r\n    switch (action) {\r\n        case \"Keybinds\":\r\n            args.setShowKeybindDialog(!args.showKeybindDialog);\r\n            setAction(false);\r\n            break;\r\n        case \"Play / Pause\":\r\n            if(args.gameState === \"Play\"){\r\n                args.setGameState(\"Pause\");\r\n            }else if(args.gameState === \"Pause\"){\r\n                args.setGameState(\"Play\");\r\n            }\r\n            setAction(false);\r\n            break;\r\n        case \"New\":\r\n            args.setGameState(\"Restart\");\r\n            setAction(false);\r\n            break;\r\n        case \"scoreboard\":\r\n            args.setShowScoreboard(!args.showScoreboard);\r\n            setAction(false);\r\n            break;\r\n        case \"touchscreenControls\":{\r\n            args.setShowControls(!args.showControls);\r\n            setAction(false);\r\n            break;\r\n        }\r\n        case false:\r\n            break;\r\n        default:\r\n            setAction(false);\r\n            break;\r\n    }\r\n}","export const handleTopMenu = (appMenu, setAppMenu, args) => {\r\n    //Default App Menu  \r\n    const defaultAppMenu = {\r\n        \"Game\": {\r\n            \"New Game\": {\r\n                \"action\": \"New\",\r\n                \"keybind\": \"Alt+N\",\r\n                \"disabled\": true\r\n            },\r\n            \"Play / Pause\": {\r\n                \"action\": \"Play / Pause\",\r\n                \"keybind\": \"P\",\r\n                \"disabled\": true\r\n            },\r\n            \"LineBreak1\":{},\r\n            \"Keybinds\": {\r\n                \"action\": \"Keybinds\",\r\n                \"disabled\": false\r\n            },\r\n            \"LineBreak2\":{},\r\n            \"Close\": {\r\n                \"action\": \"Close\",\r\n                \"keybind\": \"Alt+Shift+F4\",\r\n                \"disabled\": false\r\n            }\r\n        },\r\n        \"View\": {\r\n            \"Scoreboard\": {\r\n                \"action\": \"scoreboard\",\r\n                \"checkbox\": true,\r\n                \"disabled\": false\r\n            },\r\n            \"Touchscreen Controls\": {\r\n                \"action\": \"touchscreenControls\",\r\n                \"checkbox\": true,\r\n                \"disabled\": false\r\n            }\r\n        },\r\n        \"Help\": {\r\n            \"Help\": {\r\n                \"action\": \"help\",\r\n                \"keybind\": \"F1\",\r\n                \"disabled\": true,\r\n                \"title\": \"Not Implemented\"\r\n            },\r\n            \"About\": {\r\n                \"action\": \"about\",\r\n                \"disabled\": true,\r\n                \"title\": \"Not Implemented\"\r\n            }\r\n        }\r\n    }\r\n    if (appMenu === null) {\r\n        setAppMenu(defaultAppMenu);\r\n    }\r\n    else {\r\n        let updatedAppMenu = { \r\n            ...appMenu,\r\n                    \"Game\": {\r\n                        ...appMenu[\"Game\"],\r\n                        \"New Game\": {\r\n                            ...appMenu[\"Game\"][\"New Game\"],\r\n                            \"disabled\": !args.gameChoice\r\n                        },\r\n                        \"Play / Pause\": {\r\n                            ...appMenu[\"Game\"][\"Play / Pause\"],\r\n                            \"disabled\": !args.gameChoice\r\n                        }\r\n                    },\r\n                    \"View\": {\r\n                        ...appMenu[\"View\"],\r\n                        \"Scoreboard\": {\r\n                            ...appMenu[\"View\"][\"Scoreboard\"],\r\n                            \"checkbox\": args.showScoreboard\r\n                        },\r\n                        \"Touchscreen Controls\": {\r\n                            ...appMenu[\"View\"][\"Touchscreen Controls\"],\r\n                            \"checkbox\": args.showControls\r\n                        }\r\n                    }\r\n         };\r\n        setAppMenu(updatedAppMenu);\r\n    }\r\n}","import { useState, useEffect } from \"react\";\r\nexport const KeybindDialog = ({ showKeybindDialog, setShowKeybindDialog, setAppDialog, keyboard, setKeyboard }) => {\r\n    const [newKeybinds, setNewKeybinds] = useState(structuredClone(keyboard));\r\n    const [keybindState, setKeybindState] = useState(\"\");\r\n    const [update, setUpdate] = useState(0);\r\n    const title = \"Keybinds\";\r\n    \r\n    const addNewKeybind = (key) => {\r\n        setKeybindState(\"Press new key...\");\r\n        const keyPromise = new Promise((resolve, reject) => {\r\n            document.addEventListener(\"keydown\", (e) => resolve(e.key));\r\n            setTimeout(() => {\r\n                document.removeEventListener(\"keydown\", (e) => resolve(e.key));\r\n                reject(\"timeout\");\r\n            }, 10000);\r\n        });\r\n        keyPromise.then((value) => {\r\n            newKeybinds[key].keys[newKeybinds[key].keys.length] = value;\r\n            setNewKeybinds(newKeybinds);\r\n            setKeybindState(\"\");\r\n        }).catch((error) => {\r\n            setKeybindState(error);\r\n        });\r\n    };\r\n    const changeKeybind = (key, index) => {\r\n        setKeybindState(\"Press new key...\");\r\n        const keyPromise = new Promise((resolve, reject) => {\r\n            document.addEventListener(\"keydown\", (e) => resolve(e.key));\r\n            setTimeout(() => {\r\n                document.removeEventListener(\"keydown\", (e) => resolve(e.key));\r\n                reject(\"timeout\");\r\n            }, 10000);\r\n        });\r\n        keyPromise.then((value) => {\r\n            newKeybinds[key].keys[index] = value;\r\n            setNewKeybinds(newKeybinds);\r\n            setKeybindState(\"\");\r\n        }).catch((error) => {\r\n            setKeybindState(error);\r\n        });\r\n    };\r\n    const removeKeybind = (key, index) => {\r\n        newKeybinds[key].keys.splice(index, 1);\r\n        setNewKeybinds(newKeybinds);\r\n        setUpdate(update + 1);\r\n    };\r\n    const info =\r\n        <div>\r\n            {Object.keys(newKeybinds).map((key) => (\r\n                <div key={key} style={{ display: \"flex\", flexDirection: \"row\", width: \"100%\", marginLeft: \"5px\" }}>\r\n                    <div style={{ width: \"55px\", height:\"30px\", display: \"flex\", justifyContent: \"start\", alignItems: \"center\", textAlign: \"center\" }}><b>{key}:</b></div>\r\n                    {newKeybinds[key].keys.map((keybind, index) =>\r\n                        <button\r\n                            key={key}\r\n                            style={{ width: \"75px\", height:\"30px\", border: \"1px solid dimgray\"}}\r\n                            onContextMenu={(e) => removeKeybind(key, index)}\r\n                            onClick={() => changeKeybind(key, index)}\r\n                        >{keybind}</button>\r\n                    )}\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                        {newKeybinds[key].keys.length < 3 &&\r\n                            <button onClick={() => addNewKeybind(key)}>+</button>}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            {keybindState}\r\n        </div>;\r\n\r\n    const actions = {\r\n        Confirm: () => {\r\n            setKeyboard(newKeybinds);\r\n            setShowKeybindDialog(false);\r\n            setAppDialog(null);\r\n        },\r\n        Reset: () => {\r\n            setNewKeybinds(keyboard);\r\n            setUpdate(update + 1);\r\n        },\r\n        Cancel: () => {\r\n            setNewKeybinds(keyboard);\r\n            setShowKeybindDialog(false);\r\n            setAppDialog(null);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (showKeybindDialog) {\r\n            setAppDialog({ title: title, info: info, actions: actions });\r\n        }\r\n    }, [showKeybindDialog, newKeybinds, keybindState, update]);\r\n    return <></>;\r\n}","import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  FaArrowLeft,\r\n  FaArrowRight,\r\n  FaArrowUp,\r\n  FaArrowDown,\r\n} from \"react-icons/fa\";\r\nimport { BsFillPlayFill, BsPauseFill } from \"react-icons/bs\";\r\nimport Controls from \"./Controls/Keyboard.js\";\r\nimport Breakout from \"./Games/Breakout/Breakout.js\";\r\nimport Snake from \"./Games/Snake/Snake.js\";\r\nimport SpaceInvaders from \"./Games/Space Invaders/SpaceInvaders.js\";\r\nimport { handleAction } from \"./Handlers/handleAction.js\";\r\nimport { handleTopMenu } from \"./Handlers/handleTopMenu.js\";\r\nimport { KeybindDialog } from \"./Components/KeybindDialog.jsx\";\r\nimport \"./style.css\";\r\n\r\nexport default function Arcade({ isSelected, action, setAction, appMenu, setAppMenu, appDialog, setAppDialog, contextMenu }) {\r\n  const canvasContainer = useRef();\r\n  const [keyboard, setKeyboard] = useState({\r\n    up: { keys: [\"w\", \"W\", \"ArrowUp\"], active: true },\r\n    down: { keys: [\"s\", \"S\", \"ArrowDown\"], active: true },\r\n    left: { keys: [\"a\", \"A\", \"ArrowLeft\"], active: true },\r\n    right: { keys: [\"d\", \"D\", \"ArrowRight\"], active: true },\r\n    one: { keys: [\"1\"], active: false },\r\n    two: { keys: [\"2\"], active: false },\r\n    pause: { keys: [\"p\", \"P\", \"Pause\"], active: true },\r\n  });\r\n  const controls = Controls(isSelected, keyboard);\r\n  const [gameState, setGameState] = useState(\"Start\");\r\n  const [gameChoice, setGameChoice] = useState(\"None\");\r\n  const [playButtonFlag, setPlayButtonFlag] = useState(true);\r\n  const [showControls, setShowControls] = useState(true);\r\n  const [showScoreboard, setShowScoreboard] = useState(true);\r\n  const [showKeybindDialog, setShowKeybindDialog] = useState(false);\r\n  const [scoreboard, setScoreboard] = useState({\r\n    time: 0,\r\n    score: 0,\r\n    gameState: \"Start\",\r\n  });\r\n  const updateScoreboard = (scoreboard) => {\r\n    setScoreboard(scoreboard);\r\n  };\r\n\r\n  const handleScreenButton = (key, state, repeat) => {\r\n    document.dispatchEvent(new KeyboardEvent(state, { key: keyboard[key].keys[0], repeat: repeat }),)\r\n  };\r\n\r\n  const handleContextMenu = (event, target) => {\r\n    let content = {};\r\n    event.preventDefault();\r\n    if (target === \"keypad\") {\r\n      content = {\r\n        \"Hide\": {action: () => { setShowControls(false);} },\r\n      }\r\n    } else if (target === \"scoreboard\") {\r\n      content = {\r\n        \"Hide\": {action: () => { setShowScoreboard(false);} },\r\n      }\r\n    } else if (target === \"canvas\") {\r\n      if (gameChoice !== \"None\") {\r\n        let playpause = gameState === \"Play\" ? \"Pause\" : \"Play\";\r\n        content = {\r\n          \"Play/Pause\": {action: () => { setGameState(playpause);} },\r\n          \"New Game\": {action: () => { setGameState(\"Restart\");} },\r\n        }\r\n      }\r\n    }\r\n    contextMenu.setOpen();\r\n    contextMenu.setPosition(event.clientX, event.clientY);\r\n    contextMenu.setContent(content);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (gameState === \"Play\") {\r\n      setPlayButtonFlag(false);\r\n    } else {\r\n      setPlayButtonFlag(true);\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    const args = {\r\n      gameState: gameState,\r\n      setGameState: setGameState,\r\n      showControls: showControls,\r\n      setShowControls: setShowControls,\r\n      showScoreboard: showScoreboard,\r\n      setShowScoreboard: setShowScoreboard,\r\n      showKeybindDialog: showKeybindDialog, \r\n      setShowKeybindDialog: setShowKeybindDialog\r\n    }\r\n    handleAction(action, setAction, appDialog, setAppDialog, args);\r\n  }, [action]);\r\n\r\n  useEffect(() => {\r\n    const args = {\r\n      gameState: gameState,\r\n      showControls: showControls,\r\n      showScoreboard: showScoreboard,\r\n      gameChoice: gameChoice\r\n    };\r\n    handleTopMenu(appMenu, setAppMenu, args);\r\n  }, [gameState, gameChoice, showControls, showScoreboard]);\r\n\r\n  return (\r\n    <div id=\"arcadeContainer\">\r\n      <select\r\n        id=\"gameMenu\"\r\n        onChange={(e) => {\r\n          setGameChoice(e.target.value);\r\n          setGameState(\"Start\");\r\n        }}\r\n      >\r\n        <option value=\"None\" >Select Game</option>\r\n        <option value=\"Snake\">Snake</option>\r\n        <option value=\"Breakout\">Breakout</option>\r\n        <option value=\"Space Invaders\">Space Invaders</option>\r\n      </select>\r\n      {showScoreboard &&\r\n        <div id=\"arcadeScoreboard\"\r\n          onContextMenu={(e) => handleContextMenu(e, \"scoreboard\")}\r\n        >\r\n          <div id=\"arcadeScore\">\r\n            Time: {scoreboard.time} seconds\r\n            <br />\r\n            Score: {scoreboard.score}\r\n            <br />\r\n          </div>\r\n          <div\r\n            id=\"arcadePlayButton\"\r\n            className=\"arcadeButton\"\r\n            onClick={() => {\r\n              handleScreenButton(\"pause\", \"keydown\", false);\r\n              setTimeout(() => handleScreenButton(\"pause\", \"keyup\", false), 50);\r\n            }}\r\n          >\r\n            {playButtonFlag ? <BsFillPlayFill /> : <BsPauseFill />}\r\n          </div>\r\n        </div>}\r\n      <div\r\n        id=\"arcadeCanvasContainer\"\r\n        ref={canvasContainer}\r\n        onContextMenu={(e) => handleContextMenu(e, \"canvas\")}\r\n      >\r\n        {gameChoice === \"Snake\" ? (\r\n          <Snake controls={controls} updateScoreboard={updateScoreboard} isSelected={isSelected} gameState={gameState} setGameState={setGameState} />\r\n        ) : gameChoice === \"Breakout\" ? (\r\n          <Breakout controls={controls} updateScoreboard={updateScoreboard} isSelected={isSelected} gameState={gameState} setGameState={setGameState} />\r\n        ) :\r\n          gameChoice === \"Space Invaders\" ? (\r\n            <SpaceInvaders controls={controls} updateScoreboard={updateScoreboard} isSelected={isSelected} gameState={gameState} setGameState={setGameState} />\r\n          ) : (\r\n            <></>\r\n          )}\r\n      </div>\r\n      {showControls &&\r\n        <div id=\"arcadeControls\"\r\n          onContextMenu={(e) => handleContextMenu(e, \"keypad\")}\r\n        >\r\n          <div\r\n            id=\"arcadeLeftButton\"\r\n            className={controls.left ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton\"}\r\n            onMouseDown={() => handleScreenButton(\"left\", \"keydown\", true)}\r\n            onMouseUp={() => handleScreenButton(\"left\", \"keyup\", true)}\r\n            onTouchStart={() => handleScreenButton(\"left\", \"keyup\", true)}\r\n            onTouchEnd={() => handleScreenButton(\"left\", \"keyup\", true)}\r\n          >\r\n            <FaArrowLeft />\r\n          </div>\r\n          <div id=\"arcadeVerticalControls\">\r\n            <div\r\n              id=\"arcadeUpButton\"\r\n              className={controls.up ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton\"}\r\n              onMouseDown={() => handleScreenButton(\"up\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"up\", \"keyup\", true)}\r\n              onTouchStart={() => handleScreenButton(\"up\", \"keyup\", true)}\r\n              onTouchEnd={() => handleScreenButton(\"up\", \"keyup\", true)}\r\n            >\r\n              <FaArrowUp />\r\n            </div>\r\n            <div\r\n              id=\"arcadeDownButton\"\r\n              className={controls.down ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton\"}\r\n              onMouseDown={() => handleScreenButton(\"down\", \"keydown\", true)}\r\n              onMouseUp={() => handleScreenButton(\"down\", \"keyup\", true)}\r\n              onTouchStart={() => handleScreenButton(\"down\", \"keyup\", true)}\r\n              onTouchEnd={() => handleScreenButton(\"down\", \"keyup\", true)}\r\n            >\r\n              <FaArrowDown />\r\n            </div>\r\n          </div>\r\n          <div\r\n            id=\"arcadeRightButton\"\r\n            className={controls.right ? \"arcadeButton arcadeButtonOn\" : \"arcadeButton\"}\r\n            onMouseDown={() => handleScreenButton(\"right\", \"keydown\", true)}\r\n            onMouseUp={() => handleScreenButton(\"right\", \"keyup\", true)}\r\n            onTouchStart={() => handleScreenButton(\"right\", \"keyup\", true)}\r\n            onTouchEnd={() => handleScreenButton(\"right\", \"keyup\", true)}\r\n          >\r\n            <FaArrowRight />\r\n          </div>\r\n        </div>}\r\n        <KeybindDialog\r\n          showKeybindDialog={showKeybindDialog}\r\n          setShowKeybindDialog={setShowKeybindDialog}\r\n          setAppDialog={setAppDialog}\r\n          keyboard={keyboard}\r\n          setKeyboard={setKeyboard}\r\n          />\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport default function Controls(isSelected, keyboard) {\r\n\r\n  var [command, setCommand] = useState({\r\n    up: false,\r\n    down: false,\r\n    left: false,\r\n    right: false,\r\n    one: false,\r\n    two: false,\r\n    pause: false,\r\n  });\r\n  const validateKey = useCallback(\r\n    (key, state) => {\r\n      const keyArray = Object.keys(keyboard);\r\n      for (let i = 0; i < keyArray.length; i++) {\r\n        let currKeyArray = keyboard[keyArray[i]].keys;\r\n        for (let j = 0; j < currKeyArray.length; j++) {\r\n          if (currKeyArray[j] === key) {\r\n            setCommand((c) => ({ ...c, [keyArray[i]]: state }));\r\n          }\r\n        }\r\n      }\r\n    },\r\n    [keyboard],\r\n  );\r\n\r\n  const handleKeyPress = useCallback(\r\n    (event) => {\r\n      validateKey(event.key, true);\r\n    },\r\n    [validateKey],\r\n  );\r\n  const handleKeyRelease = useCallback(\r\n    (event) => {\r\n      validateKey(event.key, false);\r\n    },\r\n    [validateKey],\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n    document.addEventListener(\"keyup\", handleKeyRelease);\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n      document.removeEventListener(\"keyup\", handleKeyRelease);\r\n    };\r\n  }, [handleKeyPress, handleKeyRelease]);\r\n\r\n  useEffect(() => {\r\n    if (!isSelected) {\r\n      setCommand({ ...command, pause: true });\r\n    }\r\n  }, [isSelected]);\r\n\r\n  return command;\r\n}\r\n"],"names":["frequency","frameRate","rows","cols","defaultPlayerBar","x","y","w","defaultBall","r","dirX","dirY","defaultFirework","t","color","Breakout","_ref","controls","updateScoreboard","isSelected","gameState","setGameState","canvasRef","useRef","Maps","setMaps","useState","JSON","parse","stringify","LevelsJSON","gameLevel","setGameLevel","currLevel","setCurrLevel","levelHealth","setLevelHealth","Bars","frameCount","setFrameCount","winFrameCount","setWinFrameCount","playerBar","setPlayerBar","Object","create","ball","setBall","firework1","firework2","firework3","firework4","firework5","firework6","firework7","scoreboard","time","score","setScore","useEffect","pause","left","right","clearDraws","ctx","fillStyle","fillRect","canvas","width","height","drawFirework","blockWidth","blockHeight","currBall","i","scale","beginPath","arc","Math","cos","PI","sin","fill","closePath","drawLevelUp","font","fillText","drawPlayerBar","newX","newY","drawHitbar","obj","h","drawLevel","Matrix","barHit","bar","s","checkColision","drawBall","context","current","getContext","animationFrameId","setTimeout","drawPauseGame","drawGameOver","drawWinGame","handleFireworks","currFirework","floor","random","render","window","requestAnimationFrame","cancelAnimationFrame","_jsx","ref","fruit","setFruit","fruitPos","snakeHeadPos","direction","previousDir","setPreviousDir","snakeBody","setSnakeBody","initialPos","setInitialPos","undefined","up","down","drawBoard","canvasWidth","canvasHeight","drawFruit","overlapX","overlapY","length","flagX","flagY","drawSnakeHead","unshift","drawSnakeBody","pop","pauseGame","endGame","blockSize","defaultInvaderOne","id","row","life","currSprite","totalSprites","hit","sprites","defaultInvaderTwo","defaultInvaderThree","defaultBonusInvader","defaultPlayer","speed","move","shooting","cooling","cooldown","defaultBlock","defaultPlayerBullet","defaultInvaderBullet","SpaceInvaders","lives","setLives","level","setLevel","enemies","setEnemies","enemyMoveParam","setEnemyMoveParam","index","entities","setEntities","bullets","setBullets","explosions","setExplosions","explosionLifetime","player","setPlayer","drawSprite","object","j","drawObjects","redshift","greenshift","blueshift","decay","spread","radius","drawExplosions","createExplosion","target","newExplosion","push","invaderHit","invaderIndex","splice","blockHit","blockIndex","checkColisions","bulletIndex","colision","handleEvents","spawnBonusInvader","newEntity","playerShooting","newBullet","invaderShooting","chance","invaderShooter","handleBullets","newArray","handleExplosions","invaderMove","setUpLevel","currEntity","newEntities","newEnemyMoveParam","Enemies","drawBottomText","handleAction","action","setAction","appDialog","setAppDialog","args","setShowKeybindDialog","showKeybindDialog","setShowScoreboard","showScoreboard","setShowControls","showControls","handleTopMenu","appMenu","setAppMenu","gameChoice","KeybindDialog","keyboard","setKeyboard","newKeybinds","setNewKeybinds","structuredClone","keybindState","setKeybindState","update","setUpdate","info","_jsxs","children","keys","map","key","style","display","flexDirection","marginLeft","justifyContent","alignItems","textAlign","keybind","border","onContextMenu","e","removeKeybind","onClick","changeKeybind","Promise","resolve","reject","document","addEventListener","removeEventListener","then","value","catch","error","addNewKeybind","actions","Confirm","Reset","Cancel","title","_Fragment","Arcade","contextMenu","canvasContainer","active","one","two","command","setCommand","validateKey","useCallback","state","keyArray","currKeyArray","c","handleKeyPress","event","handleKeyRelease","Controls","setGameChoice","playButtonFlag","setPlayButtonFlag","setScoreboard","handleScreenButton","repeat","dispatchEvent","KeyboardEvent","handleContextMenu","content","preventDefault","playpause","setOpen","setPosition","clientX","clientY","setContent","onChange","className","BsFillPlayFill","BsPauseFill","Snake","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","FaArrowLeft","FaArrowUp","FaArrowDown","FaArrowRight"],"sourceRoot":""}